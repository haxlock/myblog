<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于linux基本命令以及作用的概述和汇总学习-2</title>
    <url>/2025/02/17/linux%E5%AD%A6%E4%B9%A0/linux%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-2/</url>
    <content><![CDATA[<h3 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@root:~$ <span class="built_in">env</span> | grep PATH</span><br><span class="line">CLASSPATH=.:/usr/local/jdk21/lib</span><br><span class="line">PATH=.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>

<p>可以得到这么一些键值对，其实从本以上来理解，查询环境变量，本就是通过在<strong>PATH键对应的值</strong>中去查找相应的命令环境</p>
<p>会在值中挨个去搜索环境变量的值，直到寻找到相应的内容。</p>
<span id="more"></span>

<h3 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h3><p>$是用于取”变量”的值。</p>
<p>取得环境变量的值可以通过语法：$来获得</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@root:~$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>

<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>如果你给你自己开发的程序记录在环境变量中，那么也可以通过你自己设定的命令行来快速地执行这个环境变量</p>
<h4 id="自行设置方法："><a href="#自行设置方法：" class="headerlink" title="自行设置方法："></a>自行设置方法：</h4><ul>
<li>临时设置：语法：export 变量名称&#x3D;变量值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@root:~$ <span class="built_in">export</span> MYNAME=haxlock</span><br><span class="line">haxlock@root:~$ <span class="built_in">echo</span> <span class="variable">$MYNAME</span></span><br><span class="line">haxlock</span><br></pre></td></tr></table></figure>

<ul>
<li><p>永久生效</p>
</li>
<li><ul>
<li><p>针对当前用户生效，配置在当前用户地： ~&#x2F; .bashrc中</p>
</li>
<li><p>针对所有用户生效，配置在系统的： &#x2F;etc&#x2F;profile文件中</p>
</li>
<li><p>并通过语法：source配置文件，进行立刻生效，或重新登陆Xshell生效</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/ .bashrc</span><br><span class="line"><span class="comment"># source使得环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure>

<h2 id="Linux上传和下载"><a href="#Linux上传和下载" class="headerlink" title="Linux上传和下载"></a>Linux上传和下载</h2><h3 id="通过Xshell和Xftp进行上传和下载"><a href="#通过Xshell和Xftp进行上传和下载" class="headerlink" title="通过Xshell和Xftp进行上传和下载"></a>通过Xshell和Xftp进行上传和下载</h3><p>此部分比较简单，建议参考官方文档即可</p>
<h3 id="rz-sz命令上传与下载"><a href="#rz-sz命令上传与下载" class="headerlink" title="rz,sz命令上传与下载"></a>rz,sz命令上传与下载</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install lrzsz -y</span><br></pre></td></tr></table></figure>

<h4 id="sz-下载"><a href="#sz-下载" class="headerlink" title="sz 下载"></a>sz 下载</h4><blockquote>
<p>注意！</p>
<p>sz只能传输单个文件，无法传输目录，因此如果您想传输文件，建议先压缩在下载</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sz [需要下载的文件名]</span><br></pre></td></tr></table></figure>

<h4 id="rz-上传"><a href="#rz-上传" class="headerlink" title="rz 上传"></a>rz 上传</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure>

<p>选择您需要上传的目录即可</p>
<h2 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h2><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><p>Linux与MAC常用有两种压缩格式，后缀名分别为：</p>
<ul>
<li><p>.tar，成为tarball，归档文件，简单的啊文件组装到一个tar文件内，并没有太多文件体积的减少，仅仅为封装</p>
</li>
<li><p>.gz 使用gzip压缩算法将一个文件压缩到文件内，可以极大的减少压缩后的体积</p>
</li>
</ul>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar [-c -v -x -f -z -C] 参数1 参数2 参数N</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>-c</code>：创建一个新的压缩文件。</p>
</li>
<li><p><code>-x</code>：解压归档文件。</p>
</li>
<li><p><code>-t</code>：列出归档文件的内容。</p>
</li>
<li><p><code>-r</code>：向现有归档文件中追加文件。</p>
</li>
<li><p><code>-u</code>：仅追加比归档文件中已有文件更新的文件。</p>
</li>
<li><p><code>-d</code>：找到归档文件中与文件系统不同步的差异。</p>
</li>
<li><p><code>-A</code>：将一个 <code>.tar</code> 文件追加到另一个 <code>.tar</code> 文件中。</p>
</li>
</ul>
<p>其中 -f必须在最后，接受解压压缩文件的名称</p>
<h3 id="常用的压缩组合"><a href="#常用的压缩组合" class="headerlink" title="常用的压缩组合"></a>常用的压缩组合</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将1.txt,2.txt,3.txt压缩到test.tar文件中</span></span><br><span class="line">tar -cvf test.tar 1.txt 2.txt 3.txt</span><br><span class="line"><span class="comment"># 将1.txt,2.txt,3.txt压缩到test.tar.gz文件中</span></span><br><span class="line">tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</span><br></pre></td></tr></table></figure>

<h3 id="常用的解压组合"><a href="#常用的解压组合" class="headerlink" title="常用的解压组合"></a>常用的解压组合</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压test.tar 到当前目录</span></span><br><span class="line">tar -xvf test.tar</span><br><span class="line"><span class="comment"># 解压test.tar到指定目录</span></span><br><span class="line">tar -xvf test.tar -C /home/test</span><br><span class="line"><span class="comment"># 以Gzip模式解压test.tar.gz,将文件解压到指定目录下</span></span><br><span class="line">tar -zxvf test.tar.gz -C /home/test</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>-f必须在最后一位</p>
</li>
<li><p>-z建议在开头</p>
</li>
<li><p>-C建议单独使用</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>服务器</category>
        <category>运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于linux基本命令以及作用的概述和汇总学习</title>
    <url>/2025/02/10/linux%E5%AD%A6%E4%B9%A0/linux%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="这是一篇关于linux基本命令以及作用的概述和汇总学习"><a href="#这是一篇关于linux基本命令以及作用的概述和汇总学习" class="headerlink" title="这是一篇关于linux基本命令以及作用的概述和汇总学习"></a>这是一篇关于linux基本命令以及作用的概述和汇总学习</h1><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><p>ls命令用于列出目录下的内容</p>
<p>例如输出结果可能如下：</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">ls</span></span><br><span class="line">back_data  DDNS-go  ha  server  test.txt</span><br></pre></td></tr></table></figure>

<h3 id="ls参数-选项"><a href="#ls参数-选项" class="headerlink" title="ls参数-选项"></a>ls参数-选项</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> [-a -l -h] [linux路径]</span><br></pre></td></tr></table></figure>

<p>这是ls 可选参数的基本概况</p>
<p>以下是三种参数对应的输出情况：</p>
<h4 id="ls-a"><a href="#ls-a" class="headerlink" title="ls -a"></a>ls -a</h4><p>会输出项目下所有文件夹下所有文件情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">ls</span> -a</span><br><span class="line">.              .bash_history  DDNS-go     .profile                   test.txt    .Xauthority</span><br><span class="line">..             .bash_logout   ha          .pyenv                     .vim        .xsessionrc</span><br><span class="line">back_data      .bashrc        .<span class="built_in">local</span>      server                     .viminfo    .zshrc</span><br><span class="line">.bash_aliases  .cache         .oh-my-zsh  .sudo_as_admin_successful  .wget-hsts</span><br></pre></td></tr></table></figure>

<h4 id="ls-l"><a href="#ls-l" class="headerlink" title="ls -l"></a>ls -l</h4><p>会以列表的形式，详细说明目录下文件的具体信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">ls</span> -l</span><br><span class="line">total 20</span><br><span class="line">drwxrwxr-x 13 root    root    4096  1月 23 13:38 back_data</span><br><span class="line">drwxr-xr-x  2 root    root    4096  1月 10 07:46 DDNS-go</span><br><span class="line">drwxr-xr-x  2 root    root    4096  1月 10 13:47 ha</span><br><span class="line">drwxr-xr-x  6 root    root    4096  1月  9 17:51 server</span><br><span class="line">-rw-rw-r--  1 haxlock haxlock   20  2月  6 10:26 test.txt</span><br></pre></td></tr></table></figure>

<h4 id="ls-h"><a href="#ls-h" class="headerlink" title="ls -h"></a>ls -h</h4><ul>
<li><p>-h 表示易于阅读的形式，列出文件的大小，如K,M,G</p>
</li>
<li><p>[attention!] -h 必须要搭配 -l 使用，否则无效、</p>
</li>
</ul>
<p>下面为演示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">ls</span> -lh</span><br><span class="line">total 20K</span><br><span class="line">drwxrwxr-x 13 root    root    4.0K  1月 23 13:38 back_data</span><br><span class="line">drwxr-xr-x  2 root    root    4.0K  1月 10 07:46 DDNS-go</span><br><span class="line">drwxr-xr-x  2 root    root    4.0K  1月 10 13:47 ha</span><br><span class="line">drwxr-xr-x  6 root    root    4.0K  1月  9 17:51 server</span><br><span class="line">-rw-rw-r--  1 haxlock haxlock   20  2月  6 10:26 test.txt</span><br></pre></td></tr></table></figure>

<p>可以看到这是显示出来了文件的大小，如4.0K</p>
<h3 id="ls-结尾"><a href="#ls-结尾" class="headerlink" title="ls 结尾"></a>ls 结尾</h3><p>ls -a -l -h 都可以组合使用，具体需要根据实际场景进行变更，这是一个非常方便的快捷键用于查看当前路径下的所有文件情况。</p>
<h2 id="cd-pwd-命令"><a href="#cd-pwd-命令" class="headerlink" title="cd &#x2F; pwd 命令"></a>cd &#x2F; pwd 命令</h2><h4 id="cd-（Change-Directory）"><a href="#cd-（Change-Directory）" class="headerlink" title="cd （Change Directory）"></a>cd （Change Directory）</h4><p>cd 主要用于切换当前操作目录，例如:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ </span><br></pre></td></tr></table></figure>

<p>当前就是在&#x2F;home&#x2F;haxlock目录下</p>
<p>那么我想切换到别的目录，这时需要用到cd命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">cd</span> /etc/</span><br><span class="line">haxlock@armbian:/etc$ </span><br></pre></td></tr></table></figure>

<p>cd 后面接 &#x2F;etc&#x2F;就切换到了 <strong>根目录下</strong>  的 <strong>etc</strong> 文件夹下的路径</p>
<blockquote>
<p>注意！</p>
<p>其中最头部的 ‘&#x2F;’是代表linux的根目录，一一定不能少    </p>
</blockquote>
<p>如果直接就写一个cd，那么会快速返回用户目录下的home目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:/etc$ <span class="built_in">cd</span></span><br><span class="line">haxlock@armbian:~$ </span><br></pre></td></tr></table></figure>

<h4 id="pwd-Print-Word-Directory"><a href="#pwd-Print-Word-Directory" class="headerlink" title="pwd (Print Word Directory)"></a>pwd (Print Word Directory)</h4><p>pwd用于打印当前的工作目录路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">pwd</span></span><br><span class="line">/home/haxlock</span><br></pre></td></tr></table></figure>

<p>可见控制台可以输出当前工作目录</p>
<h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><h3 id="mkdir-创建目录命令"><a href="#mkdir-创建目录命令" class="headerlink" title="mkdir 创建目录命令"></a>mkdir 创建目录命令</h3><p>通过 mkdir [-p] Linux路径</p>
<ul>
<li>参数 <strong>必填</strong> 表示路径，就是要创建文件夹的路径，相对和绝对均可</li>
<li>-p是为了创建多个层级的目录</li>
</ul>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">mkdir</span> <span class="built_in">test</span></span><br><span class="line">haxlock@armbian:~$ <span class="built_in">ls</span></span><br><span class="line">back_data  DDNS-go  ha  server  <span class="built_in">test</span>  test.txt</span><br></pre></td></tr></table></figure>

<p>可见此时新出现一个test文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">haxlock@armbian:~/test$ </span><br></pre></td></tr></table></figure>

<p>可以进入这个新文件夹</p>
<p>我想快速在home目录下创建文件怎么办呢？</p>
<p>可以用这个快捷命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">mkdir</span> ~/1</span><br><span class="line">haxlock@armbian:~$ <span class="built_in">ls</span></span><br><span class="line">1  back_data  DDNS-go  ha  server  <span class="built_in">test</span>  test.txt</span><br></pre></td></tr></table></figure>

<p>可见在home路径下创建了一个新的‘1’的文件夹</p>
<h3 id="mkdir-创建多个层级目录"><a href="#mkdir-创建多个层级目录" class="headerlink" title="mkdir 创建多个层级目录"></a>mkdir 创建多个层级目录</h3><p>此时需要使用-p命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">mkdir</span> -p 2/3/4</span><br><span class="line">haxlock@armbian:~$ <span class="built_in">ls</span></span><br><span class="line">1  2  back_data  DDNS-go  ha  server  <span class="built_in">test</span>  test.txt</span><br><span class="line">haxlock@armbian:~$ <span class="built_in">cd</span> 2/3/4/</span><br><span class="line">haxlock@armbian:~/2/3/4$ <span class="built_in">pwd</span></span><br><span class="line">/home/haxlock/2/3/4</span><br><span class="line">haxlock@armbian:~/2/3/4$ </span><br></pre></td></tr></table></figure>

<p>可以创建多层路径</p>
<h2 id="touch、cat、more文件操作命令"><a href="#touch、cat、more文件操作命令" class="headerlink" title="touch、cat、more文件操作命令"></a>touch、cat、more文件操作命令</h2><h3 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="touch 创建文件"></a>touch 创建文件</h3><p>touch Linux路径</p>
<p>我想创建一个test.txt文件</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">touch</span> test.txt</span><br><span class="line">haxlock@armbian:~$ <span class="built_in">ls</span></span><br><span class="line">back_data  DDNS-go  ha  server  test.txt</span><br></pre></td></tr></table></figure>

<p>创建了一个test.txt文件</p>
<blockquote>
<p>可以通过颜色分别文件和文件夹，有色的是文件夹，白色的是文件</p>
</blockquote>
<h3 id="cat、more查看文件内容"><a href="#cat、more查看文件内容" class="headerlink" title="cat、more查看文件内容"></a>cat、more查看文件内容</h3><h4 id="cat查看"><a href="#cat查看" class="headerlink" title="cat查看"></a>cat查看</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">cat</span> test.txt </span><br><span class="line">这是一个测试文件</span><br></pre></td></tr></table></figure>

<h4 id="more查看"><a href="#more查看" class="headerlink" title="more查看"></a>more查看</h4><p>more与cat不同的是</p>
<ul>
<li><p>cat是直接把所有内容显示出来</p>
</li>
<li><p>more是支持翻页的，可以一页一页显（空格翻页）</p>
</li>
</ul>
<h2 id="cp-mv-rm命令"><a href="#cp-mv-rm命令" class="headerlink" title="cp-mv-rm命令"></a>cp-mv-rm命令</h2><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><p>cp（copy）用于复制文件、文件夹，主要用途在于修改某文件前将他提前备份。</p>
<p><strong>cp [-r] 路径1 路径2</strong></p>
<p>例如我想把&#x2F;home&#x2F;haxlock下的test.txt复制到根目录下，那么命令就是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /home/haxlock/test.txt /</span><br></pre></td></tr></table></figure>

<p>其中-r是当复制文件夹时候使用的，表示递归</p>
<h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><p>mv（move）用于移动文件或文件夹</p>
<p><strong>mv 参数1 参数2</strong></p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /home/haxlock/test.txt /</span><br></pre></td></tr></table></figure>

<p>把路径下的test.txt移动到根目录下</p>
<h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><h5 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h5><p>rm是用于删除的指令</p>
<p>rm [-r -f] 参数1 参数2 参数3 ….参数n </p>
<p>其中，-r表示用于删除文件夹</p>
<p>-f 表示force,强制删除文件夹，不会弹出提示</p>
<p>后面多个参数代表多个您需要删除的文件。</p>
<p>例如我想删除&#x2F;home&#x2F;haxlock路径下的‘1’文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r /home/haxlock/1</span><br></pre></td></tr></table></figure>

<p>这时候会弹出提示您是否要删除？然后确认即可</p>
<p>如果您加了 -f 那么就不会弹出提示</p>
<p>大部分情况下不建议使用-f 参数，因为十分危险。</p>
<h5 id="搭配通配符使用"><a href="#搭配通配符使用" class="headerlink" title="搭配通配符使用"></a>搭配通配符使用</h5><ul>
<li><p>*符号就代表通配符，可以匹配任意内容</p>
</li>
<li><p>test* 表示匹配所有以test开头的内容</p>
</li>
<li><p>*test 表示所有以test结尾的内容</p>
</li>
<li><p>*test* 表示所有包含test的内容</p>
</li>
<li><p>删除所有以test开头的文件和文件夹：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r <span class="built_in">test</span>*</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h2 id="which-find-命令"><a href="#which-find-命令" class="headerlink" title="which- find 命令"></a>which- find 命令</h2><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><p>which用于查找命令对应的文件</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>只针对命令文件查找 </p>
</blockquote>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><h4 id="按照文件名查找"><a href="#按照文件名查找" class="headerlink" title="按照文件名查找"></a>按照文件名查找</h4><p>find <strong>起始路径</strong> -name <strong>“被查找文件名”</strong></p>
<p>由于是全盘搜索</p>
<p>命令应当这样使用:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> find / -name <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>也可以搭配通配符使用，详情请看[搭配通配符使用](##### 搭配通配符使用)</p>
<h4 id="按照大小查找"><a href="#按照大小查找" class="headerlink" title="按照大小查找"></a>按照大小查找</h4><p>find 起始路径 -size + | n[kMG]</p>
<ul>
<li><p>+ - 表示大于和小于</p>
</li>
<li><p>n表示大小数字</p>
</li>
<li><p>kMG表示单位，k(小写字母)表示kb，M为MB,G为GB</p>
</li>
</ul>
<p>例如：</p>
<ul>
<li><p>查找小于10KB文件：find &#x2F; -size -10k</p>
</li>
<li><p>大于100MB文件： find &#x2F; -size + 100M</p>
</li>
<li><p>查找大于1GB文件: find &#x2F; -size +1G</p>
</li>
</ul>
<h2 id="grep-wc-管道符号"><a href="#grep-wc-管道符号" class="headerlink" title="grep-wc 管道符号"></a>grep-wc 管道符号</h2><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>grep [-n] 关键字 文件路径</p>
<ul>
<li><p>-n 可选表示结果中显示匹配的行的行号</p>
</li>
<li><p>关键字 表示要过滤的关键字，用“”包围</p>
</li>
<li><p>文件路径，可作为内容的输入端口</p>
</li>
</ul>
<p>例如有一个test.txt文件，内容为：</p>
<p>这是一个测试文件</p>
<p>这是两个测试文件</p>
<p>这是三个测试文件</p>
<p>查找第一行，一个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ grep <span class="string">&quot;一个&quot;</span> test.txt </span><br><span class="line">这是一个测试文件</span><br></pre></td></tr></table></figure>

<p>一个被标红，输入查找结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ grep -n <span class="string">&quot;一个&quot;</span> test.txt </span><br><span class="line">1:这是一个测试文件</span><br></pre></td></tr></table></figure>

<p>加入-n参数可以输入行数</p>
<h3 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h3><p>wc [-c -m -l -w]  文件路径</p>
<p>用于统计文件的行数、单词数量等</p>
<ul>
<li><p>-c 统计bytes数量</p>
</li>
<li><p>-m 统计字符数量</p>
</li>
<li><p>-l 统计行数</p>
</li>
<li><p>-w 统计单词数量</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">wc</span> test.txt </span><br><span class="line"> 5  3 77 test.txt</span><br></pre></td></tr></table></figure>

<p>5代表五行，3代表个3个单词，77个字节</p>
<h3 id="‘-’-管道符"><a href="#‘-’-管道符" class="headerlink" title="‘|’ 管道符"></a>‘|’ 管道符</h3><p><strong>表示把管道符后左边的命令结果，作为右边的命令的输入</strong></p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">cat</span> test.txt | <span class="built_in">wc</span> -l</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<p>左边cat输入的结果作为右边wc -l命令的输入</p>
<p>输出结果5，代表中国文件有五行内容</p>
<p>又例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">ls</span> -l /usr/bin | <span class="built_in">wc</span> -l</span><br><span class="line">1180</span><br></pre></td></tr></table></figure>

<p>可以用于统计文件的数量</p>
<h2 id="echo、tail和重定向符"><a href="#echo、tail和重定向符" class="headerlink" title="echo、tail和重定向符"></a>echo、tail和重定向符</h2><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>echo 输出的内容</p>
<p><strong>可以用echo命令在命令行输出指定内容</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">echo</span> <span class="string">&quot;hello word&quot;</span></span><br><span class="line">hello word</span><br></pre></td></tr></table></figure>

<p>如果想输出‘pwd’的结果呢？</p>
<p>我们可以：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">echo</span> `<span class="built_in">pwd</span>`</span><br><span class="line">/home/haxlock</span><br></pre></td></tr></table></figure>

<p>用 `pwd` 即可实现这个功能，被  &#96; 所包围的会输出它的结果</p>
<h3 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h3><h4 id=""><a href="#" class="headerlink" title="&gt;"></a>&gt;</h4><p>&gt; 把左侧命令的结果覆盖写入符号右侧的文件中</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">echo</span> <span class="string">&quot;覆盖测试&quot;</span> &gt; test.txt </span><br><span class="line">haxlock@armbian:~$ <span class="built_in">cat</span> test.txt </span><br><span class="line">覆盖测试</span><br></pre></td></tr></table></figure>

<h4 id="-1"><a href="#-1" class="headerlink" title="&gt;&gt;"></a>&gt;&gt;</h4><p>&gt;&gt; 表示把左侧命令结果追加写入符号右侧的文件中</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">echo</span> <span class="string">&quot;我嘞个都！&quot;</span> &gt;&gt; test.txt </span><br><span class="line">haxlock@armbian:~$ <span class="built_in">cat</span> test.txt </span><br><span class="line">覆盖测试</span><br><span class="line">我嘞个都！</span><br></pre></td></tr></table></figure>

<h3 id="tail-命令"><a href="#tail-命令" class="headerlink" title="tail 命令"></a>tail 命令</h3><p>tail [-f -num] Linux路径</p>
<p>查看文件尾部内容，<strong>跟踪文件的是最新更改</strong></p>
<ul>
<li><p>Linux路径表示被跟踪的路径</p>
</li>
<li><p>-f 表示持续跟踪</p>
</li>
<li><p>-num 表示查看尾部多少行，默认为10</p>
</li>
</ul>
<p><strong>查看尾部10行，追踪文件更新</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">tail</span> -5 test.txt </span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line">www</span><br></pre></td></tr></table></figure>

<p>如果用 -f参数，那么会一直跟踪文件的更新情况</p>
<h2 id="vim-vi编辑器"><a href="#vim-vi编辑器" class="headerlink" title="vim\vi编辑器"></a>vim\vi编辑器</h2><p>vim兼容所有vi功能，后续使用vim就行，无所谓</p>
<ul>
<li><p>若文件不存在，则创建文件</p>
</li>
<li><p>若文件已存在，则直接编辑文件</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim hello.txt</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>模式</th>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>命令模式</td>
<td><code>i</code></td>
<td>在当前光标位置进入<code>输入模式</code></td>
</tr>
<tr>
<td>命令模式</td>
<td><code>a</code></td>
<td>在当前光标位置后进入<code>输入模式</code></td>
</tr>
<tr>
<td>命令模式</td>
<td><code>I</code></td>
<td>在行开头进入<code>输入模式</code></td>
</tr>
<tr>
<td>命令模式</td>
<td><code>A</code></td>
<td>在行结尾进入<code>输入模式</code></td>
</tr>
<tr>
<td>命令模式</td>
<td><code>o</code></td>
<td>在光标下一行进入<code>输入模式</code></td>
</tr>
<tr>
<td>命令模式</td>
<td><code>O</code></td>
<td>在光标上一行进入<code>输入模式</code></td>
</tr>
<tr>
<td>输入模式</td>
<td><code>esc</code></td>
<td>esc进入<code>命令模式</code></td>
</tr>
<tr>
<td>命令模式</td>
<td><code>上,k</code></td>
<td>向上移动光标</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>下,j</code></td>
<td>向下移动光标</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>左,h</code></td>
<td>向左移动光标</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>右,l</code></td>
<td>向右移动光标</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>0</code></td>
<td>移动光标到当前行头</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>$</code></td>
<td>移动光标到当前行尾</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>pgUp</code></td>
<td>上翻页</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>pgDn</code></td>
<td>下翻页</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>/</code></td>
<td>搜索模式</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>n</code></td>
<td>向下继续搜索</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>N</code></td>
<td>向上继续搜索</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>dd</code></td>
<td>删除当前行</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>ndd</code></td>
<td>删除当前行下面的n行</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>yy</code></td>
<td>复制当前行</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>nyy</code></td>
<td>复制n行</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>p</code></td>
<td>粘贴内容</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>u</code></td>
<td>撤销修改</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>ctrl + r</code></td>
<td>反向撤销修改</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>gg</code></td>
<td>跳到首行</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>G</code></td>
<td>跳到行尾</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>dG</code></td>
<td>从当前行，向下全部删除</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>dgg</code></td>
<td>从当前行开始，向上全部删除</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>d$</code></td>
<td>从当前光标开始，删除到本行的结尾</td>
</tr>
<tr>
<td>命令模式</td>
<td><code>d0</code></td>
<td>从当前光标开始，删除到本行的开头</td>
</tr>
<tr>
<td>底线命令模式</td>
<td><code>:wq</code></td>
<td>保存并退出</td>
</tr>
<tr>
<td>底线命令模式</td>
<td><code>:q</code></td>
<td>退出</td>
</tr>
<tr>
<td>底线命令模式</td>
<td><code>:q!</code></td>
<td>强制退出</td>
</tr>
<tr>
<td>底线命令模式</td>
<td><code>:w</code></td>
<td>保存</td>
</tr>
<tr>
<td>底线命令模式</td>
<td><code>:set nu</code></td>
<td>显示行号</td>
</tr>
<tr>
<td>底线命令模式</td>
<td><code>:set paste</code></td>
<td>设置粘贴模式（为了确保粘贴格式没问题）</td>
</tr>
</tbody></table>
<h2 id="关于为什么ubuntu、debian等使用su-root无法进入root模式的原因"><a href="#关于为什么ubuntu、debian等使用su-root无法进入root模式的原因" class="headerlink" title="关于为什么ubuntu、debian等使用su - root无法进入root模式的原因"></a>关于为什么ubuntu、debian等使用su - root无法进入root模式的原因</h2><p>由于ubuntu、debian等发行版操作系统一般默认不给你root账户权限，因此你输入这个的时候，可能会报错如下:</p>
<p>su(switch user)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ su - root</span><br><span class="line">Password: </span><br><span class="line">su: Authentication failure</span><br></pre></td></tr></table></figure>

<p>如果您需要进入root账户，需要通过以下命令进入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">sudo</span> -i</span><br><span class="line">[<span class="built_in">sudo</span>] password <span class="keyword">for</span> haxlock: </span><br><span class="line">root@armbian:~# </span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> su</span><br></pre></td></tr></table></figure>

<p>也可以进入root账户</p>
<h3 id="切换账户的方式"><a href="#切换账户的方式" class="headerlink" title="切换账户的方式"></a>切换账户的方式</h3><p>su - 用户名</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@armbian:~# su - haxlock</span><br><span class="line">haxlock@armbian:~$ </span><br></pre></td></tr></table></figure>

<p>如果你切换完账户后，通过<code>exit</code> 可以切换回上一个用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@armbian:/home/haxlock# <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">haxlock@armbian:~$ </span><br></pre></td></tr></table></figure>

<p>还有使用<code>ctrl+d</code> 也可以切换回上一个用户</p>
<h2 id="Linux-用户以及用户组"><a href="#Linux-用户以及用户组" class="headerlink" title="Linux 用户以及用户组"></a>Linux 用户以及用户组</h2><p>Linux系统可以</p>
<ul>
<li><p>配置多个用户</p>
</li>
<li><p>配置多个用户组</p>
</li>
<li><p>用户可以加入多个用户组</p>
</li>
</ul>
<h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><ul>
<li>创建</li>
</ul>
<p>groupadd 用户组名</p>
<ul>
<li>删除</li>
</ul>
<p>groupdel 用户组名</p>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ul>
<li>创建用户</li>
</ul>
<p><code>useradd [-g -d] 用户名</code></p>
<ol>
<li><p>选项： -g指定用户组，不指定-g，会创建同名组并自动加入，指定-g需要组以及存在，如果存在用户组，必须使用-g</p>
</li>
<li><p>选项：-d指定用户HOME路径，如果不指定就默认在&#x2F;home&#x2F;用户名下</p>
</li>
</ol>
<ul>
<li>删除用户</li>
</ul>
<p><code>userdel [-r] 用户名</code></p>
<p>    1. 选项： -r，删除用户的HOME目录，不适用-r，删除用户时，HOME会被保留</p>
<ul>
<li>查看用户所属组</li>
</ul>
<p><code>id [用户名]</code></p>
<p>    1. 参数：用户名，被查看的用户，如果不提供则查看自身</p>
<ul>
<li>修改用户所属组</li>
</ul>
<p><code>usermod -aG 用户组 用户名</code></p>
<p>指定用户加入指定的用户组</p>
<h3 id="getent"><a href="#getent" class="headerlink" title="getent"></a>getent</h3><p>getent passwd</p>
<p>查看当前系统中有哪些用户</p>
<p>getent group</p>
<p>查看当前系统有哪些组</p>
<h2 id="查看权限管控"><a href="#查看权限管控" class="headerlink" title="查看权限管控"></a>查看权限管控</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@armbian:~$ <span class="built_in">ls</span> -l</span><br><span class="line">total 20</span><br><span class="line">drwxrwxr-x 13 root    root    4096  1月 23 13:38 back_data</span><br><span class="line">drwxr-xr-x  2 root    root    4096  1月 10 07:46 DDNS-go</span><br><span class="line">drwxr-xr-x  2 root    root    4096  1月 10 13:47 ha</span><br><span class="line">drwxr-xr-x  6 root    root    4096  1月  9 17:51 server</span><br><span class="line">-rw-rw-r--  1 haxlock haxlock  155  2月  7 08:45 test.txt</span><br></pre></td></tr></table></figure>

<p>来分析一下头部</p>
<p>drwxrwxr-x</p>
<ul>
<li><p>d表示这是一个文件夹，-为文件,l表示软链接</p>
</li>
<li><p>rwx这三个是所属用户权限，表示有r有w有x</p>
</li>
<li><p>rwx后三个表示是所属用户组的权限,有r有w有x</p>
</li>
<li><p>r-x最后三个表示洽谈用户权限，有r无w有x</p>
</li>
</ul>
<p>r代表读权限，w代表可写，x代表可执行(excute)</p>
<h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p>可以通过chmod命令，修改，文件、文件夹的权限信息</p>
<blockquote>
<p>只有文件、文件夹的所属用户或者root用户可以修改</p>
</blockquote>
<p><strong>语法： chmod [-R] 权限 权限 文件或者文件夹</strong></p>
<ul>
<li><p>-R 对文件夹内全部内容应用同样的擦欧总</p>
</li>
<li><p>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x hello.txt 把权限修改为rwxr-x–x</p>
</li>
<li><ul>
<li>其中u代表user所属先前，g表示group组权限，o表示其他用户权限</li>
</ul>
</li>
<li><p>chmod -r u&#x3D;rwx,g&#x3D;rx,o&#x3D;x test 将问及那家tst以及文件夹内全部内容权限设置为wrxr-r–x</p>
</li>
</ul>
<p>权限也可以用数字来替代</p>
<p>用三位数字表示 <strong>r为4,w为2,x为1</strong></p>
<ul>
<li><p>0:无任何权限 —</p>
</li>
<li><p>1:仅x，–x</p>
</li>
<li><p>2:仅w, -w-</p>
</li>
<li><p>3:wx, -wx</p>
</li>
<li><p>4:仅，r</p>
</li>
<li><p>5:r-x,r和x权限, r-x</p>
</li>
<li><p>6:有r和w权限，rw-</p>
</li>
<li><p>7:全部权限,rwx</p>
</li>
</ul>
<p><strong>简单说就是二进制的和</strong></p>
<h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><p>修改文件、文件夹所属用户和用户组</p>
<p><strong>此命令只可root执行</strong></p>
<p>语法：<code>chown [-R] [用户][:][用户组] 文件或者文件夹</code></p>
<h2 id="linux各种实用命令"><a href="#linux各种实用命令" class="headerlink" title="linux各种实用命令"></a>linux各种实用命令</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>ctrl+c强制退出停止命令运行</p>
<p>ctrl+d退出当前登录</p>
<p>history 查看历史输入过的命令</p>
<p>!命令前缀，自动执行上一次匹配前缀的命令</p>
<h3 id="历史命令搜索："><a href="#历史命令搜索：" class="headerlink" title="历史命令搜索："></a>历史命令搜索：</h3><ul>
<li><p>通过ctrl+r，输入内容去匹配历史命令</p>
</li>
<li><p>键盘左右键，可以得到此命令（不执行）</p>
</li>
<li><p>ctrl+a跳到命令开头,ctrl+e跳到命令结尾，ctril+左，向左跳一个单词，ctrl+右，向右跳一个单词</p>
</li>
<li><p>ctrl+l清空终端内容,clear也可以得到同样的效果</p>
</li>
</ul>
<h3 id="ubuntu-apt命令"><a href="#ubuntu-apt命令" class="headerlink" title="ubuntu-apt命令"></a>ubuntu-apt命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="comment">#安装这个包</span></span><br><span class="line"><span class="built_in">sudo</span> apt install wget</span><br><span class="line"><span class="comment"># 寻找这个应用包</span></span><br><span class="line"><span class="built_in">sudo</span> apt search wget</span><br><span class="line"><span class="comment">#移除这个包</span></span><br><span class="line"><span class="built_in">sudo</span> apt remove wget</span><br></pre></td></tr></table></figure>

<h3 id="systemctl命令"><a href="#systemctl命令" class="headerlink" title="systemctl命令"></a>systemctl命令</h3><p>systemctl控制软件、服务的启停，开机自启</p>
<ul>
<li><p>systemctl start 开启服务</p>
</li>
<li><p>systemctl stop 关闭服务</p>
</li>
<li><p>systemctl enable 开机自启动</p>
</li>
<li><p>systemctl status 查看状态</p>
</li>
</ul>
<h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>简单来说类似于windows中的快捷方式</p>
<p>创建一个链接可以指向一个文件、文件夹</p>
<p>语法： <code>ln -s 参数1 参数2</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@ubuntu:~$ <span class="built_in">sudo</span> <span class="built_in">ln</span> -s /etc/apt ~/apt</span><br><span class="line">haxlock@ubuntu:~$ <span class="built_in">ls</span> -l</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x 3 root    root    4096 Feb 11 14:33 1panel-v1.10.24-lts-linux-amd64</span><br><span class="line">lrwxrwxrwx 1 root    root       8 Feb 14 08:16 apt -&gt; /etc/apt</span><br><span class="line">-rw-rw-r-- 1 haxlock haxlock 3586 Jun 29  2020 bt-uninstall.sh</span><br><span class="line">drwxrwxr-x 2 root    root    4096 Feb 14 05:35 <span class="built_in">test</span></span><br><span class="line">haxlock@ubuntu:~$ <span class="built_in">cd</span> apt</span><br><span class="line">haxlock@ubuntu:~/apt$ <span class="built_in">ls</span></span><br><span class="line">apt.conf.d   keyrings       preferences.d.save  sources.list.btbackup     sources.list.d  trusted.gpg.d</span><br><span class="line">auth.conf.d  preferences.d  sources.list        sources.list.curtin.orig  trusted.gpg</span><br><span class="line">haxlock@ubuntu:~/apt$ <span class="built_in">cd</span> ..</span><br><span class="line">haxlock@ubuntu:~$ <span class="built_in">ls</span></span><br><span class="line">1panel-v1.10.24-lts-linux-amd64  apt  bt-uninstall.sh  <span class="built_in">test</span></span><br><span class="line">haxlock@ubuntu:~$ </span><br></pre></td></tr></table></figure>

<h2 id="date-查看时间"><a href="#date-查看时间" class="headerlink" title="date 查看时间"></a>date 查看时间</h2><p>格式<code>date [-d] [+格式化字符串]</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Fri Feb 14 08:17:09 AM UTC 2025</span><br><span class="line">haxlock@ubuntu:~$ <span class="built_in">date</span></span><br><span class="line">Fri Feb 14 08:18:34 AM UTC 2025</span><br><span class="line">haxlock@ubuntu:~$ <span class="built_in">date</span> +%Y-%m-%d</span><br><span class="line">2025-02-14</span><br><span class="line">haxlock@ubuntu:~$ <span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span></span><br><span class="line">2025-02-14 08:20:32</span><br></pre></td></tr></table></figure>

<ul>
<li><p>%Y年</p>
</li>
<li><p>y 年份后两位数字</p>
</li>
<li><p>m 月份</p>
</li>
<li><p>d 天</p>
</li>
<li><p>H 小时（24）</p>
</li>
<li><p>M 分钟</p>
</li>
<li><p>S 秒</p>
</li>
<li><p>s 自1970-01-01至今的时间</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看明天的时间</span></span><br><span class="line">haxlock@ubuntu:~$ <span class="built_in">date</span> -d <span class="string">&quot;+1 day&quot;</span></span><br><span class="line">Sat Feb 15 08:26:36 AM UTC 2025</span><br><span class="line"></span><br><span class="line"><span class="comment">#去年</span></span><br><span class="line">haxlock@ubuntu:~$ <span class="built_in">date</span> -d <span class="string">&quot;-1 year&quot;</span></span><br><span class="line">Wed Feb 14 08:28:10 AM UTC 2024haxlock@ubuntu:~$ <span class="built_in">date</span> -d <span class="string">&quot;-1 year&quot;</span></span><br><span class="line">Wed Feb 14 08:28:10 AM UTC 2024</span><br></pre></td></tr></table></figure>

<h3 id="修改linux时区"><a href="#修改linux时区" class="headerlink" title="修改linux时区"></a>修改linux时区</h3><h4 id="手动修改"><a href="#手动修改" class="headerlink" title="手动修改"></a>手动修改</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@ubuntu:~$ <span class="built_in">sudo</span> <span class="built_in">rm</span> -f /etc/localtime</span><br><span class="line">haxlock@ubuntu:~$ <span class="built_in">sudo</span> <span class="built_in">ln</span> -s -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime </span><br><span class="line">haxlock@ubuntu:~$ <span class="built_in">date</span></span><br><span class="line">Fri Feb 14 04:47:51 PM CST 2025</span><br></pre></td></tr></table></figure>

<h4 id="ntp自动校准"><a href="#ntp自动校准" class="headerlink" title="ntp自动校准"></a>ntp自动校准</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start ntp</span><br></pre></td></tr></table></figure>

<h4 id="ntp手动校准"><a href="#ntp手动校准" class="headerlink" title="ntp手动校准"></a>ntp手动校准</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ntpdate -u ntp.aliyun.com</span><br></pre></td></tr></table></figure>

<p>指向一个ntp服务器即可</p>
<h2 id="查看ip地址"><a href="#查看ip地址" class="headerlink" title="查看ip地址"></a>查看ip地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<p>主机名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@ubuntu:~$ hostname</span><br><span class="line">ubuntu</span><br></pre></td></tr></table></figure>

<p>修改主机名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname [需要修改的主机名]</span><br></pre></td></tr></table></figure>

<p>配置主机名映射</p>
<p>先查看本机记录</p>
<ul>
<li><p>Windows看 C:\Windows\System32\drivers\etc\hosts</p>
</li>
<li><p>Linux看： &#x2F;etc&#x2F;hosts</p>
</li>
<li><p>配置文件＋‘ip+主机名即可’</p>
</li>
</ul>
<p>再去联网去DNS服务器询问</p>
<h2 id="虚拟机静态ip配置"><a href="#虚拟机静态ip配置" class="headerlink" title="虚拟机静态ip配置"></a>虚拟机静态ip配置</h2><ul>
<li><p>首先在Vmware配置好网卡设置</p>
</li>
<li><p>进入&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33文件，修改内容</p>
</li>
<li><p>将BOOTPROTO后面DHCP改为static</p>
</li>
<li><p>末尾加入如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IPADDR=<span class="string">&quot;192.168.88.130&quot;</span> <span class="comment">#IP地址</span></span><br><span class="line">NETMASK=<span class="string">&quot;255.255.255.0&quot;</span> <span class="comment">#子网掩码</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.88.2&quot;</span> <span class="comment">#网关与VMware设置一致</span></span><br><span class="line">DNS1 =<span class="string">&quot;DNS为网关即可&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="网络传输"><a href="#网络传输" class="headerlink" title="网络传输"></a>网络传输</h2><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p><code>ping [-c num] ip</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@ubuntu:~$ ping -c 5 www.baidu.com</span><br><span class="line">PING www.baidu.com(2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77)) 56 data bytes</span><br><span class="line">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=1 ttl=54 <span class="keyword">time</span>=4.15 ms</span><br><span class="line">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=2 ttl=54 <span class="keyword">time</span>=4.71 ms</span><br><span class="line">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=3 ttl=54 <span class="keyword">time</span>=4.86 ms</span><br><span class="line">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=4 ttl=54 <span class="keyword">time</span>=4.59 ms</span><br><span class="line">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=5 ttl=54 <span class="keyword">time</span>=4.59 ms</span><br><span class="line"></span><br><span class="line">--- www.baidu.com ping statistics ---</span><br><span class="line">5 packets transmitted, 5 received, 0% packet loss, <span class="keyword">time</span> 4005ms</span><br><span class="line">rtt min/avg/max/mdev = 4.152/4.582/4.862/0.237 ms</span><br></pre></td></tr></table></figure>

<h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><p>非交互式文件下载器</p>
<p><code>wget [-b] url</code></p>
<ul>
<li><p>-b 后台下载，日志会写道wget-log中</p>
</li>
<li><p>url下载链接</p>
</li>
</ul>
<h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p>发起http网络请求，可用于下载文件、获取信息</p>
<p><code>curl [-o] url</code></p>
<ul>
<li><p>-o 用于下载文件</p>
</li>
<li><p>url请求的地址</p>
</li>
</ul>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>设备与外界通信交流的出入口</p>
<p>分为物理端口以及虚拟端口</p>
<ul>
<li><p>物理端口：也称为接口，如USB,RJ45网口，HDMI</p>
</li>
<li><p>虚拟端口：指的计算机内部端口，用于操作系统与外界交互使用</p>
</li>
</ul>
<p>Linux支持65535个端口，这6万多个端口可以分为3类使用</p>
<ul>
<li><p>公认端口：1-1023,通常为一些系统内置或者知名程序预留，例如ssh的22，https的443</p>
</li>
<li><p>注册端口：1024-49151 ，通常可以随意使用，用于松散地绑定一些程序\服务</p>
</li>
<li><p>动态端口：49152-65535，也通常不绑定程序，而是程序对外进行网络链接时候，用于临时使用</p>
</li>
</ul>
<h3 id="nmap查看端口占用情况"><a href="#nmap查看端口占用情况" class="headerlink" title="nmap查看端口占用情况"></a>nmap查看端口占用情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nmap -y</span><br><span class="line">nmap 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>会扫描某个ip开放地端口</p>
<h3 id="netstat查看指定端口占用情况"><a href="#netstat查看指定端口占用情况" class="headerlink" title="netstat查看指定端口占用情况"></a>netstat查看指定端口占用情况</h3><p>netstat -anp|grep 端口号</p>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install net-tools</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@root:~$ netstat -anp|grep 3001</span><br><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp6       0      0 :::3001                 :::*                    LISTEN      6550/java     </span><br></pre></td></tr></table></figure>

<p>可以看到某端口在被哪个端口占用，进程号(PID)是多少</p>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>也可以说是<strong>任务管理器</strong></p>
<h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps [-e -f]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>-e 显示所有的进程</p>
</li>
<li><p>-f 以完全格式化的形式展示信息</p>
</li>
</ul>
<p>一般来说，如果ps -ef就是列出所有进程的全部信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@root:~$ ps -f</span><br><span class="line">UID          PID    PPID  C STIME TTY          TIME CMD</span><br><span class="line">haxlock    96215   96214  0 14:49 pts/0    00:00:00 -bash</span><br><span class="line">haxlock    96232   96215 99 14:50 pts/0    00:00:00 ps -f</span><br></pre></td></tr></table></figure>

<ul>
<li><p>UID:进程所属的用户ID</p>
</li>
<li><p>PID: 进程的进程号ID</p>
</li>
<li><p>PPID: 进程的父ID</p>
</li>
<li><p>C:此进程的CPU占用比</p>
</li>
<li><p>STIME：进程的启动时间</p>
</li>
<li><p>TTY：启动此进程的终端序号，？表示非终端启动</p>
</li>
<li><p>TIME：进程占用CPU的时间</p>
</li>
<li><p>CMD：进程的启动路径或运行路径</p>
</li>
</ul>
<p>如果想确认跟踪一个进程的信息</p>
<p>可以：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep [进程名]</span><br></pre></td></tr></table></figure>

<h3 id="关闭进程"><a href="#关闭进程" class="headerlink" title="关闭进程"></a>关闭进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> [-9] 进程ID</span><br></pre></td></tr></table></figure>

<p>其中 <strong>-9</strong> 代表强制关闭</p>
<h2 id="top-主机状态详解"><a href="#top-主机状态详解" class="headerlink" title="top 主机状态详解"></a>top 主机状态详解</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>

<p>查看主机的各种状态参数，默认每5s刷新一次</p>
<p>内容较多，此处可当工具查找</p>
<p><strong>top命令经常用来监控linux的系统状况，是常用的性能分析工具，能够实时显示系统中各个进程的资源占用情况。</strong></p>
<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a><strong>常用参数</strong></h3><p>top的使用方式 top [-d number] | top [-bnp]</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-d number</td>
<td>number代表秒数，表示top命令显示的页面更新一次的间隔 (default&#x3D;5s)</td>
</tr>
<tr>
<td>-b</td>
<td>以批次的方式执行top</td>
</tr>
<tr>
<td>-n</td>
<td>与-b配合使用，表示需要进行几次top命令的输出结果</td>
</tr>
<tr>
<td>-p</td>
<td>指定特定的pid进程号进行观察</td>
</tr>
</tbody></table>
<p><strong>top命令显示的页面还可以输入以下按键执行相应的功能（注意大小写区分的）</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>？</td>
<td>显示在top当中可以输入的命令</td>
</tr>
<tr>
<td>P</td>
<td>以CPU的使用资源排序显示</td>
</tr>
<tr>
<td>M</td>
<td>以内存的使用资源排序显示</td>
</tr>
<tr>
<td>N</td>
<td>以pid排序显示</td>
</tr>
<tr>
<td>T</td>
<td>由进程使用的时间累计排序显示</td>
</tr>
<tr>
<td>k</td>
<td>给某一个pid一个信号,可以用来杀死进程(9)</td>
</tr>
<tr>
<td>r</td>
<td>给某个pid重新定制一个nice值（即优先级)</td>
</tr>
<tr>
<td>q</td>
<td>退出top（用ctrl+c也可以退出top）</td>
</tr>
</tbody></table>
<h3 id="top各输出参数含义"><a href="#top各输出参数含义" class="headerlink" title="top各输出参数含义"></a><strong>top各输出参数含义</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top - 15:23:39 up 7 days,  7:57,  2 <span class="built_in">users</span>,  load average: 0.00, 0.01, 0.00</span><br><span class="line">Tasks: 249 total,   1 running, 248 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.1 us,  0.2 sy,  0.0 ni, 99.8 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st </span><br><span class="line">MiB Mem :   7894.1 total,    367.4 free,   5022.1 used,   2813.0 buff/cache     </span><br><span class="line">MiB Swap:   2048.0 total,   2047.7 free,      0.3 used.   2872.0 avail Mem </span><br><span class="line"></span><br><span class="line">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                 </span><br><span class="line">  81232 root      20   0  315932   9472   7936 S   0.3   0.1   2:52.54 vmtoolsd                                                </span><br><span class="line">  96087 root      20   0       0      0      0 I   0.3   0.0   0:02.13 kworker/3:2-events                                      </span><br><span class="line">  96214 haxlock   20   0   15124   7088   5120 S   0.3   0.1   0:00.17 sshd                                                    </span><br><span class="line">  96302 haxlock   20   0   11944   5888   3712 R   0.3   0.1   0:00.02 top                                                     </span><br><span class="line">      1 root      20   0   22624  13696   9472 S   0.0   0.2   1:22.07 systemd                                                 </span><br><span class="line">      2 root      20   0       0      0      0 S   0.0   0.0   0:00.89 kthreadd         </span><br></pre></td></tr></table></figure>

<h4 id="一、top前五条信息解释"><a href="#一、top前五条信息解释" class="headerlink" title="一、top前五条信息解释"></a>一、top前五条信息解释</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top - 15:23:39 up 7 days,  7:57,  2 <span class="built_in">users</span>,  load average: 0.00, 0.01, 0.00</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>内容</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>14:49:28</td>
<td>表示当前时间</td>
</tr>
<tr>
<td>up 1:33</td>
<td>系统远行时间，格式为时：分</td>
</tr>
<tr>
<td>1 user</td>
<td>当前登陆用户数</td>
</tr>
<tr>
<td>load average: 0.00, 0.00, 0.00</td>
<td>系统负载，即任务队列的平均长度。 三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Tasks: 249 total,   1 running, 248 sleeping,   0 stopped,   0 zombi</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>内容</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Tasks: 80 total</td>
<td>进程总数</td>
</tr>
<tr>
<td>2 running</td>
<td>正在运行的进程数</td>
</tr>
<tr>
<td>78 sleeping</td>
<td>睡眠的进程数</td>
</tr>
<tr>
<td>0 stopped</td>
<td>停止的进程数</td>
</tr>
<tr>
<td>0 zombie</td>
<td>僵尸进程数</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%Cpu(s):  0.1 us,  0.2 sy,  0.0 ni, 99.8 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 s</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>内容</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0.0%us</td>
<td>用户空间占用CPU百分比</td>
</tr>
<tr>
<td>0.0%sy</td>
<td>内核空间占用CPU百分比</td>
</tr>
<tr>
<td>0.0%ni</td>
<td>用户进程空间内改变过优先级的进程占用CPU百分比</td>
</tr>
<tr>
<td>100.0%id</td>
<td>空闲CPU百分比</td>
</tr>
<tr>
<td>0.0%wa</td>
<td>等待输入输出的CPU时间百分比</td>
</tr>
<tr>
<td>0.0%hi</td>
<td>硬中断（Hardware IRQ）占用CPU的百分比</td>
</tr>
<tr>
<td>0.0%si</td>
<td>软中断（Software Interrupts）占用CPU的百分比</td>
</tr>
<tr>
<td>0.0 st</td>
<td>用于有虚拟cpu的情况，用来指示被虚拟机偷掉的cpu时间</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Mem: 1922488k total, 406936k used, 1515552k free, 11940k buffers</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>内容</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>1922488k total</td>
<td>物理内存总量</td>
</tr>
<tr>
<td>406936k used</td>
<td>使用的物理内存总量</td>
</tr>
<tr>
<td>1515552k free</td>
<td>空闲内存总量</td>
</tr>
<tr>
<td>11940k buffers</td>
<td>用作内核缓存的内存量</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Swap: 835576k total, 0k used, 835576k free, 111596k cached</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>内容</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>835576k total</td>
<td>交换区总量</td>
</tr>
<tr>
<td>0k used</td>
<td>使用的交换区总量</td>
</tr>
<tr>
<td>835576k free</td>
<td>空闲交换区总量</td>
</tr>
<tr>
<td>111596k cached</td>
<td>缓冲的交换区总量</td>
</tr>
</tbody></table>
<h4 id="二、进程信息"><a href="#二、进程信息" class="headerlink" title="二、进程信息"></a>二、进程信息</h4><table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>PID</td>
<td>进程id</td>
</tr>
<tr>
<td>USER</td>
<td>进程所有者的用户名</td>
</tr>
<tr>
<td>PR</td>
<td>优先级</td>
</tr>
<tr>
<td>NI</td>
<td>nice值。负值表示高优先级，正值表示低优先级</td>
</tr>
<tr>
<td>VIRT</td>
<td>进程使用的虚拟内存总量，单位kb。VIRT&#x3D;SWAP+RES</td>
</tr>
<tr>
<td>RES</td>
<td>进程使用的、未被换出的物理内存大小，单位kb。RES&#x3D;CODE+DATA</td>
</tr>
<tr>
<td>SHR</td>
<td>共享内存大小，单位kb</td>
</tr>
<tr>
<td>S</td>
<td>进程状态。D&#x3D;不可中断的睡眠状态 R&#x3D;运行 S&#x3D;睡眠 T&#x3D;跟踪&#x2F;停止 Z&#x3D;僵尸进程</td>
</tr>
<tr>
<td>%CPU</td>
<td>上次更新到现在的CPU时间占用百分比</td>
</tr>
<tr>
<td>%MEM</td>
<td>进程使用的物理内存百分比</td>
</tr>
<tr>
<td>TIME+</td>
<td>进程使用的CPU时间总计，单位1&#x2F;100秒</td>
</tr>
<tr>
<td>COMMAND</td>
<td>命令名&#x2F;命令行</td>
</tr>
</tbody></table>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>一系列命令本质上就是一个个可执行文件。</p>
<p>例如：cd本体就是&#x2F;usr&#x2F;bin&#x2F;cd这个文件下的文件</p>
<p>查看当前环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">env</span></span><br></pre></td></tr></table></figure>

<h3 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@root:~$ <span class="built_in">env</span> | grep PATH</span><br><span class="line">CLASSPATH=.:/usr/local/jdk21/lib</span><br><span class="line">PATH=.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>

<p>可以得到这么一些键值对，其实从本以上来理解，查询环境变量，本就是通过在<strong>PATH键对应的值</strong>中去查找相应的命令环境</p>
<p>会在值中挨个去搜索环境变量的值，直到寻找到相应的内容。</p>
<h3 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h3><p>$是用于取”变量”的值。</p>
<p>取得环境变量的值可以通过语法：$来获得</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@root:~$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>

<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>如果你给你自己开发的程序记录在环境变量中，那么也可以通过你自己设定的命令行来快速地执行这个环境变量</p>
<h4 id="自行设置方法："><a href="#自行设置方法：" class="headerlink" title="自行设置方法："></a>自行设置方法：</h4><ul>
<li>临时设置：语法：export 变量名称&#x3D;变量值</li>
</ul>
]]></content>
      <categories>
        <category>服务器</category>
        <category>运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>windows配置WSL(ubuntu)环境</title>
    <url>/2025/01/19/linux%E5%AD%A6%E4%B9%A0/windows%E9%85%8D%E7%BD%AEWSL(ubuntu)%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="什么是WSL"><a href="#什么是WSL" class="headerlink" title="什么是WSL"></a>什么是WSL</h2><p><strong>WSL</strong>：Windows Subsystem for Linux,是用于Windows系统上的Linux子系统</p>
<ul>
<li><p>完全<strong>直连</strong>计算机硬件</p>
</li>
<li><p>无需虚拟机虚拟硬件</p>
<span id="more"></span></li>
</ul>
<p>是win10系统带来的全新特性</p>
<ul>
<li><p>传统方式获取linux操作环境，都是通过虚拟机，如VMware</p>
</li>
<li><p>使用WSL，可以以非常轻量化的方式，得到linux系统环境</p>
</li>
</ul>
<h2 id="为什么要用WSL"><a href="#为什么要用WSL" class="headerlink" title="为什么要用WSL"></a>为什么要用WSL</h2><ul>
<li><p>使用范围广，大家都在用</p>
</li>
<li><p>非常方便，轻量化，节省内存</p>
</li>
</ul>
<h2 id="WSL-使用方式（WIN10）"><a href="#WSL-使用方式（WIN10）" class="headerlink" title="WSL 使用方式（WIN10）"></a>WSL 使用方式（WIN10）</h2><ul>
<li>首先 WIN+X打开 <em>应用和功能</em></li>
</ul>
<p>然后点击程序和功能</p>
<p>   <img data-src="http://m401a.haxlock.top:3003/uploads/d2a6e589-50af-4e59-ab1a-c18179ab875b.jpg"></p>
<ul>
<li><p>然后点击启用或关闭Windows功能</p>
<p><img data-src="http://m401a.haxlock.top:3003/uploads/8aa8fb11-50b9-4668-a8a2-140abed46122.jpg"></p>
</li>
</ul>
<p><strong>找到 <em>适用于Linux的Windows子系统</em> 并打勾</strong></p>
<p>之后可能会重启计算机，此时点击确认重启。</p>
<ul>
<li>重启结束后，进入微软商店，搜索ubuntu</li>
</ul>
<p><img data-src="http://m401a.haxlock.top:3003/uploads/eb3275cc-5e9c-4299-a364-0e5d0ccb49cd.jpg"></p>
<p>众多版本均可选择，看你喜欢就好。</p>
<ul>
<li>等待安装完成，此时在搜索框内搜索ubuntu，点击打开即可进入ubuntu终端界面，此时这个系统并非虚拟化。而是实打实本地直连的操作系统。后续配置也同正常ubuntu一样即可。非常的便捷方便</li>
</ul>
<h2 id="win内ubuntu终端优化"><a href="#win内ubuntu终端优化" class="headerlink" title="win内ubuntu终端优化"></a>win内ubuntu终端优化</h2><p>由于原始的直接安装的ubuntu页面不太好用，页面不美观等问题，这边有一个方法用于美化ubuntu页面。   </p>
<h3 id="在微软商店下载windows-Terminal"><a href="#在微软商店下载windows-Terminal" class="headerlink" title="在微软商店下载windows Terminal"></a>在微软商店下载windows Terminal</h3><p><img data-src="http://m401a.haxlock.top:3003/uploads/122a1654-624a-4f12-a2a7-32487cd19e15.jpg"></p>
<p>下载完成后，打开，可以发现终端上有个小箭头，此时可以切换到ubuntu即可</p>
<p><img data-src="http://m401a.haxlock.top:3003/uploads/ccfd3796-8dee-4783-ae3a-a4f2486a6c59.jpg"></p>
<p>这样就可以愉快的使用ubuntu进行操作了(yeah!)</p>
<p>能看到这的小伙伴我想以及超越了99%的人了，加油吧骚年！</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于docker部署nextcloud和优化的一些经历记录</title>
    <url>/2025/02/20/linux%E5%AD%A6%E4%B9%A0/%E5%85%B3%E4%BA%8Edocker%E9%83%A8%E7%BD%B2nextcloud%E5%92%8C%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E5%8E%86%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>待填坑</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于在使用X window界面时候如何切换到其它tty?</title>
    <url>/2025/02/27/linux%E5%AD%A6%E4%B9%A0/%E5%85%B3%E4%BA%8E%E5%9C%A8%E4%BD%BF%E7%94%A8X%20window%E7%95%8C%E9%9D%A2%E6%97%B6%E5%80%99%E5%A6%82%E4%BD%95%E5%88%87%E6%8D%A2%E5%88%B0%E5%85%B6%E5%AE%83tty?/</url>
    <content><![CDATA[<h1 id="X-window与文字模式的切换"><a href="#X-window与文字模式的切换" class="headerlink" title="X window与文字模式的切换"></a>X window与文字模式的切换</h1><p>大部分人用ubuntu第一次接触到的肯定都是窗口管理员环境</p>
<p>但是没看到纯粹的命令行环境啊</p>
<p><strong>实际上是有的</strong></p>
<p>其实也就是Terminal或者终端模式</p>
<p>切换方式简单粗暴</p>
<h2 id="切换方式"><a href="#切换方式" class="headerlink" title="切换方式"></a>切换方式</h2><p>[Ctrl]+[Alt]+[F1]~[F6]组合按钮</p>
<ul>
<li><p>[Ctrl]+[Alt]+[F1]:图形接口界面</p>
</li>
<li><p>其他2~6是终端界面</p>
</li>
</ul>
<p>如果你在X window环境下，只要按[Ctrl]+[Alt]+[F2]~[F6]，就可以直接切换到中断了，具体自己试试，一试便知[doge]</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于ubuntu创建新用户时候遇到的一些问题</title>
    <url>/2025/02/18/linux%E5%AD%A6%E4%B9%A0/%E5%85%B3%E4%BA%8E%E6%96%B0%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9Bbug/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>我在根据教程来创建linux新用户时候，遇到了不少棘手的问题，这边分享一下我的经历。</p>
<p>主要问题是，<strong>我创建的新用户，进入用户bash后，什么功能都没有</strong></p>
<span id="more"></span>

<p>这让我非常不解，情况大概就是下面这样的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~# login</span><br><span class="line">ubuntu login: <span class="built_in">test</span></span><br><span class="line">Password: $ <span class="built_in">ls</span></span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">haxlock  lost+found  <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>我懵逼了，这什么情况？怎么和我用其他用户不一样？</p>
<p>正常我们使用账户的情况应该是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~# apt update</span><br></pre></td></tr></table></figure>

<p>有路径，有用户名称，有主机名称</p>
<p>并且有很多可以使用的快捷键，例如tab快速补充，上下键历史命令等，但是，这个用户都没有！</p>
<p>对于我一个新手菜鸟来说，着实有些蒙圈</p>
<p>但是我想到一个关键的问题，先前那些说白了用的都是ubuntu基于bash的shell终端操作，然而，有没有可能这个新用户他的bash有问题呢？</p>
<p>我马上排查这个问题，寻找这个用户的shell路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$SHELL</span>  </span><br></pre></td></tr></table></figure>

<p>果然输出如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/sh</span><br></pre></td></tr></table></figure>

<p>我又切换会root用户查询了一下，输出如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash</span><br></pre></td></tr></table></figure>

<p>这和我们的预期不同，按照root用户来说，应该是 <strong>&#x2F;bin&#x2F;bash</strong> 才对，</p>
<p>因此这边我上网查了一下修改shell的命令，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chsh -s /bin/bash</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>chsh</code> 是 Linux 系统中用于更改用户登录 Shell 的命令。通过 <code>chsh</code>，用户可以将自己的默认 Shell 更改为系统中已安装的其他 Shell（如 <code>/bin/bash</code>、<code>/bin/zsh</code> 等）。</p>
</blockquote>
<p>此外，在root用户下，修改别人的shell是这样的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh testuser</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，上述操作结束后，需要用户重新登录进入才能生效</p>
</blockquote>
<p>后面重新登录进入用户后，惊喜地发现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haxlock@ubuntu:~$ <span class="built_in">sudo</span> su - <span class="built_in">test</span></span><br><span class="line">[<span class="built_in">sudo</span>] password <span class="keyword">for</span> haxlock: </span><br><span class="line"><span class="built_in">test</span>@ubuntu:~$ <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">test</span>@ubuntu:~$ <span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure>

<p>已经可以成功显示相关信息，并且shell所有地快捷键等操作均可以进行了。</p>
<p>问题就那么愉快地解决了。</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何卸载/重装ubuntu的桌面界面？</title>
    <url>/2025/02/26/linux%E5%AD%A6%E4%B9%A0/%E5%A6%82%E4%BD%95%E9%87%8D%E8%A3%85ubuntu%E7%9A%84ui%E7%95%8C%E9%9D%A2%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="禁用图形界面"><a href="#禁用图形界面" class="headerlink" title="禁用图形界面"></a>禁用图形界面</h1><p>Ubuntu 使用 <strong>systemd</strong> 管理系统服务，图形界面通常由 <strong>gdm3</strong> 或 <strong>lightdm</strong> 管理。你可以禁用图形界面服务，使系统开机后直接进入命令行。</p>
<h2 id="禁用gdm3-假设你是GNOME桌面"><a href="#禁用gdm3-假设你是GNOME桌面" class="headerlink" title="禁用gdm3(假设你是GNOME桌面)"></a>禁用<code>gdm3</code>(假设你是GNOME桌面)</h2><span id="more"></span>
<ul>
<li>停止当前运行的图形界面服务：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop gdm3</span><br></pre></td></tr></table></figure>

<ul>
<li>禁用gdm3服务，使他开机不启动：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> gdm3</span><br></pre></td></tr></table></figure>

<p><strong>禁用<code>lightdm</code>(假设你使用的是LightDM)</strong></p>
<ul>
<li>停止当前运行图形界面服务：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop lightdm</span><br></pre></td></tr></table></figure>

<ul>
<li>禁用服务，开机不启动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> lightdm</span><br></pre></td></tr></table></figure>

<h2 id="设置默认运行级别为多用户模式（命令行）"><a href="#设置默认运行级别为多用户模式（命令行）" class="headerlink" title="设置默认运行级别为多用户模式（命令行）"></a>设置默认运行级别为多用户模式（命令行）</h2><p>Ubuntu 使用 <code>systemd</code> 的目标（target）来管理运行级别。默认图形界面运行在 <code>graphical.target</code>，而命令行模式运行在 <code>multi-user.target</code>。</p>
<ul>
<li>设置默认目标为 <code>multi-user.target</code>：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl set-default multi-user.target</span><br></pre></td></tr></table></figure>

<ul>
<li>重启系统</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>

<h2 id="彻底卸载桌面环境并释放空间"><a href="#彻底卸载桌面环境并释放空间" class="headerlink" title="彻底卸载桌面环境并释放空间"></a>彻底卸载桌面环境并释放空间</h2><ul>
<li>卸载 GNOME 桌面</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt remove --purge ubuntu-desktop gnome-shell gnome gdm3</span><br></pre></td></tr></table></figure>

<ul>
<li>卸载其他桌面环境（如果你安装了其他桌面）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt remove --purge kubuntu-desktop  <span class="comment"># 卸载 KDE</span></span><br><span class="line"><span class="built_in">sudo</span> apt remove --purge xubuntu-desktop  <span class="comment"># 卸载 XFCE</span></span><br></pre></td></tr></table></figure>

<ul>
<li>运行autoremove清除依赖</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt autoremove</span><br></pre></td></tr></table></figure>

<p>重启进入系统后，如果看到是终端形式，那应该就是卸载成功了。</p>
<p>或者通过以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl get-default</span><br></pre></td></tr></table></figure>

<p>如果输出为：<code>multi-user,target</code> 则配置成功</p>
<h2 id="恢复桌面环境"><a href="#恢复桌面环境" class="headerlink" title="恢复桌面环境"></a>恢复桌面环境</h2><ul>
<li>重装桌面环境</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install ubuntu-desktop</span><br></pre></td></tr></table></figure>

<ul>
<li>设置默认目标为 <code>graphical.target</code>：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl set-default graphical.target</span><br></pre></td></tr></table></figure>

<ul>
<li>重启系统：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器</category>
        <category>运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何从0开始搭建一个mc服务器？</title>
    <url>/2025/01/19/minecraft/2025_01_21/</url>
    <content><![CDATA[<h1 id="关于如何将家中闲置电脑变为mc服务器"><a href="#关于如何将家中闲置电脑变为mc服务器" class="headerlink" title="关于如何将家中闲置电脑变为mc服务器"></a>关于如何将家中闲置电脑变为mc服务器</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信对于很多minecraft爱好者来说，mc服务器对他们来说并不陌生，喜欢折腾电脑和玩游戏的我，对这个同样也不例外，因此，我将开荒一个关于mc服务端的相关教程，本人也是刚玩mc没多久，希望也能边学边做此文档。</p>
<span id="more"></span>

<h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><p>相信很多人像我一样，对于开服一开始十分迷茫该做什么。</p>
<p>这边简洁列举几个流程</p>
<ul>
<li><p>拥有一个具有<mark><a href="###%E5%85%AC%E7%BD%91ip">公网ip</a></mark>的服务器并搭载可以运行服务端的操作系统(linux, ubuntu, windows等都可)。</p>
</li>
<li><p>在服务器上装上java虚拟机环境</p>
</li>
<li><p>从 <a href="https://www.minecraft.net/zh-hans/download/server">minecraft官网</a> 下载minecraft服务端，您应该会获得一个server.jar 的java脚本文件</p>
</li>
<li><p>接着进到您server.jar的目录下(例如&#x2F;home&#x2F;user&#x2F;server.jar) 接着运行以下命令</p>
</li>
<li><pre><code class="java">java -Xmx1024M -Xms1024M -jar server.jar nogui
</code></pre>
</li>
</ul>
<p>那么此时就可以愉快的通过ip地址和你的小伙伴畅玩mc了(<del>bushi</del>)</p>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>ok，概括就说到这，估计很多盆友们看到这边感觉一头雾水，对于一个新手小白，或者完全不懂计算机知识的盆友们来说，还是太难了，因此这边会细嗦 <strong>具体步骤</strong>。</p>
<h3 id="公网ip"><a href="#公网ip" class="headerlink" title="公网ip"></a>公网ip</h3><p>首先，你可以简单想一下，公网IP，为何叫公网？因为只要你在国内，没有防火墙拦着你，类似于**<a href="">www.baidu.com</a>** 这种的域名，每个人都可以用自己的终端设备，例如手机，电脑平板等访问到，这样的可以所有人在那边都可以访问到的ip地址，就叫公网Ip。同理，你的服务器若想所有人都可以进入，所有人都可以访问到，那我们也需要一个公网IP来供你的小伙伴来进入。这就是我们需要公网ip的原因。</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>minecraft</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>复习关于javascript的二元表达式的写法</title>
    <url>/2025/01/24/%E5%89%8D%E7%AB%AF/2025_01_24/</url>
    <content><![CDATA[<h1 id="复习关于javascript的二元表达式的写法"><a href="#复习关于javascript的二元表达式的写法" class="headerlink" title="复习关于javascript的二元表达式的写法"></a>复习关于javascript的二元表达式的写法</h1><span id="more"></span>

<h2 id="条件（三元）运算符"><a href="#条件（三元）运算符" class="headerlink" title="条件（三元）运算符"></a>条件（三元）运算符</h2><p>在JavaScript中，三元表达式是一种简洁的条件语句写法，它由三部分组成：一个条件、一个结果表达式（当条件为真时执行），以及另一个结果表达式（当条件为假时执行）。</p>
<p><strong>具体来说</strong> <strong>条件（三元）运算符</strong>是 JavaScript 唯一使用三个操作数的运算符：一个条件后跟一个问号（<code>?</code>），如果条件是真值，则执行冒号（<code>:</code>）前的表达式；若条件为假值，则执行最后的表达式。该运算符经常当作 <code>if...else</code> 语句的简捷形式来使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getphoneNumber</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num ? <span class="string">&#x27;111&#x27;</span> : <span class="string">&#x27;222&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getphoneNumber</span>(<span class="literal">true</span>))</span><br><span class="line"><span class="comment">//若参数为真，那么返回第一个值&#x27;111&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getphoneNumber</span>(<span class="literal">false</span>))</span><br><span class="line"><span class="comment">//若参数为假，那么返回第二个值&#x27;222&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getphoneNumber</span>(<span class="literal">null</span>))</span><br><span class="line"><span class="comment">//若参数为空，那么返回第二个值&#x27;222&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="目前遇到的用法总结"><a href="#目前遇到的用法总结" class="headerlink" title="目前遇到的用法总结"></a>目前遇到的用法总结</h2><ol>
<li><pre><code class="javascript">const Parameter = this.data.archiveType === &#39;conditon&#39; ? 0 : 1;
</code></pre>
</li>
</ol>
<p><strong>解释 :</strong>  </p>
<ul>
<li><p><strong>首先</strong>：</p>
<ul>
<li>这种结构式需要从后往前看才行，那么我们就先分析<code>this.data.archiveType === &#39;conditon&#39; ? 0 : 1;</code> 这一段。我们可以在 <code>===</code> 符号可以检查archiveType这个参数是否等同于字符串’conditon’ 。</li>
</ul>
</li>
<li><p><strong>如果条件为真时候的结果：</strong></p>
<ul>
<li>如果条件为真（即 <code>archiveType</code> 等于 <code>&#39;condition&#39;</code>），则将 <code>0</code> 赋值给 <code>Parameter</code>。</li>
</ul>
</li>
<li><p><strong>如果条件为假时候的结果：</strong></p>
<ul>
<li>如果条件为假（即 <code>archiveType</code> 不等于 <code>&#39;condition&#39;</code>），则将 <code>1</code> 赋值给 <code>Parameter</code>。</li>
</ul>
</li>
</ul>
<p>    </p>
<p><strong>简单解释：</strong></p>
<ul>
<li>如果 <code>archiveType</code> 是 <code>&#39;condition&#39;</code>，那么 <code>imageList</code> 就是 <code>0</code>。</li>
<li>否则，<code>imageList</code> 就是 <code>1</code>。</li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
        <category>前端</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>新版微信小程序该如何实现手机号快捷登录功能？</title>
    <url>/2025/01/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/2025_01_19/</url>
    <content><![CDATA[<h2 id="前提概要"><a href="#前提概要" class="headerlink" title="前提概要"></a>前提概要</h2><p>更新原因： 从基础库2.21.2开始，对步骤2中换取手机号信息的方式进行了安全升级，上述为新方式使用指南。（<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/deprecatedGetPhoneNumber.html">旧方式</a>目前可以继续使用，但<strong>建议开发者使用新方式，以增强小程序安全性</strong>）另外，新方式<strong>不再</strong>需要提前调用<strong>wx.login</strong>进行登录。</p>
<span id="more"></span>

<p>以下放下微信官方的链接</p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/getPhoneNumber.html">手机号快速验证组件 | 微信开放文档</a></p>
<p>前端工具：小程序原生开发</p>
<p>后端工具：基于nodejs的express框架</p>
<p>因此我们需要修改我们新的微信小程序的登录逻辑，以实现用户便捷登录。</p>
<p>从官方文档更新的说明来看，登录逻辑也许并不需要在写wx.login了（吗）？</p>
<p>如果真不需要写了，不仅仅便捷了用户，同时也便捷了开发者写接口和前端的工作量。</p>
<p>这边先放新方法的代码演示</p>
<h2 id="手机号快捷登录代码示例"><a href="#手机号快捷登录代码示例" class="headerlink" title="手机号快捷登录代码示例"></a>手机号快捷登录代码示例</h2><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><h5 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a><strong>wxml</strong></h5><p>wxml需要写入button组件，并写入**open-type&#x3D;”getPhoneNumber”，bindgetphonenumber&#x3D;”getPhoneNumber”**这两个语句。</p>
<p>如果您是<strong>uniapp</strong>开发，那么bindgetphonenumber需要替换为@getphonenumber，其他不变</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;login-btn&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">open-type</span>=<span class="string">&quot;getPhoneNumber&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">bindgetphonenumber</span>=<span class="string">&quot;getPhoneNumber&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span>请先登录再使用</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>wxss样式，一般我都觉得随心所欲即可（其实是我实在懒得贴那么多代码啊哈哈）</p>
<h5 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a><strong>javascript</strong></h5><p>根据微信开发者文档中官方示例代码我们可知:getPhoneNumber这个函数有一个e(函数的事件参数),其中这个e包括三个信息，分别为动态令牌，回调信息以及错误码，其中回调信息无论成功失败都会返回信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="title function_">getPhoneNumber</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">detail</span>.<span class="property">code</span>)  <span class="comment">// 动态令牌</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">detail</span>.<span class="property">errMsg</span>) <span class="comment">// 回调信息（成功失败都会返回）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">detail</span>.<span class="property">errno</span>)  <span class="comment">// 错误码（失败时返回）</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>例如，也许你的js文件用的官方的信息，也许你的控制台会受到以下的返回信息：</p>
<p>getPhoneNumber: ok</p>
<p>code: 动态令牌码</p>
<p>errono: undifined</p>
<p>这样你就初步实现了这个微信组件的调用数据。</p>
<p>接下来是再项目中实用的这个函数组件</p>
<p>根据官方文档，你需要先获取access_token,然后在根据access_token和前端发送的code数据来获取到用户的手机号信息。</p>
<p>以下为我的示例代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getPhoneNumber</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> code = e.<span class="property">detail</span>.<span class="property">code</span>;</span><br><span class="line">    <span class="keyword">const</span> errMsg = e.<span class="property">detail</span>.<span class="property">errMsg</span>;</span><br><span class="line">    <span class="comment">//首先确认从微信官方获取的信息是没问题的</span></span><br><span class="line">    <span class="keyword">if</span> (errMsg === <span class="string">&#x27;getPhoneNumber:ok&#x27;</span>) &#123;</span><br><span class="line">      wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">       <span class="comment">//这里写你的后端接口的地址</span></span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:3000/api/getPhoneNumber&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">       <span class="comment">//发送给后端的数据</span></span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">          code</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//登录成功case</span></span><br><span class="line">        <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回数据:&#x27;</span>, res.<span class="property">data</span>);</span><br><span class="line">            <span class="comment">//登录成功弹窗函数</span></span><br><span class="line">            wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;登录成功&#x27;</span>,</span><br><span class="line">              <span class="attr">icon</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;返回数据格式错误:&#x27;</span>, res.<span class="property">data</span>);</span><br><span class="line">            <span class="comment">//获取手机号失败</span></span><br><span class="line">            wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;获取手机号失败&#x27;</span>,</span><br><span class="line">              <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//登录失败case</span></span><br><span class="line">        <span class="comment">//接口请求失败</span></span><br><span class="line">        <span class="attr">fail</span>: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求失败:&#x27;</span>, error);</span><br><span class="line">          wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;登录失败&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//用户取消授权</span></span><br><span class="line">      wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;您取消了授权&#x27;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>如果你能理解我上面写的代码，那么基本就可以在实际项目中使用这个组件。</p>
<p>下面我简单提供一下我的后端代码，本人小白，写的后端较为啰嗦，还请各位大神见谅，主要目的为了配合前面前端。</p>
<p>get_AccessToken(做router_function)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 微信小程序配置</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">APPID</span> = <span class="string">&#x27;你的微信后台appid&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET</span> = <span class="string">&#x27;你的微信后台secret&#x27;</span>;</span><br><span class="line"><span class="comment">// 这个不用</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GRANT_TYPE</span> = <span class="string">&#x27;client_credential&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取access_token</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAccessToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.weixin.qq.com/cgi-bin/token&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">                <span class="attr">appid</span>: <span class="variable constant_">APPID</span>,</span><br><span class="line">                <span class="attr">secret</span>: <span class="variable constant_">SECRET</span>,</span><br><span class="line">                <span class="attr">grant_type</span>: <span class="variable constant_">GRANT_TYPE</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;获取access_token失败:&#x27;</span>, error);</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出模块</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    getAccessToken</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>getPhoneNumber</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; getAccessToken &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../routes_function/getAccessToken&#x27;</span>);</span><br><span class="line"><span class="comment">//我这边引入了一个中间件用于获取token，作为用户的登录令牌，代码会放到下面</span></span><br><span class="line"><span class="keyword">const</span> &#123; generateToken &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../middleware/auth&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取手机号</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/getPhoneNumber&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; code &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先获取access_token</span></span><br><span class="line">        <span class="keyword">const</span> tokenData = <span class="keyword">await</span> <span class="title function_">getAccessToken</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确认access_token</span></span><br><span class="line">        <span class="keyword">if</span> (!tokenData) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">                <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;获取access_token失败&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="variable constant_">ACCESS_TOKEN</span> = tokenData.<span class="property">access_token</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确认请求参数code</span></span><br><span class="line">        <span class="keyword">if</span> (!req.<span class="property">body</span>.<span class="property">code</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">                <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;缺少code参数&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;code请求:&#x27;</span>, &#123; code &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">`https://api.weixin.qq.com/wxa/business/getuserphonenumber?access_token=<span class="subst">$&#123;ACCESS_TOKEN&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">post</span>(url, &#123;</span><br><span class="line">            code</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取手机号成功:&#x27;</span>, response.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在获取到手机号后，生成token</span></span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">phone_info</span> &amp;&amp; response.<span class="property">data</span>.<span class="property">phone_info</span>.<span class="property">phoneNumber</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> phoneNumber = response.<span class="property">data</span>.<span class="property">phone_info</span>.<span class="property">phoneNumber</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成token</span></span><br><span class="line">            <span class="keyword">const</span> token = <span class="title function_">generateToken</span>(&#123;</span><br><span class="line">                phoneNumber,</span><br><span class="line">                <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回手机号和token</span></span><br><span class="line">            res.<span class="title function_">json</span>(&#123;</span><br><span class="line">                <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;获取成功&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">phone_info</span>: response.<span class="property">data</span>.<span class="property">phone_info</span>,</span><br><span class="line">                    token</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">                <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;获取手机号失败&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;获取手机号错误:&#x27;</span>, error);</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;服务器错误&#x27;</span>,</span><br><span class="line">            <span class="attr">error</span>: error.<span class="property">message</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<p>中间件利用jwt组件来生成token</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="comment">//配置文件在下</span></span><br><span class="line"><span class="keyword">const</span> &#123; secret &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../config/jwt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> auth = &#123;</span><br><span class="line">  <span class="comment">// 生成token</span></span><br><span class="line">  <span class="title function_">generateToken</span>(<span class="params">payload</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> jwt.<span class="title function_">sign</span>(payload, secret, &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;2d&#x27;</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 验证token</span></span><br><span class="line">  <span class="title function_">verifyToken</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> token = req.<span class="property">headers</span>.<span class="property">authorization</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;未提供token&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> decoded = jwt.<span class="title function_">verify</span>(token.<span class="title function_">replace</span>(<span class="string">&#x27;Bearer &#x27;</span>, <span class="string">&#x27;&#x27;</span>), secret);</span><br><span class="line">      req.<span class="property">user</span> = decoded;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;token无效或已过期&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = auth; </span><br></pre></td></tr></table></figure>

<p>jwt的配置文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;随便输&#x27;</span>, <span class="comment">// JWT密钥</span></span><br><span class="line">  <span class="attr">expiresIn</span>: <span class="string">&#x27;1d&#x27;</span> <span class="comment">// token过期时间</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>

<p>那么以上，你就可以实现通过手机号，使手机快捷登录的组件功能了，另外微信官方接口的调用都需要在后端中利用axiox或者其他的组件进行请求，再把数据发给前端，不可在前端直接调用。</p>
<p>如果您还有任何疑惑，可以在评论区留言，或者联系我的email。</p>
]]></content>
      <categories>
        <category>微信小程序</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>网络技术--基础环节</title>
    <url>/2025/01/26/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/1.%20%E7%BD%91%E7%BB%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E4%B8%8E%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h1 id="1-基础环节"><a href="#1-基础环节" class="headerlink" title="1. 基础环节"></a>1. 基础环节</h1><h2 id="1-1-计算机网络的基本结构"><a href="#1-1-计算机网络的基本结构" class="headerlink" title="1.1 计算机网络的基本结构"></a>1.1 计算机网络的基本结构</h2><p>典型的计算机网络从<strong>逻辑功能</strong>上分为<strong>资源子网</strong>和<strong>通信子网</strong>两部分。</p>
<span id="more"></span>

<p>资源子网：</p>
<ul>
<li><p>负责全网的数据处理业务，负责向网络用户提供各种网络资源和网络服务。</p>
</li>
<li><p>由主计算机系统，终端和联网设备，软件与信息资源等组成。</p>
<ul>
<li><p>主计算机系统（主机&#x2F;host）主要为本地用户与远程用户相互进行资源访问与共享提供服务</p>
</li>
<li><p>早期的主机主要使用大型机、中型机、小型机，而目前主要是个人计算机</p>
</li>
<li><p>主机包括用户终端设备和服务器</p>
</li>
<li><p>普通用户终端通过主机连入网络，终端是用户访问网络的界面。</p>
</li>
</ul>
</li>
</ul>
<p>通信子网：</p>
<ul>
<li><p>负责进行网络数据传输、转发等通信处理任务，由<strong>通信控制处理机</strong>、通信线路与与其他通信设备组成。</p>
<ul>
<li><p>通信控制处理机：也被称为网络节点</p>
</li>
<li><p>他是与资源子网的主机、终端连接的接口，把主机和终端接入网络</p>
</li>
<li><p>他也是存储转发分组的节点，负责分组的接收、校验、存储、转发没实现把源主机报文准确发送到目的主机的功能。</p>
</li>
<li><p>他是路由器的雏形。</p>
</li>
</ul>
</li>
<li><p>通信线路</p>
<ul>
<li>为通信控制处理机之间、通信控制处理机与主机之间提供通信信道，如双绞线，同轴电缆，光纤等有线介质。微波、卫星等无线介质</li>
</ul>
</li>
</ul>
<h2 id="1-2-计算机网络分类和互联方式"><a href="#1-2-计算机网络分类和互联方式" class="headerlink" title="1.2 计算机网络分类和互联方式"></a>1.2 计算机网络分类和互联方式</h2><h3 id="1-2-1-计算机网络分类"><a href="#1-2-1-计算机网络分类" class="headerlink" title="1.2.1 计算机网络分类"></a>1.2.1 计算机网络分类</h3><p>分三类：局域网、城域网、广域网。</p>
<h4 id="局域网（LAN）"><a href="#局域网（LAN）" class="headerlink" title="局域网（LAN）"></a>局域网（LAN）</h4><p>LAN(Local Area Network)</p>
]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>网络技术</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2025/01/03/%E9%9A%8F%E8%AE%B0/my_first_blog/</url>
    <content><![CDATA[<p><strong>THIS IS MY FIRST BLOG IN MY LIFE</strong></p>
<p><strong>这是我人生中的第一篇博客</strong></p>
<span id="more"></span>

<h1 id="本博客诞生的history"><a href="#本博客诞生的history" class="headerlink" title="本博客诞生的history"></a>本博客诞生的history</h1><p>经过大三上学期的期末周的摧残，这篇博客折腾了我整整一个月（谁家好人大三还能有那么多课啊），所以我想说的，计算机这专业真是给狗狗都不学</p>
<h2 id="吐槽一下netlify-cms"><a href="#吐槽一下netlify-cms" class="headerlink" title="吐槽一下netlify cms"></a>吐槽一下netlify cms</h2><p>从一开始就踩坑去学习netlify＋vercel＋hexo部署个人博客的教程兜兜转转到现在，netlify cms的后台写博客的markdown真的很狗屎，主要狗屎在他那个markdown输入中文TM地根本输入不进去！！</p>
<p><strong>输入不进去！！！</strong></p>
<p>谁懂啊，那种感觉，折腾了半天的东西最后难用的要死，真的有种想死的心都有了（真无语）</p>
<p>说实话，我也就是个做博客的小白，我也不知道是不是我自己的技术不行，但是我排查了很久的问题，真的 $输入不进去！$ </p>
<p><strong>真的，我就想着这个博客写好之后我一定要写个这个文章来发泄一下，太折腾人了（捂脸）</strong></p>
<h2 id="next主题的主观评价"><a href="#next主题的主观评价" class="headerlink" title="next主题的主观评价"></a>next主题的主观评价</h2><p>首先，真的非常感谢 <strong><a href="https://hexo.io/zh-cn/">HEXO</a></strong> 和 <strong><a href="https://theme-next.js.org/">nexT</a></strong> 博客框架和主题，让从未制作过博客的小白也可以轻松做出非常精美的博客界面。</p>
<p>其次，真的很感谢我自己，为了博客的$魔改美化$倾尽心血。。。</p>
<p>我自己是一个用html,css,js,vue3做过全站开发的一个苦逼大学生。因为看到很多喜欢写代码的小伙伴们都很喜欢做技术交流，分享技术，因此我想，我也想做一个博客帖子，不仅仅来记录我自己的学习日志，整理我自己需要的工具，并且还可以将我自己的技术分享给他人，也算是为别人，为自己，为社会做贡献了吧（怎么突然升华起来了哈哈）</p>
<p>还有就是，next主题官方给主题的扩展性和第三方插件做的真的真的特别棒，就是页面里面开f12找元素的我实在是太狼狈了哈哈。</p>
<p>在此再次感谢 <strong><a href="https://hexo.io/zh-cn/">HEXO</a></strong> 和 <strong><a href="https://theme-next.js.org/">nexT</a></strong> 官方为本博客提供的支持</p>
<h2 id="接下来对本博客的维护更新打算"><a href="#接下来对本博客的维护更新打算" class="headerlink" title="接下来对本博客的维护更新打算"></a>接下来对本博客的维护更新打算</h2><p>从2025年开始，我将正式开始对于本站的内容更新，以及其他模块的上线。</p>
<p>现在主要着手学习uniapp以及相关的技术框架。</p>
<p><strong>2025年的我，加油吧！</strong></p>
]]></content>
      <categories>
        <category>随记</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
</search>
