{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1},{"_id":"source/resources/img/avatar.gif","path":"resources/img/avatar.gif","modified":0,"renderable":0},{"_id":"source/resources/img/header-pink.webp","path":"resources/img/header-pink.webp","modified":0,"renderable":0}],"Cache":[{"_id":"source/_data/footer.njk","hash":"d519cf232cbe9a0812d00a75f313821c3306d7e3","modified":1740308874251},{"_id":"source/_data/styles.styl","hash":"c24ad14796a5bfcd1a1d5dc961773260e940fa32","modified":1740308874252},{"_id":"source/_data/variables.styl","hash":"0629aacf7ed089d6df1a18dea90561ba68d9931d","modified":1740308874252},{"_id":"source/_tags/index.md","hash":"8170777dfd8371678d77ac917a475994f7761b17","modified":1740308874255},{"_id":"source/_posts/linux学习/linux的一些基础命令-2.md","hash":"2d5af3a0e34c5b561425718557ac948a64c60bf5","modified":1740308874253},{"_id":"source/_posts/linux学习/linux的一些基础命令.md","hash":"20856acf8c840d9ea9692244097d97c7d9c6eb08","modified":1740308874254},{"_id":"source/_posts/linux学习/windows配置WSL(ubuntu)环境.md","hash":"0d938dbaa57ac40ee7e138aaf8501182bc51dcec","modified":1740308874254},{"_id":"source/_posts/linux学习/关于docker部署nextcloud和优化的一些经历记录.md","hash":"8e455e7a8c2b8ad04f997c613282195a4ac92fd2","modified":1740308874254},{"_id":"source/_posts/linux学习/关于在使用X window界面时候如何切换到其它tty?.md","hash":"5a4249ed66fa4b1f1a6fcfaf64b63ca251a45ab3","modified":1740641179727},{"_id":"source/_posts/linux学习/关于新创建用户遇到的一些bug.md","hash":"494362e5dfeb6b37bae9fe03084f052f0a911b83","modified":1740319078824},{"_id":"source/_posts/linux学习/如何重装ubuntu的ui界面？.md","hash":"37e5d5f9f897524aff5d9c413201cdce4dc769c9","modified":1740641149952},{"_id":"source/_posts/minecraft/2025_01_21.md","hash":"b90b9b691ec52773720145187004c88ee25c86aa","modified":1740308874252},{"_id":"source/_posts/前端/2025_01_24.md","hash":"cb7f63801677595775a9e338a9a05e1888fb50a7","modified":1740308874252},{"_id":"source/_posts/微信小程序/2025_01_19.md","hash":"3334a5d7c58cf930185558998094dc8f8d1fe0b7","modified":1740308874252},{"_id":"source/_posts/网络技术/1. 网络系统结构与设计的基本原则.md","hash":"fc10acdd939929d2275b1f4ce90b0960eb8eaf63","modified":1740308874255},{"_id":"source/_posts/随记/my_first_blog.md","hash":"9d223ec9961c50202889265b83fe3da65d96617a","modified":1740308874254},{"_id":"source/resources/img/header-pink.webp","hash":"eb5d5ef287c34cda86e46004a6ef62ce4ed0775a","modified":1740308874270},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b47fb36915962309553ff7fb1782341585ed2b76","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"be60b8dacd4dc9d2b1b68982dc4f0c5325b9a315","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"a3dd3edea9c01b66b28a8367185269b9dcc3bdee","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"21acb11e397526132605eef23bde7b307aa1eab5","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"86b110899eaae51b85c4c95eadfe7a912e58a813","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-copyright.styl","hash":"56805b77fe236fac19e19c716a49363bcf986311","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"741566d6ac5f852b5c8dee6a8996b65e48e7c97f","modified":1740641031390},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"9b0217e1caecd91e05572c7e8e52d32016ca312f","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"49329a7144f3413d1c832e52a1f4954171ef11e1","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"8213015d9cae45d2c9945f8aba9d8db39c734efc","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"c3be8b0738f693e750486bb71769c3dbbec174cc","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1740641031391},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1740641031389},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1740641031378},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1740641031378},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1740641031379},{"_id":"themes/next/.stylelintrc","hash":"9346cca6a24256a79f433670da634e8329f9a2a9","modified":1740641031379},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1740641031379},{"_id":"themes/next/README.md","hash":"5dd295594b92dbe07b0376b505f29fb3884e77f9","modified":1740641031379},{"_id":"themes/next/_config.yml","hash":"dbbd054721541f4d1f4fed4bc983bc19ff1f259a","modified":1740641031379},{"_id":"themes/next/_vendors.yml","hash":"312fa7c1ae472e18d88f6d01c54dc6f32f66255c","modified":1740641031380},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1740641031380},{"_id":"themes/next/eslint.config.js","hash":"14b5636ce297048ea6835f7db4b1e4cf625a2c79","modified":1740641031381},{"_id":"themes/next/package.json","hash":"26e77380c9dd66388b9fd34eb9aac3e0ad510731","modified":1740641031386},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1740641031386},{"_id":"themes/next/.githooks/install.js","hash":"0977cb57c8b91ea166b5bbc481e4ddeaf77e9b18","modified":1740641031378},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1740641031378},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"e78ec4eb6ce49a44ec321c49424ee0a0c1846537","modified":1740641031378},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1740641031378},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"2296426023773991b0c48c7fffeb790baca59b19","modified":1740641031378},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1740641031379},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1740641031379},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"22d7dd8661cb2f22ff271ee96e444457814c66fd","modified":1740641031379},{"_id":"themes/next/.github/labeler.yml","hash":"b7f67daa031c535940be82ea96f0fb9db59e1022","modified":1740641031379},{"_id":"themes/next/.github/release.yml","hash":"112310b81f959747f8eaafc2ca2150e1dcf916d8","modified":1740641031379},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1740641031380},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1740641031380},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1740641031380},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1740641031381},{"_id":"themes/next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1740641031381},{"_id":"themes/next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1740641031381},{"_id":"themes/next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1740641031381},{"_id":"themes/next/languages/default.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1740641031381},{"_id":"themes/next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1740641031381},{"_id":"themes/next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1740641031381},{"_id":"themes/next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1740641031381},{"_id":"themes/next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1740641031381},{"_id":"themes/next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1740641031381},{"_id":"themes/next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1740641031381},{"_id":"themes/next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1740641031381},{"_id":"themes/next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1740641031381},{"_id":"themes/next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1740641031381},{"_id":"themes/next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1740641031381},{"_id":"themes/next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1740641031382},{"_id":"themes/next/languages/pt.yml","hash":"b62faaa767a45a613dd042b5f1903675eb5a8cf9","modified":1740641031382},{"_id":"themes/next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1740641031382},{"_id":"themes/next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1740641031382},{"_id":"themes/next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1740641031382},{"_id":"themes/next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1740641031382},{"_id":"themes/next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1740641031382},{"_id":"themes/next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1740641031382},{"_id":"themes/next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1740641031382},{"_id":"themes/next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1740641031382},{"_id":"themes/next/languages/zh-HK.yml","hash":"8eb6a9f231ce1bfa54cc54418ccf14f01dcc9a31","modified":1740641031382},{"_id":"themes/next/languages/zh-TW.yml","hash":"5c0f00cdac3f4727b880dd223f622a535736fa8e","modified":1740641031382},{"_id":"themes/next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1740641031382},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1740641031386},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1740641031386},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1740641031386},{"_id":"themes/next/layout/page.njk","hash":"af6d7570621be760536c216a56d74e40a1cceae2","modified":1740641031386},{"_id":"themes/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1740641031386},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1740641031386},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1740641031396},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"3f19cbf0c2b2fee6bf3788870b842c9ccc1425ca","modified":1740641031378},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1740641031378},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"fbc3062cd4591c8329fab9db72803746f0d11920","modified":1740641031378},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.yml","hash":"10eca518b91a19984f6a5a912d41222042f61d63","modified":1740641031378},{"_id":"themes/next/.github/workflows/codeql.yml","hash":"70a8975c47f4334ebcdd4e543b940346940054d6","modified":1740641031379},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"44eb8b9706b31a4917cacddde2b3aca4ff82955b","modified":1740641031379},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"48e6e1e1406705379112766f4fd8388e1c53b281","modified":1740641031379},{"_id":"themes/next/.github/workflows/linter.yml","hash":"1d3d8fe53e9350e35d8349a19f65664789665e54","modified":1740641031379},{"_id":"themes/next/.github/workflows/lock.yml","hash":"275650a678684523f37187d0532f96aa0f49ce00","modified":1740641031379},{"_id":"themes/next/.github/workflows/tester.yml","hash":"9a8c366c8a0bf0e0b92035fedd93e8979adaa560","modified":1740641031379},{"_id":"themes/next/docs/ru/README.md","hash":"285d5c4dffb97da659851fb6e53379a614619fd9","modified":1740641031380},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1740641031380},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1740641031380},{"_id":"themes/next/docs/zh-CN/README.md","hash":"21567f1810f861b0a33db6514a4fcf18fb98467d","modified":1740641031380},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"313637fe3569f98fd926e8cd0fcc75d098eb6e6e","modified":1740641031382},{"_id":"themes/next/layout/_macro/post.njk","hash":"952449064fcb6a5cefc281b585f9149809f857f1","modified":1740641031383},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1740641031383},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1740641031383},{"_id":"themes/next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1740641031383},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1740641031383},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1740641031384},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"d83fb59f02c5e6630a7770401a05c02f6f07358b","modified":1740641031384},{"_id":"themes/next/layout/_scripts/index.njk","hash":"51704a2eadb0d363762ebf2e44994696e0843e40","modified":1740641031384},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1740641031384},{"_id":"themes/next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1740641031384},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1740641031385},{"_id":"themes/next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1740641031385},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1740641031385},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1740641031385},{"_id":"themes/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1740641031386},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1740641031387},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1740641031387},{"_id":"themes/next/scripts/filters/minify.js","hash":"2063aaa1db448ebcf7b0fdbbc54d3991a368bbd3","modified":1740641031387},{"_id":"themes/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1740641031387},{"_id":"themes/next/scripts/helpers/engine.js","hash":"049b1a0b66563e39f68710bb576a8c7342ae749c","modified":1740641031387},{"_id":"themes/next/scripts/helpers/font.js","hash":"f2d45eb3f03662033608075e3fa895498d08712d","modified":1740641031387},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1740641031387},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"25bb3ec3c7c456aa1d1650eb139605b7df7394eb","modified":1740641031387},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1740641031387},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1740641031388},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1740641031388},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1740641031388},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1740641031388},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1740641031388},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"f57f7e09eb6220f681fa8385082b0960502ce5c4","modified":1740641031388},{"_id":"themes/next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1740641031388},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1740641031388},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1740641031388},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"7d7bbc4a9970bd4c5449bc71b94364a8ec61e5d2","modified":1740641031388},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1740641031388},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1740641031388},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1740641031388},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1740641031388},{"_id":"themes/next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1740641031388},{"_id":"themes/next/source/css/_colors.styl","hash":"ebfe0954e3931431f46f913abe08d0212e06e7c2","modified":1740641031388},{"_id":"themes/next/source/css/_mixins.styl","hash":"e21309d4165ebb6645084eed8dd749846ae981f1","modified":1740641031391},{"_id":"themes/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1740641031393},{"_id":"themes/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1740641031393},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1740641031393},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1740641031393},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1740641031393},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1740641031393},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1740641031393},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1740641031393},{"_id":"themes/next/source/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1740641031393},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1740641031393},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1740641031393},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1740641031394},{"_id":"themes/next/source/js/motion.js","hash":"6f751f5c9499a39d7c5e1d323db3260342dd9431","modified":1740641031394},{"_id":"themes/next/source/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1740641031394},{"_id":"themes/next/source/js/pjax.js","hash":"0996078604f356a4f6692b9b0838038b3b10aa8a","modified":1740641031394},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1740641031394},{"_id":"themes/next/source/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1740641031394},{"_id":"themes/next/source/js/utils.js","hash":"d7954a623be2ee9fe3eadc785b17c17afac6c34d","modified":1740641031396},{"_id":"themes/next/test/helpers/font.js","hash":"30b065a4b1ddd07f9bd7c21d3276e2d788ecc520","modified":1740641031396},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1740641031396},{"_id":"themes/next/test/helpers/next-url.js","hash":"90092dc7e78100bc1ebd1f8ffe4d1543f48e76a8","modified":1740641031396},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1740641031396},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1740641031396},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1740641031396},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1740641031396},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1740641031396},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1740641031396},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1740641031396},{"_id":"themes/next/test/tags/mermaid.js","hash":"ea8e28bb5219417bddb97c5685a7f705ee2c8a80","modified":1740641031396},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1740641031396},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1740641031396},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1740641031396},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1740641031396},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1740641031396},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"93c1d103d9d16581c944c51f3d0638f57c80ee41","modified":1740641031383},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1740641031383},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1740641031383},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1740641031383},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1740641031383},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1740641031383},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1740641031383},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1740641031383},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1740641031383},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1740641031383},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1740641031383},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1740641031383},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1740641031384},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1740641031384},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1740641031384},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1740641031384},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1740641031384},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1740641031384},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"6ad43135bd3aecf933ffdd750763e27ade36f97c","modified":1740641031384},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1740641031384},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1740641031384},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1740641031384},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1740641031384},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1740641031384},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1740641031384},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1740641031384},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"1efeeda00db08a3c033798228dd0092ee532cc36","modified":1740641031385},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1740641031385},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1740641031385},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1740641031385},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1740641031385},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1740641031385},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1740641031385},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1740641031385},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1740641031385},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1740641031385},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1740641031385},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1740641031385},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1740641031385},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1740641031385},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1740641031385},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"41b28f05e6233fb37700f7151f55868be10a0965","modified":1740641031385},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1740641031385},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"55c2468b2b7f035881d494085527d6554f37b556","modified":1740641031385},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1740641031386},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1740641031386},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1740641031386},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1740641031386},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1740641031386},{"_id":"themes/next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1740641031386},{"_id":"themes/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1740641031386},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"8a8f752260be5b8098393f9879b61ffe904465e8","modified":1740641031386},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1740641031386},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1740641031386},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"5942feb3f31ed3480bf50b0f5a4a305b5bdca3d6","modified":1740641031386},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"e2b4a9d6b08155735ec336eedc506763d5671821","modified":1740641031387},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1740641031387},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1740641031387},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1740641031387},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1740641031387},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1740641031387},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1740641031387},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1740641031387},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1740641031387},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1740641031387},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1740641031392},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"2c800eaab6c613e5d091be2111aaa786641aa0c2","modified":1740641031392},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"879b49f693af0c04c285b2dd0c9cccaf77347b7c","modified":1740641031392},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"20d5c6aa136bbb55e03906d98ee90ad3fbaa80a7","modified":1740641031393},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e814de4dab6aee6153d0a46438c231f94ed05e73","modified":1740641031393},{"_id":"themes/next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1740641031394},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1740641031395},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1740641031395},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1740641031395},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b8445c828d78a38e2de50bdc86b3bff66285ea0f","modified":1740641031388},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1740641031388},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1740641031389},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1740641031390},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"48b2dfc04df6409c6e0736ccc11462ad97d349b1","modified":1740641031390},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d898944f9a68da04c9c9bc4afeec4b5595b76783","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1740641031391},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"69c66aab4651e2e7ae9e65f08600144970648c60","modified":1740641031391},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bcbf498d8d3ecea84324f0a59b7f95f389a52b8d","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f23c53e32d140091b819be2603d1afbbb5d66933","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e31f6adbb22a451f07e4661cff9a2f12e4e99a36","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"c29a827e82d2820ed8977c92994da73721200fac","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"dc03835e42d82eaf2633cf3b627990ad3e1f5967","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"a92c4eb16bdb7806079467eb022ccf193bb0f794","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"a03f16ffc7dfdbdc6053f9fd68d77257ba0c559e","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e792a6233e1d4dbc5fd2f10ae97b7a790b82568b","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1740641031392},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1740641031392},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1740641031394},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1740641031394},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1740641031394},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1740641031394},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1740641031394},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1740641031394},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1740641031394},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1740641031394},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1740641031394},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1740641031394},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1740641031394},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1740641031395},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1740641031395},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1740641031395},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1740641031395},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"111f60e26b82b4d5be4357737e9273617778c9a9","modified":1740641031395},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4262628e173b16c4c6c18f817173dd103fb9e9a8","modified":1740641031395},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1740641031395},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1740641031395},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"1d1b6d847215b16f26b230859d7e16501190ecc0","modified":1740641031395},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1740641031395},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1740641031395},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"51a97a33879289904cb523ddc2d88b5b0c60fa72","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"93f014809d6442da23f8b7d729f7375e2badba7d","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"809bab3414b1eb1ae44444eb821126868f764414","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1740641031389},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1740641031389},{"_id":"source/resources/img/avatar.gif","hash":"e0ebd9eaa67185db11e1f93fd19bf776088da8de","modified":1740308874270},{"_id":"public/search.xml","hash":"3e7d5d2f38c11cfa15b968fb5e745f6b305056ba","modified":1740641071177},{"_id":"public/categories/minecraft/index.html","hash":"e1bc3c572fbd92fe0d8bfd95ada0a02239fc9d9b","modified":1740641071177},{"_id":"public/categories/随记/index.html","hash":"33b258bd0f9ab89f042a1eb381d909d65188be3a","modified":1740641071177},{"_id":"public/categories/hexo/index.html","hash":"a0eaa2af847637542d3e6f1d91dc08c833e03068","modified":1740641071177},{"_id":"public/categories/javascript/index.html","hash":"6201150ff8dd0ad7db6a81d2e000e9b46e955d63","modified":1740641071177},{"_id":"public/tags/服务器/index.html","hash":"9b0239639e1ed118cb3bad69d56ebbbc95fc5a12","modified":1740641071177},{"_id":"public/tags/javascript/index.html","hash":"219f170556eda0acb636f8728438d771f83b8977","modified":1740641071177},{"_id":"public/tags/微信小程序/index.html","hash":"188453915fc3497ebbc9514697a508e0b380ee47","modified":1740641071177},{"_id":"public/tags/随记/index.html","hash":"67658d1ba39b49a9063e6568719340426700f0fc","modified":1740641071177},{"_id":"public/2025/02/27/linux学习/关于在使用X window界面时候如何切换到其它tty","hash":"c5d81eedf857f12949e34c9b0bd1783621421015","modified":1740641071177},{"_id":"public/2025/02/26/linux学习/如何重装ubuntu的ui界面？/index.html","hash":"9c6c98165f29a9724d4e83e655ff192bffd86518","modified":1740641071177},{"_id":"public/2025/02/20/linux学习/关于docker部署nextcloud和优化的一些经历记录/index.html","hash":"e7ae0997aa5808938259dacd7bdea070036fdabb","modified":1740641071177},{"_id":"public/2025/02/18/linux学习/关于新创建用户遇到的一些bug/index.html","hash":"b07ef7ace95360c9ec368d5427e8ddd46a282133","modified":1740641071177},{"_id":"public/2025/02/17/linux学习/linux的一些基础命令-2/index.html","hash":"3d33311f5bd917066b3fe12f307d703dfe0a4d4a","modified":1740641071177},{"_id":"public/2025/02/10/linux学习/linux的一些基础命令/index.html","hash":"b3632d97aaf042d33f47a6158ddadaeae11cbe98","modified":1740641071177},{"_id":"public/2025/01/26/网络技术/1. 网络系统结构与设计的基本原则/index.html","hash":"8bdaa508a2fe9c7f14836caa0e94504179f1670f","modified":1740641071177},{"_id":"public/2025/01/24/前端/2025_01_24/index.html","hash":"cf40223dce8e2afae07d2ca0e45acf185b5e883b","modified":1740641071177},{"_id":"public/2025/01/19/linux学习/windows配置WSL(ubuntu)环境/index.html","hash":"e7fc358fa0318a260e84909ec1921989a533676c","modified":1740641071177},{"_id":"public/2025/01/19/minecraft/2025_01_21/index.html","hash":"92956cdfd66294fa7c094fb39b8d918868c6e039","modified":1740641071177},{"_id":"public/2025/01/19/微信小程序/2025_01_19/index.html","hash":"dbfc0160486363b2ca4c247cb80775802c9d574d","modified":1740641071177},{"_id":"public/2025/01/03/随记/my_first_blog/index.html","hash":"d394a601c2687a2cca6dd2baccc6226abdaa9841","modified":1740641071177},{"_id":"public/archives/index.html","hash":"28708563424599a7389ab224fc578faf86f6dab5","modified":1740641071177},{"_id":"public/archives/page/2/index.html","hash":"852566dd3fa58d791fea01aa8fcd69c97a6db366","modified":1740641071177},{"_id":"public/archives/2025/index.html","hash":"bf340cc83c59cb6fa2b9212db847ba8d89a89eac","modified":1740641071177},{"_id":"public/archives/2025/page/2/index.html","hash":"e21be72ac6a81a6aa15568e7dc5fe97d325c257a","modified":1740641071177},{"_id":"public/archives/2025/01/index.html","hash":"14e6825d73a5698ad91fa092c748e749fccb2ed1","modified":1740641071177},{"_id":"public/archives/2025/02/index.html","hash":"a48bfd7ad1571b1235eb9554e76e63360811031f","modified":1740641071177},{"_id":"public/categories/服务器/index.html","hash":"6c29662359dc855a69fb40fc926df4ed2f54189d","modified":1740641071177},{"_id":"public/categories/运维/index.html","hash":"c9f5fe4414f7741ed82ebfcdc9f978f19a61b984","modified":1740641071177},{"_id":"public/categories/微信小程序/index.html","hash":"8359fe3ae0675cfd6111dc1a90380f0ac61764aa","modified":1740641071177},{"_id":"public/categories/linux/index.html","hash":"3213af42badaaaea7a62ebe8d0425651a258cfde","modified":1740641071177},{"_id":"public/categories/网络技术/index.html","hash":"209b5bdc17d7a7951bae1de15db108967b726d52","modified":1740641071177},{"_id":"public/categories/前端/index.html","hash":"1f5e0aff337dec2873ec0187feb790fa61de049d","modified":1740641071177},{"_id":"public/index.html","hash":"b15b99b64c824ad40a5c5a163d64ba48fcec21a3","modified":1740641071177},{"_id":"public/page/2/index.html","hash":"21c999cc5757314c543319c70073cc3345d580c8","modified":1740641071177},{"_id":"public/tags/linux/index.html","hash":"2d707ea49b4bd667b950e9bbbd8405f7cc52fdb4","modified":1740641071177},{"_id":"public/tags/网络技术/index.html","hash":"55e5474c4f5852ab37ff229b31609d44215e3c23","modified":1740641071177},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1740641071177},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1740641071177},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1740641071177},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1740641071177},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1740641071177},{"_id":"public/resources/img/header-pink.webp","hash":"eb5d5ef287c34cda86e46004a6ef62ce4ed0775a","modified":1740641071177},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1740641071177},{"_id":"public/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1740641071177},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1740641071177},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1740641071177},{"_id":"public/js/motion.js","hash":"6f751f5c9499a39d7c5e1d323db3260342dd9431","modified":1740641071177},{"_id":"public/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1740641071177},{"_id":"public/js/pjax.js","hash":"0996078604f356a4f6692b9b0838038b3b10aa8a","modified":1740641071177},{"_id":"public/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1740641071177},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1740641071177},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1740641071177},{"_id":"public/js/third-party/search/local-search.js","hash":"4262628e173b16c4c6c18f817173dd103fb9e9a8","modified":1740641071177},{"_id":"public/css/main.css","hash":"a290862c976503b57438a353de78034b01f8f2dc","modified":1740641071177},{"_id":"public/js/utils.js","hash":"d7954a623be2ee9fe3eadc785b17c17afac6c34d","modified":1740641071177},{"_id":"public/resources/img/avatar.gif","hash":"e0ebd9eaa67185db11e1f93fd19bf776088da8de","modified":1740641071177}],"Category":[{"name":"服务器","_id":"cm7n0r3b00004tqvyascg8sbb"},{"name":"运维","_id":"cm7n0r3bl000jtqvyfjdw7370"},{"name":"minecraft","_id":"cm7n0r3bx0013tqvy7bi802yg"},{"name":"微信小程序","_id":"cm7n0r3by0016tqvyh8tx5m0r"},{"name":"linux","_id":"cm7n0r3c0001atqvyazr9ci07"},{"name":"网络技术","_id":"cm7n0r3c1001btqvy286i3hn0"},{"name":"随记","_id":"cm7n0r3c2001ftqvybd6dc68u"},{"name":"前端","_id":"cm7n0r3c6001wtqvy3emx1kfh"},{"name":"hexo","_id":"cm7n0r3c80022tqvycbthafng"},{"name":"javascript","_id":"cm7n0r3c80025tqvy59i10amw"}],"Data":[{"_id":"footer","data":"\n<div>\n<span id=\"timeDate\">载入天数...</span><span id=\"times\">载入时分秒...</span>\n<script>\n    var now = new Date();\n    function createtime() {\n        var grt= new Date(\"12/28/2024 00:00:00\");\n        now.setTime(now.getTime()+250);\n        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);\n        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);\n        if(String(hnum).length ==1 ){hnum = \"0\" + hnum;} minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n        mnum = Math.floor(minutes); if(String(mnum).length ==1 ){mnum = \"0\" + mnum;}\n        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n        snum = Math.round(seconds); if(String(snum).length ==1 ){snum = \"0\" + snum;}\n        document.getElementById(\"timeDate\").innerHTML = \"小破站已经运行了 \"+dnum+\" 天 \";\n        document.getElementById(\"times\").innerHTML = hnum + \" 小时 \" + mnum + \" 分 \" + snum + \" 秒\";\n    }\nsetInterval(\"createtime()\",250);\n</script>\n</div>\n\n\n<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>\n\n"},{"_id":"styles","data":"/* 隐藏顶部线条 */\n.headband {\n  display: none;\n}\n/* 顶部边距 */\n.header,\n.main-inner {\n  margin-top: 10px;\nmobile()\n}\n/* 选中字符颜色 */\n/* 站点标题背景 */\n.site-brand-container {\n  background: url(\"$site-brand-bg-url\");\n  background-position: 70% 20%;\n  background-size: cover;\n}\n/* 侧边圆角 */\nheader.header,\n.sidebar-inner {\n  border-radius: $myradius;\n}\n.site-brand-container {\n  border-radius: $myradius $myradius 0 0;\nmobile()\n}\n"},{"_id":"variables","data":""}],"Page":[],"Post":[{"title":"关于linux基本命令以及作用的概述和汇总学习-2","date":"2025-02-17T12:21:00.000Z","_content":"\n### PATH\n\n```bash\nhaxlock@root:~$ env | grep PATH\nCLASSPATH=.:/usr/local/jdk21/lib\nPATH=.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n```\n\n可以得到这么一些键值对，其实从本以上来理解，查询环境变量，本就是通过在**PATH键对应的值**中去查找相应的命令环境\n\n会在值中挨个去搜索环境变量的值，直到寻找到相应的内容。\n\n<!-- more -->\n\n### $符号\n\n$是用于取\"变量\"的值。\n\n取得环境变量的值可以通过语法：$来获得\n\n例如：\n\n```bash\nhaxlock@root:~$ echo $PATH\n.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n```\n\n### 作用\n\n如果你给你自己开发的程序记录在环境变量中，那么也可以通过你自己设定的命令行来快速地执行这个环境变量\n\n#### 自行设置方法：\n\n- 临时设置：语法：export 变量名称=变量值\n\n```bash\nhaxlock@root:~$ export MYNAME=haxlock\nhaxlock@root:~$ echo $MYNAME\nhaxlock\n```\n\n- 永久生效\n\n- - 针对当前用户生效，配置在当前用户地： ~/ .bashrc中\n  \n  - 针对所有用户生效，配置在系统的： /etc/profile文件中\n  \n  - 并通过语法：source配置文件，进行立刻生效，或重新登陆Xshell生效\n\n```bash\nvim ~/ .bashrc\n# source使得环境变量生效\nsource .bashrc\n```\n\n## Linux上传和下载\n\n### 通过Xshell和Xftp进行上传和下载\n\n此部分比较简单，建议参考官方文档即可\n\n### rz,sz命令上传与下载\n\n#### 安装\n\n```bash\nsudo apt install lrzsz -y\n```\n\n#### sz 下载\n\n> 注意！\n> \n> sz只能传输单个文件，无法传输目录，因此如果您想传输文件，建议先压缩在下载\n\n```bash\nsz [需要下载的文件名]\n```\n\n#### rz 上传\n\n```bash\nrz\n```\n\n选择您需要上传的目录即可\n\n## 压缩与解压\n\n### tar命令\n\nLinux与MAC常用有两种压缩格式，后缀名分别为：\n\n- .tar，成为tarball，归档文件，简单的啊文件组装到一个tar文件内，并没有太多文件体积的减少，仅仅为封装\n\n- .gz 使用gzip压缩算法将一个文件压缩到文件内，可以极大的减少压缩后的体积\n\n语法：\n\n```bash\ntar [-c -v -x -f -z -C] 参数1 参数2 参数N\n```\n\n- `-c`：创建一个新的压缩文件。\n\n- `-x`：解压归档文件。\n\n- `-t`：列出归档文件的内容。\n\n- `-r`：向现有归档文件中追加文件。\n\n- `-u`：仅追加比归档文件中已有文件更新的文件。\n\n- `-d`：找到归档文件中与文件系统不同步的差异。\n\n- `-A`：将一个 `.tar` 文件追加到另一个 `.tar` 文件中。\n\n其中 -f必须在最后，接受解压压缩文件的名称\n\n### 常用的压缩组合\n\n```bash\n# 将1.txt,2.txt,3.txt压缩到test.tar文件中\ntar -cvf test.tar 1.txt 2.txt 3.txt\n# 将1.txt,2.txt,3.txt压缩到test.tar.gz文件中\ntar -zcvf test.tar.gz 1.txt 2.txt 3.txt\n```\n\n### 常用的解压组合\n\n```bash\n# 解压test.tar 到当前目录\ntar -xvf test.tar\n# 解压test.tar到指定目录\ntar -xvf test.tar -C /home/test\n# 以Gzip模式解压test.tar.gz,将文件解压到指定目录下\ntar -zxvf test.tar.gz -C /home/test\n```\n\n> - -f必须在最后一位\n> \n> - -z建议在开头\n> \n> - -C建议单独使用\n","source":"_posts/linux学习/linux的一些基础命令-2.md","raw":"---\ntitle: 关于linux基本命令以及作用的概述和汇总学习-2\ndate: 2025/2/17 20:21:00\ntags: linux\ncategories:\n\n- [服务器]\n- [运维]\n- [linux] \n\n---\n\n### PATH\n\n```bash\nhaxlock@root:~$ env | grep PATH\nCLASSPATH=.:/usr/local/jdk21/lib\nPATH=.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n```\n\n可以得到这么一些键值对，其实从本以上来理解，查询环境变量，本就是通过在**PATH键对应的值**中去查找相应的命令环境\n\n会在值中挨个去搜索环境变量的值，直到寻找到相应的内容。\n\n<!-- more -->\n\n### $符号\n\n$是用于取\"变量\"的值。\n\n取得环境变量的值可以通过语法：$来获得\n\n例如：\n\n```bash\nhaxlock@root:~$ echo $PATH\n.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n```\n\n### 作用\n\n如果你给你自己开发的程序记录在环境变量中，那么也可以通过你自己设定的命令行来快速地执行这个环境变量\n\n#### 自行设置方法：\n\n- 临时设置：语法：export 变量名称=变量值\n\n```bash\nhaxlock@root:~$ export MYNAME=haxlock\nhaxlock@root:~$ echo $MYNAME\nhaxlock\n```\n\n- 永久生效\n\n- - 针对当前用户生效，配置在当前用户地： ~/ .bashrc中\n  \n  - 针对所有用户生效，配置在系统的： /etc/profile文件中\n  \n  - 并通过语法：source配置文件，进行立刻生效，或重新登陆Xshell生效\n\n```bash\nvim ~/ .bashrc\n# source使得环境变量生效\nsource .bashrc\n```\n\n## Linux上传和下载\n\n### 通过Xshell和Xftp进行上传和下载\n\n此部分比较简单，建议参考官方文档即可\n\n### rz,sz命令上传与下载\n\n#### 安装\n\n```bash\nsudo apt install lrzsz -y\n```\n\n#### sz 下载\n\n> 注意！\n> \n> sz只能传输单个文件，无法传输目录，因此如果您想传输文件，建议先压缩在下载\n\n```bash\nsz [需要下载的文件名]\n```\n\n#### rz 上传\n\n```bash\nrz\n```\n\n选择您需要上传的目录即可\n\n## 压缩与解压\n\n### tar命令\n\nLinux与MAC常用有两种压缩格式，后缀名分别为：\n\n- .tar，成为tarball，归档文件，简单的啊文件组装到一个tar文件内，并没有太多文件体积的减少，仅仅为封装\n\n- .gz 使用gzip压缩算法将一个文件压缩到文件内，可以极大的减少压缩后的体积\n\n语法：\n\n```bash\ntar [-c -v -x -f -z -C] 参数1 参数2 参数N\n```\n\n- `-c`：创建一个新的压缩文件。\n\n- `-x`：解压归档文件。\n\n- `-t`：列出归档文件的内容。\n\n- `-r`：向现有归档文件中追加文件。\n\n- `-u`：仅追加比归档文件中已有文件更新的文件。\n\n- `-d`：找到归档文件中与文件系统不同步的差异。\n\n- `-A`：将一个 `.tar` 文件追加到另一个 `.tar` 文件中。\n\n其中 -f必须在最后，接受解压压缩文件的名称\n\n### 常用的压缩组合\n\n```bash\n# 将1.txt,2.txt,3.txt压缩到test.tar文件中\ntar -cvf test.tar 1.txt 2.txt 3.txt\n# 将1.txt,2.txt,3.txt压缩到test.tar.gz文件中\ntar -zcvf test.tar.gz 1.txt 2.txt 3.txt\n```\n\n### 常用的解压组合\n\n```bash\n# 解压test.tar 到当前目录\ntar -xvf test.tar\n# 解压test.tar到指定目录\ntar -xvf test.tar -C /home/test\n# 以Gzip模式解压test.tar.gz,将文件解压到指定目录下\ntar -zxvf test.tar.gz -C /home/test\n```\n\n> - -f必须在最后一位\n> \n> - -z建议在开头\n> \n> - -C建议单独使用\n","slug":"linux学习/linux的一些基础命令-2","published":1,"updated":"2025-02-23T11:07:54.253Z","comments":1,"layout":"post","photos":[],"_id":"cm7n0r3am0000tqvy2vew9sw9","content":"<h3 id=\"PATH\"><a href=\"#PATH\" class=\"headerlink\" title=\"PATH\"></a>PATH</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@root:~$ <span class=\"built_in\">env</span> | grep PATH</span><br><span class=\"line\">CLASSPATH=.:/usr/local/jdk21/lib</span><br><span class=\"line\">PATH=.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>\n\n<p>可以得到这么一些键值对，其实从本以上来理解，查询环境变量，本就是通过在<strong>PATH键对应的值</strong>中去查找相应的命令环境</p>\n<p>会在值中挨个去搜索环境变量的值，直到寻找到相应的内容。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"$符号\"></a>$符号</h3><p>$是用于取”变量”的值。</p>\n<p>取得环境变量的值可以通过语法：$来获得</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@root:~$ <span class=\"built_in\">echo</span> <span class=\"variable\">$PATH</span></span><br><span class=\"line\">.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>如果你给你自己开发的程序记录在环境变量中，那么也可以通过你自己设定的命令行来快速地执行这个环境变量</p>\n<h4 id=\"自行设置方法：\"><a href=\"#自行设置方法：\" class=\"headerlink\" title=\"自行设置方法：\"></a>自行设置方法：</h4><ul>\n<li>临时设置：语法：export 变量名称&#x3D;变量值</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@root:~$ <span class=\"built_in\">export</span> MYNAME=haxlock</span><br><span class=\"line\">haxlock@root:~$ <span class=\"built_in\">echo</span> <span class=\"variable\">$MYNAME</span></span><br><span class=\"line\">haxlock</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>永久生效</p>\n</li>\n<li><ul>\n<li><p>针对当前用户生效，配置在当前用户地： ~&#x2F; .bashrc中</p>\n</li>\n<li><p>针对所有用户生效，配置在系统的： &#x2F;etc&#x2F;profile文件中</p>\n</li>\n<li><p>并通过语法：source配置文件，进行立刻生效，或重新登陆Xshell生效</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/ .bashrc</span><br><span class=\"line\"><span class=\"comment\"># source使得环境变量生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> .bashrc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux上传和下载\"><a href=\"#Linux上传和下载\" class=\"headerlink\" title=\"Linux上传和下载\"></a>Linux上传和下载</h2><h3 id=\"通过Xshell和Xftp进行上传和下载\"><a href=\"#通过Xshell和Xftp进行上传和下载\" class=\"headerlink\" title=\"通过Xshell和Xftp进行上传和下载\"></a>通过Xshell和Xftp进行上传和下载</h3><p>此部分比较简单，建议参考官方文档即可</p>\n<h3 id=\"rz-sz命令上传与下载\"><a href=\"#rz-sz命令上传与下载\" class=\"headerlink\" title=\"rz,sz命令上传与下载\"></a>rz,sz命令上传与下载</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install lrzsz -y</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sz-下载\"><a href=\"#sz-下载\" class=\"headerlink\" title=\"sz 下载\"></a>sz 下载</h4><blockquote>\n<p>注意！</p>\n<p>sz只能传输单个文件，无法传输目录，因此如果您想传输文件，建议先压缩在下载</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sz [需要下载的文件名]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"rz-上传\"><a href=\"#rz-上传\" class=\"headerlink\" title=\"rz 上传\"></a>rz 上传</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rz</span><br></pre></td></tr></table></figure>\n\n<p>选择您需要上传的目录即可</p>\n<h2 id=\"压缩与解压\"><a href=\"#压缩与解压\" class=\"headerlink\" title=\"压缩与解压\"></a>压缩与解压</h2><h3 id=\"tar命令\"><a href=\"#tar命令\" class=\"headerlink\" title=\"tar命令\"></a>tar命令</h3><p>Linux与MAC常用有两种压缩格式，后缀名分别为：</p>\n<ul>\n<li><p>.tar，成为tarball，归档文件，简单的啊文件组装到一个tar文件内，并没有太多文件体积的减少，仅仅为封装</p>\n</li>\n<li><p>.gz 使用gzip压缩算法将一个文件压缩到文件内，可以极大的减少压缩后的体积</p>\n</li>\n</ul>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar [-c -v -x -f -z -C] 参数1 参数2 参数N</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>-c</code>：创建一个新的压缩文件。</p>\n</li>\n<li><p><code>-x</code>：解压归档文件。</p>\n</li>\n<li><p><code>-t</code>：列出归档文件的内容。</p>\n</li>\n<li><p><code>-r</code>：向现有归档文件中追加文件。</p>\n</li>\n<li><p><code>-u</code>：仅追加比归档文件中已有文件更新的文件。</p>\n</li>\n<li><p><code>-d</code>：找到归档文件中与文件系统不同步的差异。</p>\n</li>\n<li><p><code>-A</code>：将一个 <code>.tar</code> 文件追加到另一个 <code>.tar</code> 文件中。</p>\n</li>\n</ul>\n<p>其中 -f必须在最后，接受解压压缩文件的名称</p>\n<h3 id=\"常用的压缩组合\"><a href=\"#常用的压缩组合\" class=\"headerlink\" title=\"常用的压缩组合\"></a>常用的压缩组合</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将1.txt,2.txt,3.txt压缩到test.tar文件中</span></span><br><span class=\"line\">tar -cvf test.tar 1.txt 2.txt 3.txt</span><br><span class=\"line\"><span class=\"comment\"># 将1.txt,2.txt,3.txt压缩到test.tar.gz文件中</span></span><br><span class=\"line\">tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用的解压组合\"><a href=\"#常用的解压组合\" class=\"headerlink\" title=\"常用的解压组合\"></a>常用的解压组合</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压test.tar 到当前目录</span></span><br><span class=\"line\">tar -xvf test.tar</span><br><span class=\"line\"><span class=\"comment\"># 解压test.tar到指定目录</span></span><br><span class=\"line\">tar -xvf test.tar -C /home/test</span><br><span class=\"line\"><span class=\"comment\"># 以Gzip模式解压test.tar.gz,将文件解压到指定目录下</span></span><br><span class=\"line\">tar -zxvf test.tar.gz -C /home/test</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li><p>-f必须在最后一位</p>\n</li>\n<li><p>-z建议在开头</p>\n</li>\n<li><p>-C建议单独使用</p>\n</li>\n</ul>\n</blockquote>\n","excerpt":"<h3 id=\"PATH\"><a href=\"#PATH\" class=\"headerlink\" title=\"PATH\"></a>PATH</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@root:~$ <span class=\"built_in\">env</span> | grep PATH</span><br><span class=\"line\">CLASSPATH=.:/usr/local/jdk21/lib</span><br><span class=\"line\">PATH=.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>\n\n<p>可以得到这么一些键值对，其实从本以上来理解，查询环境变量，本就是通过在<strong>PATH键对应的值</strong>中去查找相应的命令环境</p>\n<p>会在值中挨个去搜索环境变量的值，直到寻找到相应的内容。</p>","more":"<h3 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"$符号\"></a>$符号</h3><p>$是用于取”变量”的值。</p>\n<p>取得环境变量的值可以通过语法：$来获得</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@root:~$ <span class=\"built_in\">echo</span> <span class=\"variable\">$PATH</span></span><br><span class=\"line\">.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>如果你给你自己开发的程序记录在环境变量中，那么也可以通过你自己设定的命令行来快速地执行这个环境变量</p>\n<h4 id=\"自行设置方法：\"><a href=\"#自行设置方法：\" class=\"headerlink\" title=\"自行设置方法：\"></a>自行设置方法：</h4><ul>\n<li>临时设置：语法：export 变量名称&#x3D;变量值</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@root:~$ <span class=\"built_in\">export</span> MYNAME=haxlock</span><br><span class=\"line\">haxlock@root:~$ <span class=\"built_in\">echo</span> <span class=\"variable\">$MYNAME</span></span><br><span class=\"line\">haxlock</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>永久生效</p>\n</li>\n<li><ul>\n<li><p>针对当前用户生效，配置在当前用户地： ~&#x2F; .bashrc中</p>\n</li>\n<li><p>针对所有用户生效，配置在系统的： &#x2F;etc&#x2F;profile文件中</p>\n</li>\n<li><p>并通过语法：source配置文件，进行立刻生效，或重新登陆Xshell生效</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/ .bashrc</span><br><span class=\"line\"><span class=\"comment\"># source使得环境变量生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> .bashrc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux上传和下载\"><a href=\"#Linux上传和下载\" class=\"headerlink\" title=\"Linux上传和下载\"></a>Linux上传和下载</h2><h3 id=\"通过Xshell和Xftp进行上传和下载\"><a href=\"#通过Xshell和Xftp进行上传和下载\" class=\"headerlink\" title=\"通过Xshell和Xftp进行上传和下载\"></a>通过Xshell和Xftp进行上传和下载</h3><p>此部分比较简单，建议参考官方文档即可</p>\n<h3 id=\"rz-sz命令上传与下载\"><a href=\"#rz-sz命令上传与下载\" class=\"headerlink\" title=\"rz,sz命令上传与下载\"></a>rz,sz命令上传与下载</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install lrzsz -y</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sz-下载\"><a href=\"#sz-下载\" class=\"headerlink\" title=\"sz 下载\"></a>sz 下载</h4><blockquote>\n<p>注意！</p>\n<p>sz只能传输单个文件，无法传输目录，因此如果您想传输文件，建议先压缩在下载</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sz [需要下载的文件名]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"rz-上传\"><a href=\"#rz-上传\" class=\"headerlink\" title=\"rz 上传\"></a>rz 上传</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rz</span><br></pre></td></tr></table></figure>\n\n<p>选择您需要上传的目录即可</p>\n<h2 id=\"压缩与解压\"><a href=\"#压缩与解压\" class=\"headerlink\" title=\"压缩与解压\"></a>压缩与解压</h2><h3 id=\"tar命令\"><a href=\"#tar命令\" class=\"headerlink\" title=\"tar命令\"></a>tar命令</h3><p>Linux与MAC常用有两种压缩格式，后缀名分别为：</p>\n<ul>\n<li><p>.tar，成为tarball，归档文件，简单的啊文件组装到一个tar文件内，并没有太多文件体积的减少，仅仅为封装</p>\n</li>\n<li><p>.gz 使用gzip压缩算法将一个文件压缩到文件内，可以极大的减少压缩后的体积</p>\n</li>\n</ul>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar [-c -v -x -f -z -C] 参数1 参数2 参数N</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>-c</code>：创建一个新的压缩文件。</p>\n</li>\n<li><p><code>-x</code>：解压归档文件。</p>\n</li>\n<li><p><code>-t</code>：列出归档文件的内容。</p>\n</li>\n<li><p><code>-r</code>：向现有归档文件中追加文件。</p>\n</li>\n<li><p><code>-u</code>：仅追加比归档文件中已有文件更新的文件。</p>\n</li>\n<li><p><code>-d</code>：找到归档文件中与文件系统不同步的差异。</p>\n</li>\n<li><p><code>-A</code>：将一个 <code>.tar</code> 文件追加到另一个 <code>.tar</code> 文件中。</p>\n</li>\n</ul>\n<p>其中 -f必须在最后，接受解压压缩文件的名称</p>\n<h3 id=\"常用的压缩组合\"><a href=\"#常用的压缩组合\" class=\"headerlink\" title=\"常用的压缩组合\"></a>常用的压缩组合</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将1.txt,2.txt,3.txt压缩到test.tar文件中</span></span><br><span class=\"line\">tar -cvf test.tar 1.txt 2.txt 3.txt</span><br><span class=\"line\"><span class=\"comment\"># 将1.txt,2.txt,3.txt压缩到test.tar.gz文件中</span></span><br><span class=\"line\">tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用的解压组合\"><a href=\"#常用的解压组合\" class=\"headerlink\" title=\"常用的解压组合\"></a>常用的解压组合</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压test.tar 到当前目录</span></span><br><span class=\"line\">tar -xvf test.tar</span><br><span class=\"line\"><span class=\"comment\"># 解压test.tar到指定目录</span></span><br><span class=\"line\">tar -xvf test.tar -C /home/test</span><br><span class=\"line\"><span class=\"comment\"># 以Gzip模式解压test.tar.gz,将文件解压到指定目录下</span></span><br><span class=\"line\">tar -zxvf test.tar.gz -C /home/test</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li><p>-f必须在最后一位</p>\n</li>\n<li><p>-z建议在开头</p>\n</li>\n<li><p>-C建议单独使用</p>\n</li>\n</ul>\n</blockquote>"},{"title":"关于linux基本命令以及作用的概述和汇总学习","date":"2025-02-10T03:25:00.000Z","_content":"\n# 这是一篇关于linux基本命令以及作用的概述和汇总学习\n\n## ls\n\n### ls命令\n\nls命令用于列出目录下的内容\n\n例如输出结果可能如下：\n\n<!-- more -->\n\n```bash\nhaxlock@armbian:~$ ls\nback_data  DDNS-go  ha  server  test.txt\n```\n\n### ls参数-选项\n\n```bash\nls [-a -l -h] [linux路径]\n```\n\n这是ls 可选参数的基本概况\n\n以下是三种参数对应的输出情况：\n\n#### ls -a\n\n会输出项目下所有文件夹下所有文件情况\n\n```bash\nhaxlock@armbian:~$ ls -a\n.              .bash_history  DDNS-go     .profile                   test.txt    .Xauthority\n..             .bash_logout   ha          .pyenv                     .vim        .xsessionrc\nback_data      .bashrc        .local      server                     .viminfo    .zshrc\n.bash_aliases  .cache         .oh-my-zsh  .sudo_as_admin_successful  .wget-hsts\n```\n\n#### ls -l\n\n会以列表的形式，详细说明目录下文件的具体信息\n\n```bash\nhaxlock@armbian:~$ ls -l\ntotal 20\ndrwxrwxr-x 13 root    root    4096  1月 23 13:38 back_data\ndrwxr-xr-x  2 root    root    4096  1月 10 07:46 DDNS-go\ndrwxr-xr-x  2 root    root    4096  1月 10 13:47 ha\ndrwxr-xr-x  6 root    root    4096  1月  9 17:51 server\n-rw-rw-r--  1 haxlock haxlock   20  2月  6 10:26 test.txt\n```\n\n#### ls -h\n\n- -h 表示易于阅读的形式，列出文件的大小，如K,M,G\n\n- [attention!] -h 必须要搭配 -l 使用，否则无效、\n\n下面为演示：\n\n```bash\nhaxlock@armbian:~$ ls -lh\ntotal 20K\ndrwxrwxr-x 13 root    root    4.0K  1月 23 13:38 back_data\ndrwxr-xr-x  2 root    root    4.0K  1月 10 07:46 DDNS-go\ndrwxr-xr-x  2 root    root    4.0K  1月 10 13:47 ha\ndrwxr-xr-x  6 root    root    4.0K  1月  9 17:51 server\n-rw-rw-r--  1 haxlock haxlock   20  2月  6 10:26 test.txt\n```\n\n可以看到这是显示出来了文件的大小，如4.0K\n\n### ls 结尾\n\nls -a -l -h 都可以组合使用，具体需要根据实际场景进行变更，这是一个非常方便的快捷键用于查看当前路径下的所有文件情况。\n\n## cd / pwd 命令\n\n#### cd （Change Directory）\n\ncd 主要用于切换当前操作目录，例如:\n\n```bash\nhaxlock@armbian:~$ \n```\n\n当前就是在/home/haxlock目录下\n\n那么我想切换到别的目录，这时需要用到cd命令\n\n```bash\nhaxlock@armbian:~$ cd /etc/\nhaxlock@armbian:/etc$ \n```\n\ncd 后面接 /etc/就切换到了 **根目录下**  的 **etc** 文件夹下的路径\n\n> 注意！\n> \n> 其中最头部的 ‘/’是代表linux的根目录，一一定不能少    \n\n如果直接就写一个cd，那么会快速返回用户目录下的home目录下\n\n```bash\nhaxlock@armbian:/etc$ cd\nhaxlock@armbian:~$ \n```\n\n#### pwd (Print Word Directory)\n\npwd用于打印当前的工作目录路径\n\n```bash\nhaxlock@armbian:~$ pwd\n/home/haxlock\n```\n\n可见控制台可以输出当前工作目录\n\n## mkdir\n\n### mkdir 创建目录命令\n\n通过 mkdir [-p] Linux路径\n\n- 参数 **必填** 表示路径，就是要创建文件夹的路径，相对和绝对均可\n- -p是为了创建多个层级的目录\n\n例如：\n\n```bash\nhaxlock@armbian:~$ mkdir test\nhaxlock@armbian:~$ ls\nback_data  DDNS-go  ha  server  test  test.txt\n```\n\n可见此时新出现一个test文件夹\n\n```bash\nhaxlock@armbian:~$ cd test\nhaxlock@armbian:~/test$ \n```\n\n可以进入这个新文件夹\n\n我想快速在home目录下创建文件怎么办呢？\n\n可以用这个快捷命令\n\n```bash\nhaxlock@armbian:~$ mkdir ~/1\nhaxlock@armbian:~$ ls\n1  back_data  DDNS-go  ha  server  test  test.txt\n```\n\n可见在home路径下创建了一个新的‘1’的文件夹\n\n### mkdir 创建多个层级目录\n\n此时需要使用-p命令\n\n```bash\nhaxlock@armbian:~$ mkdir -p 2/3/4\nhaxlock@armbian:~$ ls\n1  2  back_data  DDNS-go  ha  server  test  test.txt\nhaxlock@armbian:~$ cd 2/3/4/\nhaxlock@armbian:~/2/3/4$ pwd\n/home/haxlock/2/3/4\nhaxlock@armbian:~/2/3/4$ \n```\n\n可以创建多层路径\n\n## touch、cat、more文件操作命令\n\n### touch 创建文件\n\ntouch Linux路径\n\n我想创建一个test.txt文件\n\n例如：\n\n```bash\nhaxlock@armbian:~$ touch test.txt\nhaxlock@armbian:~$ ls\nback_data  DDNS-go  ha  server  test.txt\n```\n\n创建了一个test.txt文件\n\n> 可以通过颜色分别文件和文件夹，有色的是文件夹，白色的是文件\n\n### cat、more查看文件内容\n\n#### cat查看\n\n```bash\nhaxlock@armbian:~$ cat test.txt \n这是一个测试文件\n```\n\n#### more查看\n\nmore与cat不同的是\n\n- cat是直接把所有内容显示出来\n\n- more是支持翻页的，可以一页一页显（空格翻页）\n\n## cp-mv-rm命令\n\n#### cp\n\ncp（copy）用于复制文件、文件夹，主要用途在于修改某文件前将他提前备份。\n\n**cp [-r] 路径1 路径2**\n\n例如我想把/home/haxlock下的test.txt复制到根目录下，那么命令就是：\n\n```bash\ncp /home/haxlock/test.txt /\n```\n\n其中-r是当复制文件夹时候使用的，表示递归\n\n#### mv\n\nmv（move）用于移动文件或文件夹\n\n**mv 参数1 参数2**\n\n例如：\n\n```bash\nmv /home/haxlock/test.txt /\n```\n\n把路径下的test.txt移动到根目录下\n\n#### rm\n\n##### 基础指令\n\nrm是用于删除的指令\n\nrm [-r -f] 参数1 参数2 参数3 ....参数n \n\n其中，-r表示用于删除文件夹\n\n-f 表示force,强制删除文件夹，不会弹出提示\n\n后面多个参数代表多个您需要删除的文件。\n\n例如我想删除/home/haxlock路径下的‘1’文件夹\n\n```bash\nrm -r /home/haxlock/1\n```\n\n这时候会弹出提示您是否要删除？然后确认即可\n\n如果您加了 -f 那么就不会弹出提示\n\n大部分情况下不建议使用-f 参数，因为十分危险。\n\n##### 搭配通配符使用\n\n- *符号就代表通配符，可以匹配任意内容\n\n- test* 表示匹配所有以test开头的内容\n\n- *test 表示所有以test结尾的内容\n\n- \\*test\\* 表示所有包含test的内容\n\n- 删除所有以test开头的文件和文件夹：\n\n```bash\nrm -r test*\nls\n```\n\n## which- find 命令\n\n### which\n\nwhich用于查找命令对应的文件\n\n例如：\n\n```bash\nwhich pwd\n```\n\n> 只针对命令文件查找 \n\n### find\n\n#### 按照文件名查找\n\nfind **起始路径** -name **\"被查找文件名\"**\n\n由于是全盘搜索\n\n命令应当这样使用:\n\n```bash\nsudo find / -name test\n```\n\n也可以搭配通配符使用，详情请看[搭配通配符使用](##### 搭配通配符使用)\n\n#### 按照大小查找\n\nfind 起始路径 -size + | n[kMG]\n\n- \\+ - 表示大于和小于\n\n- n表示大小数字\n\n- kMG表示单位，k(小写字母)表示kb，M为MB,G为GB\n\n例如：\n\n- 查找小于10KB文件：find / -size -10k\n\n- 大于100MB文件： find / -size + 100M\n\n- 查找大于1GB文件: find / -size +1G\n\n## grep-wc 管道符号\n\n### grep\n\ngrep [-n] 关键字 文件路径\n\n- -n 可选表示结果中显示匹配的行的行号\n\n- 关键字 表示要过滤的关键字，用“”包围\n\n- 文件路径，可作为内容的输入端口\n\n例如有一个test.txt文件，内容为：\n\n这是一个测试文件\n\n这是两个测试文件\n\n这是三个测试文件\n\n查找第一行，一个\n\n```bash\nhaxlock@armbian:~$ grep \"一个\" test.txt \n这是一个测试文件\n```\n\n一个被标红，输入查找结果\n\n```bash\nhaxlock@armbian:~$ grep -n \"一个\" test.txt \n1:这是一个测试文件\n```\n\n加入-n参数可以输入行数\n\n### wc\n\nwc [-c -m -l -w]  文件路径\n\n用于统计文件的行数、单词数量等\n\n- -c 统计bytes数量\n\n- -m 统计字符数量\n\n- -l 统计行数\n\n- -w 统计单词数量\n\n```bash\nhaxlock@armbian:~$ wc test.txt \n 5  3 77 test.txt\n```\n\n5代表五行，3代表个3个单词，77个字节\n\n### ‘|’ 管道符\n\n**表示把管道符后左边的命令结果，作为右边的命令的输入**\n\n例如：\n\n```bash\nhaxlock@armbian:~$ cat test.txt | wc -l\n5\n```\n\n左边cat输入的结果作为右边wc -l命令的输入\n\n输出结果5，代表中国文件有五行内容\n\n又例如：\n\n```bash\nhaxlock@armbian:~$ ls -l /usr/bin | wc -l\n1180\n```\n\n可以用于统计文件的数量\n\n## echo、tail和重定向符\n\n### echo\n\necho 输出的内容\n\n**可以用echo命令在命令行输出指定内容**\n\n```bash\nhaxlock@armbian:~$ echo \"hello word\"\nhello word\n```\n\n如果想输出‘pwd’的结果呢？\n\n我们可以：\n\n```bash\nhaxlock@armbian:~$ echo `pwd`\n/home/haxlock\n```\n\n用 \\`pwd\\` 即可实现这个功能，被  ` 所包围的会输出它的结果\n\n### 重定向符\n\n#### >\n\n\\> 把左侧命令的结果覆盖写入符号右侧的文件中\n\n例如：\n\n```bash\nhaxlock@armbian:~$ echo \"覆盖测试\" > test.txt \nhaxlock@armbian:~$ cat test.txt \n覆盖测试\n```\n\n#### >>\n\n\\>> 表示把左侧命令结果追加写入符号右侧的文件中\n\n例如：\n\n```bash\nhaxlock@armbian:~$ echo \"我嘞个都！\" >> test.txt \nhaxlock@armbian:~$ cat test.txt \n覆盖测试\n我嘞个都！\n```\n\n### tail 命令\n\ntail [-f -num] Linux路径\n\n查看文件尾部内容，**跟踪文件的是最新更改**\n\n- Linux路径表示被跟踪的路径\n\n- -f 表示持续跟踪\n\n- -num 表示查看尾部多少行，默认为10\n\n**查看尾部10行，追踪文件更新**\n\n```bash\nhaxlock@armbian:~$ tail -5 test.txt \nsys\ntmp\nusr\nvar\nwww\n```\n\n如果用 -f参数，那么会一直跟踪文件的更新情况\n\n## vim\\vi编辑器\n\nvim兼容所有vi功能，后续使用vim就行，无所谓\n\n- 若文件不存在，则创建文件\n\n- 若文件已存在，则直接编辑文件\n\n```bash\nvim hello.txt\n```\n\n| 模式     | 命令           | 描述                  |\n| ------ | ------------ | ------------------- |\n| 命令模式   | `i`          | 在当前光标位置进入`输入模式`     |\n| 命令模式   | `a`          | 在当前光标位置后进入`输入模式`    |\n| 命令模式   | `I`          | 在行开头进入`输入模式`        |\n| 命令模式   | `A`          | 在行结尾进入`输入模式`        |\n| 命令模式   | `o`          | 在光标下一行进入`输入模式`      |\n| 命令模式   | `O`          | 在光标上一行进入`输入模式`      |\n| 输入模式   | `esc`        | esc进入`命令模式`         |\n| 命令模式   | `上,k`        | 向上移动光标              |\n| 命令模式   | `下,j`        | 向下移动光标              |\n| 命令模式   | `左,h`        | 向左移动光标              |\n| 命令模式   | `右,l`        | 向右移动光标              |\n| 命令模式   | `0`          | 移动光标到当前行头           |\n| 命令模式   | `$`          | 移动光标到当前行尾           |\n| 命令模式   | `pgUp`       | 上翻页                 |\n| 命令模式   | `pgDn`       | 下翻页                 |\n| 命令模式   | `/`          | 搜索模式                |\n| 命令模式   | `n`          | 向下继续搜索              |\n| 命令模式   | `N`          | 向上继续搜索              |\n| 命令模式   | `dd`         | 删除当前行               |\n| 命令模式   | `ndd`        | 删除当前行下面的n行          |\n| 命令模式   | `yy`         | 复制当前行               |\n| 命令模式   | `nyy`        | 复制n行                |\n| 命令模式   | `p`          | 粘贴内容                |\n| 命令模式   | `u`          | 撤销修改                |\n| 命令模式   | `ctrl + r`   | 反向撤销修改              |\n| 命令模式   | `gg`         | 跳到首行                |\n| 命令模式   | `G`          | 跳到行尾                |\n| 命令模式   | `dG`         | 从当前行，向下全部删除         |\n| 命令模式   | `dgg`        | 从当前行开始，向上全部删除       |\n| 命令模式   | `d$`         | 从当前光标开始，删除到本行的结尾    |\n| 命令模式   | `d0`         | 从当前光标开始，删除到本行的开头    |\n| 底线命令模式 | `:wq`        | 保存并退出               |\n| 底线命令模式 | `:q`         | 退出                  |\n| 底线命令模式 | `:q!`        | 强制退出                |\n| 底线命令模式 | `:w`         | 保存                  |\n| 底线命令模式 | `:set nu`    | 显示行号                |\n| 底线命令模式 | `:set paste` | 设置粘贴模式（为了确保粘贴格式没问题） |\n\n## 关于为什么ubuntu、debian等使用su - root无法进入root模式的原因\n\n由于ubuntu、debian等发行版操作系统一般默认不给你root账户权限，因此你输入这个的时候，可能会报错如下:\n\nsu(switch user)\n\n```bash\nhaxlock@armbian:~$ su - root\nPassword: \nsu: Authentication failure\n```\n\n如果您需要进入root账户，需要通过以下命令进入：\n\n```bash\nhaxlock@armbian:~$ sudo -i\n[sudo] password for haxlock: \nroot@armbian:~# \n```\n\n或者\n\n```bash\nsudo su\n```\n\n也可以进入root账户\n\n### 切换账户的方式\n\nsu - 用户名\n\n例如：\n\n```bash\nroot@armbian:~# su - haxlock\nhaxlock@armbian:~$ \n```\n\n如果你切换完账户后，通过`exit` 可以切换回上一个用户\n\n```bash\nroot@armbian:/home/haxlock# exit\nexit\nhaxlock@armbian:~$ \n```\n\n还有使用`ctrl+d` 也可以切换回上一个用户\n\n## Linux 用户以及用户组\n\nLinux系统可以\n\n- 配置多个用户\n\n- 配置多个用户组\n\n- 用户可以加入多个用户组\n\n### 用户组\n\n- 创建\n\ngroupadd 用户组名\n\n- 删除\n\ngroupdel 用户组名\n\n### 用户管理\n\n- 创建用户\n\n`useradd [-g -d] 用户名`\n\n1. 选项： -g指定用户组，不指定-g，会创建同名组并自动加入，指定-g需要组以及存在，如果存在用户组，必须使用-g\n\n2. 选项：-d指定用户HOME路径，如果不指定就默认在/home/用户名下\n- 删除用户\n\n`userdel [-r] 用户名`\n\n    1. 选项： -r，删除用户的HOME目录，不适用-r，删除用户时，HOME会被保留\n\n- 查看用户所属组\n\n`id [用户名]`\n\n    1. 参数：用户名，被查看的用户，如果不提供则查看自身\n\n- 修改用户所属组\n\n`usermod -aG 用户组 用户名`\n\n指定用户加入指定的用户组\n\n### getent\n\ngetent passwd\n\n查看当前系统中有哪些用户\n\ngetent group\n\n查看当前系统有哪些组\n\n## 查看权限管控\n\n```bash\nhaxlock@armbian:~$ ls -l\ntotal 20\ndrwxrwxr-x 13 root    root    4096  1月 23 13:38 back_data\ndrwxr-xr-x  2 root    root    4096  1月 10 07:46 DDNS-go\ndrwxr-xr-x  2 root    root    4096  1月 10 13:47 ha\ndrwxr-xr-x  6 root    root    4096  1月  9 17:51 server\n-rw-rw-r--  1 haxlock haxlock  155  2月  7 08:45 test.txt\n```\n\n来分析一下头部\n\ndrwxrwxr-x\n\n- d表示这是一个文件夹，-为文件,l表示软链接\n\n- rwx这三个是所属用户权限，表示有r有w有x\n\n- rwx后三个表示是所属用户组的权限,有r有w有x\n\n- r-x最后三个表示洽谈用户权限，有r无w有x\n\nr代表读权限，w代表可写，x代表可执行(excute)\n\n## chmod\n\n可以通过chmod命令，修改，文件、文件夹的权限信息\n\n> 只有文件、文件夹的所属用户或者root用户可以修改\n\n**语法： chmod [-R] 权限 权限 文件或者文件夹**\n\n- -R 对文件夹内全部内容应用同样的擦欧总\n\n- chmod u=rwx,g=rx,o=x hello.txt 把权限修改为rwxr-x--x\n\n- - 其中u代表user所属先前，g表示group组权限，o表示其他用户权限\n\n- chmod -r u=rwx,g=rx,o=x test 将问及那家tst以及文件夹内全部内容权限设置为wrxr-r--x\n\n权限也可以用数字来替代\n\n用三位数字表示 **r为4,w为2,x为1**\n\n- 0:无任何权限 ---\n\n- 1:仅x，--x\n\n- 2:仅w, -w-\n\n- 3:wx, -wx\n\n- 4:仅，r\n\n- 5:r-x,r和x权限, r-x\n\n- 6:有r和w权限，rw-\n\n- 7:全部权限,rwx\n\n**简单说就是二进制的和**\n\n## chown\n\n修改文件、文件夹所属用户和用户组\n\n**此命令只可root执行**\n\n语法：`chown [-R] [用户][:][用户组] 文件或者文件夹`\n\n## linux各种实用命令\n\n### 基本\n\nctrl+c强制退出停止命令运行\n\nctrl+d退出当前登录\n\nhistory 查看历史输入过的命令\n\n!命令前缀，自动执行上一次匹配前缀的命令\n\n### 历史命令搜索：\n\n- 通过ctrl+r，输入内容去匹配历史命令\n\n- 键盘左右键，可以得到此命令（不执行）\n\n- ctrl+a跳到命令开头,ctrl+e跳到命令结尾，ctril+左，向左跳一个单词，ctrl+右，向右跳一个单词\n\n- ctrl+l清空终端内容,clear也可以得到同样的效果\n\n### ubuntu-apt命令\n\n```bash\nsudo apt update\n#安装这个包\nsudo apt install wget\n# 寻找这个应用包\nsudo apt search wget\n#移除这个包\nsudo apt remove wget\n```\n\n### systemctl命令\n\nsystemctl控制软件、服务的启停，开机自启\n\n- systemctl start 开启服务\n\n- systemctl stop 关闭服务\n\n- systemctl enable 开机自启动\n\n- systemctl status 查看状态\n\n## 软链接\n\n简单来说类似于windows中的快捷方式\n\n创建一个链接可以指向一个文件、文件夹\n\n语法： `ln -s 参数1 参数2`\n\n```bash\nhaxlock@ubuntu:~$ sudo ln -s /etc/apt ~/apt\nhaxlock@ubuntu:~$ ls -l\ntotal 12\ndrwxr-xr-x 3 root    root    4096 Feb 11 14:33 1panel-v1.10.24-lts-linux-amd64\nlrwxrwxrwx 1 root    root       8 Feb 14 08:16 apt -> /etc/apt\n-rw-rw-r-- 1 haxlock haxlock 3586 Jun 29  2020 bt-uninstall.sh\ndrwxrwxr-x 2 root    root    4096 Feb 14 05:35 test\nhaxlock@ubuntu:~$ cd apt\nhaxlock@ubuntu:~/apt$ ls\napt.conf.d   keyrings       preferences.d.save  sources.list.btbackup     sources.list.d  trusted.gpg.d\nauth.conf.d  preferences.d  sources.list        sources.list.curtin.orig  trusted.gpg\nhaxlock@ubuntu:~/apt$ cd ..\nhaxlock@ubuntu:~$ ls\n1panel-v1.10.24-lts-linux-amd64  apt  bt-uninstall.sh  test\nhaxlock@ubuntu:~$ \n```\n\n## date 查看时间\n\n格式`date [-d] [+格式化字符串]`\n\n```bash\nFri Feb 14 08:17:09 AM UTC 2025\nhaxlock@ubuntu:~$ date\nFri Feb 14 08:18:34 AM UTC 2025\nhaxlock@ubuntu:~$ date +%Y-%m-%d\n2025-02-14\nhaxlock@ubuntu:~$ date \"+%Y-%m-%d %H:%M:%S\"\n2025-02-14 08:20:32\n```\n\n- %Y年\n\n- y 年份后两位数字\n\n- m 月份\n\n- d 天\n\n- H 小时（24）\n\n- M 分钟\n\n- S 秒\n\n- s 自1970-01-01至今的时间\n\n```bash\n#查看明天的时间\nhaxlock@ubuntu:~$ date -d \"+1 day\"\nSat Feb 15 08:26:36 AM UTC 2025\n\n#去年\nhaxlock@ubuntu:~$ date -d \"-1 year\"\nWed Feb 14 08:28:10 AM UTC 2024haxlock@ubuntu:~$ date -d \"-1 year\"\nWed Feb 14 08:28:10 AM UTC 2024\n```\n\n### 修改linux时区\n\n#### 手动修改\n\n```bash\nhaxlock@ubuntu:~$ sudo rm -f /etc/localtime\nhaxlock@ubuntu:~$ sudo ln -s -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \nhaxlock@ubuntu:~$ date\nFri Feb 14 04:47:51 PM CST 2025\n```\n\n#### ntp自动校准\n\n```bash\nsudo systemctl start ntp\n```\n\n#### ntp手动校准\n\n```bash\nntpdate -u ntp.aliyun.com\n```\n\n指向一个ntp服务器即可\n\n## 查看ip地址\n\n```bash\nifconfig\n```\n\n主机名\n\n```bash\nhaxlock@ubuntu:~$ hostname\nubuntu\n```\n\n修改主机名\n\n```bash\nhostnamectl set-hostname [需要修改的主机名]\n```\n\n配置主机名映射\n\n先查看本机记录\n\n- Windows看 C:\\Windows\\System32\\drivers\\etc\\hosts\n\n- Linux看： /etc/hosts\n\n- 配置文件＋‘ip+主机名即可’\n\n再去联网去DNS服务器询问\n\n## 虚拟机静态ip配置\n\n- 首先在Vmware配置好网卡设置\n\n- 进入/etc/sysconfig/network-scripts/ifcfg-ens33文件，修改内容\n\n- 将BOOTPROTO后面DHCP改为static\n\n- 末尾加入如下内容：\n  \n  ```bash\n  IPADDR=\"192.168.88.130\" #IP地址\n  NETMASK=\"255.255.255.0\" #子网掩码\n  GATEWAY=\"192.168.88.2\" #网关与VMware设置一致\n  DNS1 =\"DNS为网关即可\"\n  ```\n\n## 网络传输\n\n### ping\n\n`ping [-c num] ip`\n\n```bash\nhaxlock@ubuntu:~$ ping -c 5 www.baidu.com\nPING www.baidu.com(2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77)) 56 data bytes\n64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=1 ttl=54 time=4.15 ms\n64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=2 ttl=54 time=4.71 ms\n64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=3 ttl=54 time=4.86 ms\n64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=4 ttl=54 time=4.59 ms\n64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=5 ttl=54 time=4.59 ms\n\n--- www.baidu.com ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4005ms\nrtt min/avg/max/mdev = 4.152/4.582/4.862/0.237 ms\n```\n\n### wget\n\n非交互式文件下载器\n\n`wget [-b] url`\n\n- \\-b 后台下载，日志会写道wget-log中\n\n- url下载链接\n\n### curl\n\n发起http网络请求，可用于下载文件、获取信息\n\n`curl [-o] url`\n\n- \\-o 用于下载文件\n\n- url请求的地址\n\n## 端口\n\n设备与外界通信交流的出入口\n\n分为物理端口以及虚拟端口\n\n- 物理端口：也称为接口，如USB,RJ45网口，HDMI\n\n- 虚拟端口：指的计算机内部端口，用于操作系统与外界交互使用\n\nLinux支持65535个端口，这6万多个端口可以分为3类使用\n\n- 公认端口：1-1023,通常为一些系统内置或者知名程序预留，例如ssh的22，https的443\n\n- 注册端口：1024-49151 ，通常可以随意使用，用于松散地绑定一些程序\\服务\n\n- 动态端口：49152-65535，也通常不绑定程序，而是程序对外进行网络链接时候，用于临时使用\n\n### nmap查看端口占用情况\n\n```bash\nsudo apt install nmap -y\nnmap 127.0.0.1\n```\n\n会扫描某个ip开放地端口\n\n### netstat查看指定端口占用情况\n\nnetstat -anp|grep 端口号\n\n安装：\n\n```bash\nsudo apt install net-tools\n```\n\n使用：\n\n```bash\nhaxlock@root:~$ netstat -anp|grep 3001\n(Not all processes could be identified, non-owned process info\n will not be shown, you would have to be root to see it all.)\ntcp6       0      0 :::3001                 :::*                    LISTEN      6550/java     \n```\n\n可以看到某端口在被哪个端口占用，进程号(PID)是多少\n\n## 进程管理\n\n也可以说是**任务管理器**\n\n### 查看进程\n\n```bash\nps [-e -f]\n```\n\n- -e 显示所有的进程\n\n- -f 以完全格式化的形式展示信息\n\n一般来说，如果ps -ef就是列出所有进程的全部信息\n\n```bash\nhaxlock@root:~$ ps -f\nUID          PID    PPID  C STIME TTY          TIME CMD\nhaxlock    96215   96214  0 14:49 pts/0    00:00:00 -bash\nhaxlock    96232   96215 99 14:50 pts/0    00:00:00 ps -f\n```\n\n- UID:进程所属的用户ID\n\n- PID: 进程的进程号ID\n\n- PPID: 进程的父ID\n\n- C:此进程的CPU占用比\n\n- STIME：进程的启动时间\n\n- TTY：启动此进程的终端序号，？表示非终端启动\n\n- TIME：进程占用CPU的时间\n\n- CMD：进程的启动路径或运行路径\n\n如果想确认跟踪一个进程的信息\n\n可以：\n\n```bash\nps -ef | grep [进程名]\n```\n\n### 关闭进程\n\n```bash\nkill [-9] 进程ID\n```\n\n其中 **-9** 代表强制关闭\n\n## top 主机状态详解\n\n```bash\ntop\n```\n\n查看主机的各种状态参数，默认每5s刷新一次\n\n内容较多，此处可当工具查找\n\n**top命令经常用来监控linux的系统状况，是常用的性能分析工具，能够实时显示系统中各个进程的资源占用情况。**\n\n### **常用参数**\n\ntop的使用方式 top [-d number] | top [-bnp]\n\n| 参数        | 含义                                          |\n| --------- | ------------------------------------------- |\n| -d number | number代表秒数，表示top命令显示的页面更新一次的间隔 (default=5s) |\n| -b        | 以批次的方式执行top                                 |\n| -n        | 与-b配合使用，表示需要进行几次top命令的输出结果                  |\n| -p        | 指定特定的pid进程号进行观察                             |\n\n**top命令显示的页面还可以输入以下按键执行相应的功能（注意大小写区分的）**\n\n| 参数  | 含义                      |\n| --- | ----------------------- |\n| ？   | 显示在top当中可以输入的命令         |\n| P   | 以CPU的使用资源排序显示           |\n| M   | 以内存的使用资源排序显示            |\n| N   | 以pid排序显示                |\n| T   | 由进程使用的时间累计排序显示          |\n| k   | 给某一个pid一个信号,可以用来杀死进程(9) |\n| r   | 给某个pid重新定制一个nice值（即优先级) |\n| q   | 退出top（用ctrl+c也可以退出top）  |\n\n### **top各输出参数含义**\n\n```bash\ntop - 15:23:39 up 7 days,  7:57,  2 users,  load average: 0.00, 0.01, 0.00\nTasks: 249 total,   1 running, 248 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.1 us,  0.2 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st \nMiB Mem :   7894.1 total,    367.4 free,   5022.1 used,   2813.0 buff/cache     \nMiB Swap:   2048.0 total,   2047.7 free,      0.3 used.   2872.0 avail Mem \n\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                 \n  81232 root      20   0  315932   9472   7936 S   0.3   0.1   2:52.54 vmtoolsd                                                \n  96087 root      20   0       0      0      0 I   0.3   0.0   0:02.13 kworker/3:2-events                                      \n  96214 haxlock   20   0   15124   7088   5120 S   0.3   0.1   0:00.17 sshd                                                    \n  96302 haxlock   20   0   11944   5888   3712 R   0.3   0.1   0:00.02 top                                                     \n      1 root      20   0   22624  13696   9472 S   0.0   0.2   1:22.07 systemd                                                 \n      2 root      20   0       0      0      0 S   0.0   0.0   0:00.89 kthreadd         \n```\n\n#### 一、top前五条信息解释\n\n```bash\ntop - 15:23:39 up 7 days,  7:57,  2 users,  load average: 0.00, 0.01, 0.00\n```\n\n| 内容                             | 含义                                            |\n| ------------------------------ | --------------------------------------------- |\n| 14:49:28                       | 表示当前时间                                        |\n| up 1:33                        | 系统远行时间，格式为时：分                                 |\n| 1 user                         | 当前登陆用户数                                       |\n| load average: 0.00, 0.00, 0.00 | 系统负载，即任务队列的平均长度。 三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值 |\n\n```bash\nTasks: 249 total,   1 running, 248 sleeping,   0 stopped,   0 zombi\n```\n\n| 内容              | 含义       |\n| --------------- | -------- |\n| Tasks: 80 total | 进程总数     |\n| 2 running       | 正在运行的进程数 |\n| 78 sleeping     | 睡眠的进程数   |\n| 0 stopped       | 停止的进程数   |\n| 0 zombie        | 僵尸进程数    |\n\n```bash\n%Cpu(s):  0.1 us,  0.2 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 s\n```\n\n| 内容       | 含义                                |\n| -------- | --------------------------------- |\n| 0.0%us   | 用户空间占用CPU百分比                      |\n| 0.0%sy   | 内核空间占用CPU百分比                      |\n| 0.0%ni   | 用户进程空间内改变过优先级的进程占用CPU百分比          |\n| 100.0%id | 空闲CPU百分比                          |\n| 0.0%wa   | 等待输入输出的CPU时间百分比                   |\n| 0.0%hi   | 硬中断（Hardware IRQ）占用CPU的百分比        |\n| 0.0%si   | 软中断（Software Interrupts）占用CPU的百分比 |\n| 0.0 st   | 用于有虚拟cpu的情况，用来指示被虚拟机偷掉的cpu时间      |\n\n```bash\nMem: 1922488k total, 406936k used, 1515552k free, 11940k buffers\n```\n\n| 内容             | 含义         |\n| -------------- | ---------- |\n| 1922488k total | 物理内存总量     |\n| 406936k used   | 使用的物理内存总量  |\n| 1515552k free  | 空闲内存总量     |\n| 11940k buffers | 用作内核缓存的内存量 |\n\n```bash\nSwap: 835576k total, 0k used, 835576k free, 111596k cached\n```\n\n| 内容             | 含义       |\n| -------------- | -------- |\n| 835576k total  | 交换区总量    |\n| 0k used        | 使用的交换区总量 |\n| 835576k free   | 空闲交换区总量  |\n| 111596k cached | 缓冲的交换区总量 |\n\n#### 二、进程信息\n\n| 列名      | 含义                                        |\n| ------- | ----------------------------------------- |\n| PID     | 进程id                                      |\n| USER    | 进程所有者的用户名                                 |\n| PR      | 优先级                                       |\n| NI      | nice值。负值表示高优先级，正值表示低优先级                   |\n| VIRT    | 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES            |\n| RES     | 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA      |\n| SHR     | 共享内存大小，单位kb                               |\n| S       | 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程 |\n| %CPU    | 上次更新到现在的CPU时间占用百分比                        |\n| %MEM    | 进程使用的物理内存百分比                              |\n| TIME+   | 进程使用的CPU时间总计，单位1/100秒                     |\n| COMMAND | 命令名/命令行                                   |\n\n## 环境变量\n\n一系列命令本质上就是一个个可执行文件。\n\n例如：cd本体就是/usr/bin/cd这个文件下的文件\n\n查看当前环境变量：\n\n```bash\nenv\n```\n\n### PATH\n\n```bash\nhaxlock@root:~$ env | grep PATH\nCLASSPATH=.:/usr/local/jdk21/lib\nPATH=.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n```\n\n可以得到这么一些键值对，其实从本以上来理解，查询环境变量，本就是通过在**PATH键对应的值**中去查找相应的命令环境\n\n会在值中挨个去搜索环境变量的值，直到寻找到相应的内容。\n\n### $符号\n\n$是用于取\"变量\"的值。\n\n取得环境变量的值可以通过语法：$来获得\n\n例如：\n\n```bash\nhaxlock@root:~$ echo $PATH\n.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n```\n\n### 作用\n\n如果你给你自己开发的程序记录在环境变量中，那么也可以通过你自己设定的命令行来快速地执行这个环境变量\n\n#### 自行设置方法：\n\n- 临时设置：语法：export 变量名称=变量值\n","source":"_posts/linux学习/linux的一些基础命令.md","raw":"---\ntitle: 关于linux基本命令以及作用的概述和汇总学习\ndate: 2025/2/10 11:25:00\ntags: linux\ncategories: \n- [服务器]\n- [运维]\n- [linux]\n---\n\n# 这是一篇关于linux基本命令以及作用的概述和汇总学习\n\n## ls\n\n### ls命令\n\nls命令用于列出目录下的内容\n\n例如输出结果可能如下：\n\n<!-- more -->\n\n```bash\nhaxlock@armbian:~$ ls\nback_data  DDNS-go  ha  server  test.txt\n```\n\n### ls参数-选项\n\n```bash\nls [-a -l -h] [linux路径]\n```\n\n这是ls 可选参数的基本概况\n\n以下是三种参数对应的输出情况：\n\n#### ls -a\n\n会输出项目下所有文件夹下所有文件情况\n\n```bash\nhaxlock@armbian:~$ ls -a\n.              .bash_history  DDNS-go     .profile                   test.txt    .Xauthority\n..             .bash_logout   ha          .pyenv                     .vim        .xsessionrc\nback_data      .bashrc        .local      server                     .viminfo    .zshrc\n.bash_aliases  .cache         .oh-my-zsh  .sudo_as_admin_successful  .wget-hsts\n```\n\n#### ls -l\n\n会以列表的形式，详细说明目录下文件的具体信息\n\n```bash\nhaxlock@armbian:~$ ls -l\ntotal 20\ndrwxrwxr-x 13 root    root    4096  1月 23 13:38 back_data\ndrwxr-xr-x  2 root    root    4096  1月 10 07:46 DDNS-go\ndrwxr-xr-x  2 root    root    4096  1月 10 13:47 ha\ndrwxr-xr-x  6 root    root    4096  1月  9 17:51 server\n-rw-rw-r--  1 haxlock haxlock   20  2月  6 10:26 test.txt\n```\n\n#### ls -h\n\n- -h 表示易于阅读的形式，列出文件的大小，如K,M,G\n\n- [attention!] -h 必须要搭配 -l 使用，否则无效、\n\n下面为演示：\n\n```bash\nhaxlock@armbian:~$ ls -lh\ntotal 20K\ndrwxrwxr-x 13 root    root    4.0K  1月 23 13:38 back_data\ndrwxr-xr-x  2 root    root    4.0K  1月 10 07:46 DDNS-go\ndrwxr-xr-x  2 root    root    4.0K  1月 10 13:47 ha\ndrwxr-xr-x  6 root    root    4.0K  1月  9 17:51 server\n-rw-rw-r--  1 haxlock haxlock   20  2月  6 10:26 test.txt\n```\n\n可以看到这是显示出来了文件的大小，如4.0K\n\n### ls 结尾\n\nls -a -l -h 都可以组合使用，具体需要根据实际场景进行变更，这是一个非常方便的快捷键用于查看当前路径下的所有文件情况。\n\n## cd / pwd 命令\n\n#### cd （Change Directory）\n\ncd 主要用于切换当前操作目录，例如:\n\n```bash\nhaxlock@armbian:~$ \n```\n\n当前就是在/home/haxlock目录下\n\n那么我想切换到别的目录，这时需要用到cd命令\n\n```bash\nhaxlock@armbian:~$ cd /etc/\nhaxlock@armbian:/etc$ \n```\n\ncd 后面接 /etc/就切换到了 **根目录下**  的 **etc** 文件夹下的路径\n\n> 注意！\n> \n> 其中最头部的 ‘/’是代表linux的根目录，一一定不能少    \n\n如果直接就写一个cd，那么会快速返回用户目录下的home目录下\n\n```bash\nhaxlock@armbian:/etc$ cd\nhaxlock@armbian:~$ \n```\n\n#### pwd (Print Word Directory)\n\npwd用于打印当前的工作目录路径\n\n```bash\nhaxlock@armbian:~$ pwd\n/home/haxlock\n```\n\n可见控制台可以输出当前工作目录\n\n## mkdir\n\n### mkdir 创建目录命令\n\n通过 mkdir [-p] Linux路径\n\n- 参数 **必填** 表示路径，就是要创建文件夹的路径，相对和绝对均可\n- -p是为了创建多个层级的目录\n\n例如：\n\n```bash\nhaxlock@armbian:~$ mkdir test\nhaxlock@armbian:~$ ls\nback_data  DDNS-go  ha  server  test  test.txt\n```\n\n可见此时新出现一个test文件夹\n\n```bash\nhaxlock@armbian:~$ cd test\nhaxlock@armbian:~/test$ \n```\n\n可以进入这个新文件夹\n\n我想快速在home目录下创建文件怎么办呢？\n\n可以用这个快捷命令\n\n```bash\nhaxlock@armbian:~$ mkdir ~/1\nhaxlock@armbian:~$ ls\n1  back_data  DDNS-go  ha  server  test  test.txt\n```\n\n可见在home路径下创建了一个新的‘1’的文件夹\n\n### mkdir 创建多个层级目录\n\n此时需要使用-p命令\n\n```bash\nhaxlock@armbian:~$ mkdir -p 2/3/4\nhaxlock@armbian:~$ ls\n1  2  back_data  DDNS-go  ha  server  test  test.txt\nhaxlock@armbian:~$ cd 2/3/4/\nhaxlock@armbian:~/2/3/4$ pwd\n/home/haxlock/2/3/4\nhaxlock@armbian:~/2/3/4$ \n```\n\n可以创建多层路径\n\n## touch、cat、more文件操作命令\n\n### touch 创建文件\n\ntouch Linux路径\n\n我想创建一个test.txt文件\n\n例如：\n\n```bash\nhaxlock@armbian:~$ touch test.txt\nhaxlock@armbian:~$ ls\nback_data  DDNS-go  ha  server  test.txt\n```\n\n创建了一个test.txt文件\n\n> 可以通过颜色分别文件和文件夹，有色的是文件夹，白色的是文件\n\n### cat、more查看文件内容\n\n#### cat查看\n\n```bash\nhaxlock@armbian:~$ cat test.txt \n这是一个测试文件\n```\n\n#### more查看\n\nmore与cat不同的是\n\n- cat是直接把所有内容显示出来\n\n- more是支持翻页的，可以一页一页显（空格翻页）\n\n## cp-mv-rm命令\n\n#### cp\n\ncp（copy）用于复制文件、文件夹，主要用途在于修改某文件前将他提前备份。\n\n**cp [-r] 路径1 路径2**\n\n例如我想把/home/haxlock下的test.txt复制到根目录下，那么命令就是：\n\n```bash\ncp /home/haxlock/test.txt /\n```\n\n其中-r是当复制文件夹时候使用的，表示递归\n\n#### mv\n\nmv（move）用于移动文件或文件夹\n\n**mv 参数1 参数2**\n\n例如：\n\n```bash\nmv /home/haxlock/test.txt /\n```\n\n把路径下的test.txt移动到根目录下\n\n#### rm\n\n##### 基础指令\n\nrm是用于删除的指令\n\nrm [-r -f] 参数1 参数2 参数3 ....参数n \n\n其中，-r表示用于删除文件夹\n\n-f 表示force,强制删除文件夹，不会弹出提示\n\n后面多个参数代表多个您需要删除的文件。\n\n例如我想删除/home/haxlock路径下的‘1’文件夹\n\n```bash\nrm -r /home/haxlock/1\n```\n\n这时候会弹出提示您是否要删除？然后确认即可\n\n如果您加了 -f 那么就不会弹出提示\n\n大部分情况下不建议使用-f 参数，因为十分危险。\n\n##### 搭配通配符使用\n\n- *符号就代表通配符，可以匹配任意内容\n\n- test* 表示匹配所有以test开头的内容\n\n- *test 表示所有以test结尾的内容\n\n- \\*test\\* 表示所有包含test的内容\n\n- 删除所有以test开头的文件和文件夹：\n\n```bash\nrm -r test*\nls\n```\n\n## which- find 命令\n\n### which\n\nwhich用于查找命令对应的文件\n\n例如：\n\n```bash\nwhich pwd\n```\n\n> 只针对命令文件查找 \n\n### find\n\n#### 按照文件名查找\n\nfind **起始路径** -name **\"被查找文件名\"**\n\n由于是全盘搜索\n\n命令应当这样使用:\n\n```bash\nsudo find / -name test\n```\n\n也可以搭配通配符使用，详情请看[搭配通配符使用](##### 搭配通配符使用)\n\n#### 按照大小查找\n\nfind 起始路径 -size + | n[kMG]\n\n- \\+ - 表示大于和小于\n\n- n表示大小数字\n\n- kMG表示单位，k(小写字母)表示kb，M为MB,G为GB\n\n例如：\n\n- 查找小于10KB文件：find / -size -10k\n\n- 大于100MB文件： find / -size + 100M\n\n- 查找大于1GB文件: find / -size +1G\n\n## grep-wc 管道符号\n\n### grep\n\ngrep [-n] 关键字 文件路径\n\n- -n 可选表示结果中显示匹配的行的行号\n\n- 关键字 表示要过滤的关键字，用“”包围\n\n- 文件路径，可作为内容的输入端口\n\n例如有一个test.txt文件，内容为：\n\n这是一个测试文件\n\n这是两个测试文件\n\n这是三个测试文件\n\n查找第一行，一个\n\n```bash\nhaxlock@armbian:~$ grep \"一个\" test.txt \n这是一个测试文件\n```\n\n一个被标红，输入查找结果\n\n```bash\nhaxlock@armbian:~$ grep -n \"一个\" test.txt \n1:这是一个测试文件\n```\n\n加入-n参数可以输入行数\n\n### wc\n\nwc [-c -m -l -w]  文件路径\n\n用于统计文件的行数、单词数量等\n\n- -c 统计bytes数量\n\n- -m 统计字符数量\n\n- -l 统计行数\n\n- -w 统计单词数量\n\n```bash\nhaxlock@armbian:~$ wc test.txt \n 5  3 77 test.txt\n```\n\n5代表五行，3代表个3个单词，77个字节\n\n### ‘|’ 管道符\n\n**表示把管道符后左边的命令结果，作为右边的命令的输入**\n\n例如：\n\n```bash\nhaxlock@armbian:~$ cat test.txt | wc -l\n5\n```\n\n左边cat输入的结果作为右边wc -l命令的输入\n\n输出结果5，代表中国文件有五行内容\n\n又例如：\n\n```bash\nhaxlock@armbian:~$ ls -l /usr/bin | wc -l\n1180\n```\n\n可以用于统计文件的数量\n\n## echo、tail和重定向符\n\n### echo\n\necho 输出的内容\n\n**可以用echo命令在命令行输出指定内容**\n\n```bash\nhaxlock@armbian:~$ echo \"hello word\"\nhello word\n```\n\n如果想输出‘pwd’的结果呢？\n\n我们可以：\n\n```bash\nhaxlock@armbian:~$ echo `pwd`\n/home/haxlock\n```\n\n用 \\`pwd\\` 即可实现这个功能，被  ` 所包围的会输出它的结果\n\n### 重定向符\n\n#### >\n\n\\> 把左侧命令的结果覆盖写入符号右侧的文件中\n\n例如：\n\n```bash\nhaxlock@armbian:~$ echo \"覆盖测试\" > test.txt \nhaxlock@armbian:~$ cat test.txt \n覆盖测试\n```\n\n#### >>\n\n\\>> 表示把左侧命令结果追加写入符号右侧的文件中\n\n例如：\n\n```bash\nhaxlock@armbian:~$ echo \"我嘞个都！\" >> test.txt \nhaxlock@armbian:~$ cat test.txt \n覆盖测试\n我嘞个都！\n```\n\n### tail 命令\n\ntail [-f -num] Linux路径\n\n查看文件尾部内容，**跟踪文件的是最新更改**\n\n- Linux路径表示被跟踪的路径\n\n- -f 表示持续跟踪\n\n- -num 表示查看尾部多少行，默认为10\n\n**查看尾部10行，追踪文件更新**\n\n```bash\nhaxlock@armbian:~$ tail -5 test.txt \nsys\ntmp\nusr\nvar\nwww\n```\n\n如果用 -f参数，那么会一直跟踪文件的更新情况\n\n## vim\\vi编辑器\n\nvim兼容所有vi功能，后续使用vim就行，无所谓\n\n- 若文件不存在，则创建文件\n\n- 若文件已存在，则直接编辑文件\n\n```bash\nvim hello.txt\n```\n\n| 模式     | 命令           | 描述                  |\n| ------ | ------------ | ------------------- |\n| 命令模式   | `i`          | 在当前光标位置进入`输入模式`     |\n| 命令模式   | `a`          | 在当前光标位置后进入`输入模式`    |\n| 命令模式   | `I`          | 在行开头进入`输入模式`        |\n| 命令模式   | `A`          | 在行结尾进入`输入模式`        |\n| 命令模式   | `o`          | 在光标下一行进入`输入模式`      |\n| 命令模式   | `O`          | 在光标上一行进入`输入模式`      |\n| 输入模式   | `esc`        | esc进入`命令模式`         |\n| 命令模式   | `上,k`        | 向上移动光标              |\n| 命令模式   | `下,j`        | 向下移动光标              |\n| 命令模式   | `左,h`        | 向左移动光标              |\n| 命令模式   | `右,l`        | 向右移动光标              |\n| 命令模式   | `0`          | 移动光标到当前行头           |\n| 命令模式   | `$`          | 移动光标到当前行尾           |\n| 命令模式   | `pgUp`       | 上翻页                 |\n| 命令模式   | `pgDn`       | 下翻页                 |\n| 命令模式   | `/`          | 搜索模式                |\n| 命令模式   | `n`          | 向下继续搜索              |\n| 命令模式   | `N`          | 向上继续搜索              |\n| 命令模式   | `dd`         | 删除当前行               |\n| 命令模式   | `ndd`        | 删除当前行下面的n行          |\n| 命令模式   | `yy`         | 复制当前行               |\n| 命令模式   | `nyy`        | 复制n行                |\n| 命令模式   | `p`          | 粘贴内容                |\n| 命令模式   | `u`          | 撤销修改                |\n| 命令模式   | `ctrl + r`   | 反向撤销修改              |\n| 命令模式   | `gg`         | 跳到首行                |\n| 命令模式   | `G`          | 跳到行尾                |\n| 命令模式   | `dG`         | 从当前行，向下全部删除         |\n| 命令模式   | `dgg`        | 从当前行开始，向上全部删除       |\n| 命令模式   | `d$`         | 从当前光标开始，删除到本行的结尾    |\n| 命令模式   | `d0`         | 从当前光标开始，删除到本行的开头    |\n| 底线命令模式 | `:wq`        | 保存并退出               |\n| 底线命令模式 | `:q`         | 退出                  |\n| 底线命令模式 | `:q!`        | 强制退出                |\n| 底线命令模式 | `:w`         | 保存                  |\n| 底线命令模式 | `:set nu`    | 显示行号                |\n| 底线命令模式 | `:set paste` | 设置粘贴模式（为了确保粘贴格式没问题） |\n\n## 关于为什么ubuntu、debian等使用su - root无法进入root模式的原因\n\n由于ubuntu、debian等发行版操作系统一般默认不给你root账户权限，因此你输入这个的时候，可能会报错如下:\n\nsu(switch user)\n\n```bash\nhaxlock@armbian:~$ su - root\nPassword: \nsu: Authentication failure\n```\n\n如果您需要进入root账户，需要通过以下命令进入：\n\n```bash\nhaxlock@armbian:~$ sudo -i\n[sudo] password for haxlock: \nroot@armbian:~# \n```\n\n或者\n\n```bash\nsudo su\n```\n\n也可以进入root账户\n\n### 切换账户的方式\n\nsu - 用户名\n\n例如：\n\n```bash\nroot@armbian:~# su - haxlock\nhaxlock@armbian:~$ \n```\n\n如果你切换完账户后，通过`exit` 可以切换回上一个用户\n\n```bash\nroot@armbian:/home/haxlock# exit\nexit\nhaxlock@armbian:~$ \n```\n\n还有使用`ctrl+d` 也可以切换回上一个用户\n\n## Linux 用户以及用户组\n\nLinux系统可以\n\n- 配置多个用户\n\n- 配置多个用户组\n\n- 用户可以加入多个用户组\n\n### 用户组\n\n- 创建\n\ngroupadd 用户组名\n\n- 删除\n\ngroupdel 用户组名\n\n### 用户管理\n\n- 创建用户\n\n`useradd [-g -d] 用户名`\n\n1. 选项： -g指定用户组，不指定-g，会创建同名组并自动加入，指定-g需要组以及存在，如果存在用户组，必须使用-g\n\n2. 选项：-d指定用户HOME路径，如果不指定就默认在/home/用户名下\n- 删除用户\n\n`userdel [-r] 用户名`\n\n    1. 选项： -r，删除用户的HOME目录，不适用-r，删除用户时，HOME会被保留\n\n- 查看用户所属组\n\n`id [用户名]`\n\n    1. 参数：用户名，被查看的用户，如果不提供则查看自身\n\n- 修改用户所属组\n\n`usermod -aG 用户组 用户名`\n\n指定用户加入指定的用户组\n\n### getent\n\ngetent passwd\n\n查看当前系统中有哪些用户\n\ngetent group\n\n查看当前系统有哪些组\n\n## 查看权限管控\n\n```bash\nhaxlock@armbian:~$ ls -l\ntotal 20\ndrwxrwxr-x 13 root    root    4096  1月 23 13:38 back_data\ndrwxr-xr-x  2 root    root    4096  1月 10 07:46 DDNS-go\ndrwxr-xr-x  2 root    root    4096  1月 10 13:47 ha\ndrwxr-xr-x  6 root    root    4096  1月  9 17:51 server\n-rw-rw-r--  1 haxlock haxlock  155  2月  7 08:45 test.txt\n```\n\n来分析一下头部\n\ndrwxrwxr-x\n\n- d表示这是一个文件夹，-为文件,l表示软链接\n\n- rwx这三个是所属用户权限，表示有r有w有x\n\n- rwx后三个表示是所属用户组的权限,有r有w有x\n\n- r-x最后三个表示洽谈用户权限，有r无w有x\n\nr代表读权限，w代表可写，x代表可执行(excute)\n\n## chmod\n\n可以通过chmod命令，修改，文件、文件夹的权限信息\n\n> 只有文件、文件夹的所属用户或者root用户可以修改\n\n**语法： chmod [-R] 权限 权限 文件或者文件夹**\n\n- -R 对文件夹内全部内容应用同样的擦欧总\n\n- chmod u=rwx,g=rx,o=x hello.txt 把权限修改为rwxr-x--x\n\n- - 其中u代表user所属先前，g表示group组权限，o表示其他用户权限\n\n- chmod -r u=rwx,g=rx,o=x test 将问及那家tst以及文件夹内全部内容权限设置为wrxr-r--x\n\n权限也可以用数字来替代\n\n用三位数字表示 **r为4,w为2,x为1**\n\n- 0:无任何权限 ---\n\n- 1:仅x，--x\n\n- 2:仅w, -w-\n\n- 3:wx, -wx\n\n- 4:仅，r\n\n- 5:r-x,r和x权限, r-x\n\n- 6:有r和w权限，rw-\n\n- 7:全部权限,rwx\n\n**简单说就是二进制的和**\n\n## chown\n\n修改文件、文件夹所属用户和用户组\n\n**此命令只可root执行**\n\n语法：`chown [-R] [用户][:][用户组] 文件或者文件夹`\n\n## linux各种实用命令\n\n### 基本\n\nctrl+c强制退出停止命令运行\n\nctrl+d退出当前登录\n\nhistory 查看历史输入过的命令\n\n!命令前缀，自动执行上一次匹配前缀的命令\n\n### 历史命令搜索：\n\n- 通过ctrl+r，输入内容去匹配历史命令\n\n- 键盘左右键，可以得到此命令（不执行）\n\n- ctrl+a跳到命令开头,ctrl+e跳到命令结尾，ctril+左，向左跳一个单词，ctrl+右，向右跳一个单词\n\n- ctrl+l清空终端内容,clear也可以得到同样的效果\n\n### ubuntu-apt命令\n\n```bash\nsudo apt update\n#安装这个包\nsudo apt install wget\n# 寻找这个应用包\nsudo apt search wget\n#移除这个包\nsudo apt remove wget\n```\n\n### systemctl命令\n\nsystemctl控制软件、服务的启停，开机自启\n\n- systemctl start 开启服务\n\n- systemctl stop 关闭服务\n\n- systemctl enable 开机自启动\n\n- systemctl status 查看状态\n\n## 软链接\n\n简单来说类似于windows中的快捷方式\n\n创建一个链接可以指向一个文件、文件夹\n\n语法： `ln -s 参数1 参数2`\n\n```bash\nhaxlock@ubuntu:~$ sudo ln -s /etc/apt ~/apt\nhaxlock@ubuntu:~$ ls -l\ntotal 12\ndrwxr-xr-x 3 root    root    4096 Feb 11 14:33 1panel-v1.10.24-lts-linux-amd64\nlrwxrwxrwx 1 root    root       8 Feb 14 08:16 apt -> /etc/apt\n-rw-rw-r-- 1 haxlock haxlock 3586 Jun 29  2020 bt-uninstall.sh\ndrwxrwxr-x 2 root    root    4096 Feb 14 05:35 test\nhaxlock@ubuntu:~$ cd apt\nhaxlock@ubuntu:~/apt$ ls\napt.conf.d   keyrings       preferences.d.save  sources.list.btbackup     sources.list.d  trusted.gpg.d\nauth.conf.d  preferences.d  sources.list        sources.list.curtin.orig  trusted.gpg\nhaxlock@ubuntu:~/apt$ cd ..\nhaxlock@ubuntu:~$ ls\n1panel-v1.10.24-lts-linux-amd64  apt  bt-uninstall.sh  test\nhaxlock@ubuntu:~$ \n```\n\n## date 查看时间\n\n格式`date [-d] [+格式化字符串]`\n\n```bash\nFri Feb 14 08:17:09 AM UTC 2025\nhaxlock@ubuntu:~$ date\nFri Feb 14 08:18:34 AM UTC 2025\nhaxlock@ubuntu:~$ date +%Y-%m-%d\n2025-02-14\nhaxlock@ubuntu:~$ date \"+%Y-%m-%d %H:%M:%S\"\n2025-02-14 08:20:32\n```\n\n- %Y年\n\n- y 年份后两位数字\n\n- m 月份\n\n- d 天\n\n- H 小时（24）\n\n- M 分钟\n\n- S 秒\n\n- s 自1970-01-01至今的时间\n\n```bash\n#查看明天的时间\nhaxlock@ubuntu:~$ date -d \"+1 day\"\nSat Feb 15 08:26:36 AM UTC 2025\n\n#去年\nhaxlock@ubuntu:~$ date -d \"-1 year\"\nWed Feb 14 08:28:10 AM UTC 2024haxlock@ubuntu:~$ date -d \"-1 year\"\nWed Feb 14 08:28:10 AM UTC 2024\n```\n\n### 修改linux时区\n\n#### 手动修改\n\n```bash\nhaxlock@ubuntu:~$ sudo rm -f /etc/localtime\nhaxlock@ubuntu:~$ sudo ln -s -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \nhaxlock@ubuntu:~$ date\nFri Feb 14 04:47:51 PM CST 2025\n```\n\n#### ntp自动校准\n\n```bash\nsudo systemctl start ntp\n```\n\n#### ntp手动校准\n\n```bash\nntpdate -u ntp.aliyun.com\n```\n\n指向一个ntp服务器即可\n\n## 查看ip地址\n\n```bash\nifconfig\n```\n\n主机名\n\n```bash\nhaxlock@ubuntu:~$ hostname\nubuntu\n```\n\n修改主机名\n\n```bash\nhostnamectl set-hostname [需要修改的主机名]\n```\n\n配置主机名映射\n\n先查看本机记录\n\n- Windows看 C:\\Windows\\System32\\drivers\\etc\\hosts\n\n- Linux看： /etc/hosts\n\n- 配置文件＋‘ip+主机名即可’\n\n再去联网去DNS服务器询问\n\n## 虚拟机静态ip配置\n\n- 首先在Vmware配置好网卡设置\n\n- 进入/etc/sysconfig/network-scripts/ifcfg-ens33文件，修改内容\n\n- 将BOOTPROTO后面DHCP改为static\n\n- 末尾加入如下内容：\n  \n  ```bash\n  IPADDR=\"192.168.88.130\" #IP地址\n  NETMASK=\"255.255.255.0\" #子网掩码\n  GATEWAY=\"192.168.88.2\" #网关与VMware设置一致\n  DNS1 =\"DNS为网关即可\"\n  ```\n\n## 网络传输\n\n### ping\n\n`ping [-c num] ip`\n\n```bash\nhaxlock@ubuntu:~$ ping -c 5 www.baidu.com\nPING www.baidu.com(2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77)) 56 data bytes\n64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=1 ttl=54 time=4.15 ms\n64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=2 ttl=54 time=4.71 ms\n64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=3 ttl=54 time=4.86 ms\n64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=4 ttl=54 time=4.59 ms\n64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=5 ttl=54 time=4.59 ms\n\n--- www.baidu.com ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4005ms\nrtt min/avg/max/mdev = 4.152/4.582/4.862/0.237 ms\n```\n\n### wget\n\n非交互式文件下载器\n\n`wget [-b] url`\n\n- \\-b 后台下载，日志会写道wget-log中\n\n- url下载链接\n\n### curl\n\n发起http网络请求，可用于下载文件、获取信息\n\n`curl [-o] url`\n\n- \\-o 用于下载文件\n\n- url请求的地址\n\n## 端口\n\n设备与外界通信交流的出入口\n\n分为物理端口以及虚拟端口\n\n- 物理端口：也称为接口，如USB,RJ45网口，HDMI\n\n- 虚拟端口：指的计算机内部端口，用于操作系统与外界交互使用\n\nLinux支持65535个端口，这6万多个端口可以分为3类使用\n\n- 公认端口：1-1023,通常为一些系统内置或者知名程序预留，例如ssh的22，https的443\n\n- 注册端口：1024-49151 ，通常可以随意使用，用于松散地绑定一些程序\\服务\n\n- 动态端口：49152-65535，也通常不绑定程序，而是程序对外进行网络链接时候，用于临时使用\n\n### nmap查看端口占用情况\n\n```bash\nsudo apt install nmap -y\nnmap 127.0.0.1\n```\n\n会扫描某个ip开放地端口\n\n### netstat查看指定端口占用情况\n\nnetstat -anp|grep 端口号\n\n安装：\n\n```bash\nsudo apt install net-tools\n```\n\n使用：\n\n```bash\nhaxlock@root:~$ netstat -anp|grep 3001\n(Not all processes could be identified, non-owned process info\n will not be shown, you would have to be root to see it all.)\ntcp6       0      0 :::3001                 :::*                    LISTEN      6550/java     \n```\n\n可以看到某端口在被哪个端口占用，进程号(PID)是多少\n\n## 进程管理\n\n也可以说是**任务管理器**\n\n### 查看进程\n\n```bash\nps [-e -f]\n```\n\n- -e 显示所有的进程\n\n- -f 以完全格式化的形式展示信息\n\n一般来说，如果ps -ef就是列出所有进程的全部信息\n\n```bash\nhaxlock@root:~$ ps -f\nUID          PID    PPID  C STIME TTY          TIME CMD\nhaxlock    96215   96214  0 14:49 pts/0    00:00:00 -bash\nhaxlock    96232   96215 99 14:50 pts/0    00:00:00 ps -f\n```\n\n- UID:进程所属的用户ID\n\n- PID: 进程的进程号ID\n\n- PPID: 进程的父ID\n\n- C:此进程的CPU占用比\n\n- STIME：进程的启动时间\n\n- TTY：启动此进程的终端序号，？表示非终端启动\n\n- TIME：进程占用CPU的时间\n\n- CMD：进程的启动路径或运行路径\n\n如果想确认跟踪一个进程的信息\n\n可以：\n\n```bash\nps -ef | grep [进程名]\n```\n\n### 关闭进程\n\n```bash\nkill [-9] 进程ID\n```\n\n其中 **-9** 代表强制关闭\n\n## top 主机状态详解\n\n```bash\ntop\n```\n\n查看主机的各种状态参数，默认每5s刷新一次\n\n内容较多，此处可当工具查找\n\n**top命令经常用来监控linux的系统状况，是常用的性能分析工具，能够实时显示系统中各个进程的资源占用情况。**\n\n### **常用参数**\n\ntop的使用方式 top [-d number] | top [-bnp]\n\n| 参数        | 含义                                          |\n| --------- | ------------------------------------------- |\n| -d number | number代表秒数，表示top命令显示的页面更新一次的间隔 (default=5s) |\n| -b        | 以批次的方式执行top                                 |\n| -n        | 与-b配合使用，表示需要进行几次top命令的输出结果                  |\n| -p        | 指定特定的pid进程号进行观察                             |\n\n**top命令显示的页面还可以输入以下按键执行相应的功能（注意大小写区分的）**\n\n| 参数  | 含义                      |\n| --- | ----------------------- |\n| ？   | 显示在top当中可以输入的命令         |\n| P   | 以CPU的使用资源排序显示           |\n| M   | 以内存的使用资源排序显示            |\n| N   | 以pid排序显示                |\n| T   | 由进程使用的时间累计排序显示          |\n| k   | 给某一个pid一个信号,可以用来杀死进程(9) |\n| r   | 给某个pid重新定制一个nice值（即优先级) |\n| q   | 退出top（用ctrl+c也可以退出top）  |\n\n### **top各输出参数含义**\n\n```bash\ntop - 15:23:39 up 7 days,  7:57,  2 users,  load average: 0.00, 0.01, 0.00\nTasks: 249 total,   1 running, 248 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.1 us,  0.2 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st \nMiB Mem :   7894.1 total,    367.4 free,   5022.1 used,   2813.0 buff/cache     \nMiB Swap:   2048.0 total,   2047.7 free,      0.3 used.   2872.0 avail Mem \n\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                 \n  81232 root      20   0  315932   9472   7936 S   0.3   0.1   2:52.54 vmtoolsd                                                \n  96087 root      20   0       0      0      0 I   0.3   0.0   0:02.13 kworker/3:2-events                                      \n  96214 haxlock   20   0   15124   7088   5120 S   0.3   0.1   0:00.17 sshd                                                    \n  96302 haxlock   20   0   11944   5888   3712 R   0.3   0.1   0:00.02 top                                                     \n      1 root      20   0   22624  13696   9472 S   0.0   0.2   1:22.07 systemd                                                 \n      2 root      20   0       0      0      0 S   0.0   0.0   0:00.89 kthreadd         \n```\n\n#### 一、top前五条信息解释\n\n```bash\ntop - 15:23:39 up 7 days,  7:57,  2 users,  load average: 0.00, 0.01, 0.00\n```\n\n| 内容                             | 含义                                            |\n| ------------------------------ | --------------------------------------------- |\n| 14:49:28                       | 表示当前时间                                        |\n| up 1:33                        | 系统远行时间，格式为时：分                                 |\n| 1 user                         | 当前登陆用户数                                       |\n| load average: 0.00, 0.00, 0.00 | 系统负载，即任务队列的平均长度。 三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值 |\n\n```bash\nTasks: 249 total,   1 running, 248 sleeping,   0 stopped,   0 zombi\n```\n\n| 内容              | 含义       |\n| --------------- | -------- |\n| Tasks: 80 total | 进程总数     |\n| 2 running       | 正在运行的进程数 |\n| 78 sleeping     | 睡眠的进程数   |\n| 0 stopped       | 停止的进程数   |\n| 0 zombie        | 僵尸进程数    |\n\n```bash\n%Cpu(s):  0.1 us,  0.2 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 s\n```\n\n| 内容       | 含义                                |\n| -------- | --------------------------------- |\n| 0.0%us   | 用户空间占用CPU百分比                      |\n| 0.0%sy   | 内核空间占用CPU百分比                      |\n| 0.0%ni   | 用户进程空间内改变过优先级的进程占用CPU百分比          |\n| 100.0%id | 空闲CPU百分比                          |\n| 0.0%wa   | 等待输入输出的CPU时间百分比                   |\n| 0.0%hi   | 硬中断（Hardware IRQ）占用CPU的百分比        |\n| 0.0%si   | 软中断（Software Interrupts）占用CPU的百分比 |\n| 0.0 st   | 用于有虚拟cpu的情况，用来指示被虚拟机偷掉的cpu时间      |\n\n```bash\nMem: 1922488k total, 406936k used, 1515552k free, 11940k buffers\n```\n\n| 内容             | 含义         |\n| -------------- | ---------- |\n| 1922488k total | 物理内存总量     |\n| 406936k used   | 使用的物理内存总量  |\n| 1515552k free  | 空闲内存总量     |\n| 11940k buffers | 用作内核缓存的内存量 |\n\n```bash\nSwap: 835576k total, 0k used, 835576k free, 111596k cached\n```\n\n| 内容             | 含义       |\n| -------------- | -------- |\n| 835576k total  | 交换区总量    |\n| 0k used        | 使用的交换区总量 |\n| 835576k free   | 空闲交换区总量  |\n| 111596k cached | 缓冲的交换区总量 |\n\n#### 二、进程信息\n\n| 列名      | 含义                                        |\n| ------- | ----------------------------------------- |\n| PID     | 进程id                                      |\n| USER    | 进程所有者的用户名                                 |\n| PR      | 优先级                                       |\n| NI      | nice值。负值表示高优先级，正值表示低优先级                   |\n| VIRT    | 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES            |\n| RES     | 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA      |\n| SHR     | 共享内存大小，单位kb                               |\n| S       | 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程 |\n| %CPU    | 上次更新到现在的CPU时间占用百分比                        |\n| %MEM    | 进程使用的物理内存百分比                              |\n| TIME+   | 进程使用的CPU时间总计，单位1/100秒                     |\n| COMMAND | 命令名/命令行                                   |\n\n## 环境变量\n\n一系列命令本质上就是一个个可执行文件。\n\n例如：cd本体就是/usr/bin/cd这个文件下的文件\n\n查看当前环境变量：\n\n```bash\nenv\n```\n\n### PATH\n\n```bash\nhaxlock@root:~$ env | grep PATH\nCLASSPATH=.:/usr/local/jdk21/lib\nPATH=.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n```\n\n可以得到这么一些键值对，其实从本以上来理解，查询环境变量，本就是通过在**PATH键对应的值**中去查找相应的命令环境\n\n会在值中挨个去搜索环境变量的值，直到寻找到相应的内容。\n\n### $符号\n\n$是用于取\"变量\"的值。\n\n取得环境变量的值可以通过语法：$来获得\n\n例如：\n\n```bash\nhaxlock@root:~$ echo $PATH\n.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n```\n\n### 作用\n\n如果你给你自己开发的程序记录在环境变量中，那么也可以通过你自己设定的命令行来快速地执行这个环境变量\n\n#### 自行设置方法：\n\n- 临时设置：语法：export 变量名称=变量值\n","slug":"linux学习/linux的一些基础命令","published":1,"updated":"2025-02-23T11:07:54.254Z","comments":1,"layout":"post","photos":[],"_id":"cm7n0r3at0001tqvy4hpcaaz7","content":"<h1 id=\"这是一篇关于linux基本命令以及作用的概述和汇总学习\"><a href=\"#这是一篇关于linux基本命令以及作用的概述和汇总学习\" class=\"headerlink\" title=\"这是一篇关于linux基本命令以及作用的概述和汇总学习\"></a>这是一篇关于linux基本命令以及作用的概述和汇总学习</h1><h2 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h2><h3 id=\"ls命令\"><a href=\"#ls命令\" class=\"headerlink\" title=\"ls命令\"></a>ls命令</h3><p>ls命令用于列出目录下的内容</p>\n<p>例如输出结果可能如下：</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">back_data  DDNS-go  ha  server  test.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ls参数-选项\"><a href=\"#ls参数-选项\" class=\"headerlink\" title=\"ls参数-选项\"></a>ls参数-选项</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> [-a -l -h] [linux路径]</span><br></pre></td></tr></table></figure>\n\n<p>这是ls 可选参数的基本概况</p>\n<p>以下是三种参数对应的输出情况：</p>\n<h4 id=\"ls-a\"><a href=\"#ls-a\" class=\"headerlink\" title=\"ls -a\"></a>ls -a</h4><p>会输出项目下所有文件夹下所有文件情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span> -a</span><br><span class=\"line\">.              .bash_history  DDNS-go     .profile                   test.txt    .Xauthority</span><br><span class=\"line\">..             .bash_logout   ha          .pyenv                     .vim        .xsessionrc</span><br><span class=\"line\">back_data      .bashrc        .<span class=\"built_in\">local</span>      server                     .viminfo    .zshrc</span><br><span class=\"line\">.bash_aliases  .cache         .oh-my-zsh  .sudo_as_admin_successful  .wget-hsts</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ls-l\"><a href=\"#ls-l\" class=\"headerlink\" title=\"ls -l\"></a>ls -l</h4><p>会以列表的形式，详细说明目录下文件的具体信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span> -l</span><br><span class=\"line\">total 20</span><br><span class=\"line\">drwxrwxr-x 13 root    root    4096  1月 23 13:38 back_data</span><br><span class=\"line\">drwxr-xr-x  2 root    root    4096  1月 10 07:46 DDNS-go</span><br><span class=\"line\">drwxr-xr-x  2 root    root    4096  1月 10 13:47 ha</span><br><span class=\"line\">drwxr-xr-x  6 root    root    4096  1月  9 17:51 server</span><br><span class=\"line\">-rw-rw-r--  1 haxlock haxlock   20  2月  6 10:26 test.txt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ls-h\"><a href=\"#ls-h\" class=\"headerlink\" title=\"ls -h\"></a>ls -h</h4><ul>\n<li><p>-h 表示易于阅读的形式，列出文件的大小，如K,M,G</p>\n</li>\n<li><p>[attention!] -h 必须要搭配 -l 使用，否则无效、</p>\n</li>\n</ul>\n<p>下面为演示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span> -lh</span><br><span class=\"line\">total 20K</span><br><span class=\"line\">drwxrwxr-x 13 root    root    4.0K  1月 23 13:38 back_data</span><br><span class=\"line\">drwxr-xr-x  2 root    root    4.0K  1月 10 07:46 DDNS-go</span><br><span class=\"line\">drwxr-xr-x  2 root    root    4.0K  1月 10 13:47 ha</span><br><span class=\"line\">drwxr-xr-x  6 root    root    4.0K  1月  9 17:51 server</span><br><span class=\"line\">-rw-rw-r--  1 haxlock haxlock   20  2月  6 10:26 test.txt</span><br></pre></td></tr></table></figure>\n\n<p>可以看到这是显示出来了文件的大小，如4.0K</p>\n<h3 id=\"ls-结尾\"><a href=\"#ls-结尾\" class=\"headerlink\" title=\"ls 结尾\"></a>ls 结尾</h3><p>ls -a -l -h 都可以组合使用，具体需要根据实际场景进行变更，这是一个非常方便的快捷键用于查看当前路径下的所有文件情况。</p>\n<h2 id=\"cd-pwd-命令\"><a href=\"#cd-pwd-命令\" class=\"headerlink\" title=\"cd &#x2F; pwd 命令\"></a>cd &#x2F; pwd 命令</h2><h4 id=\"cd-（Change-Directory）\"><a href=\"#cd-（Change-Directory）\" class=\"headerlink\" title=\"cd （Change Directory）\"></a>cd （Change Directory）</h4><p>cd 主要用于切换当前操作目录，例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ </span><br></pre></td></tr></table></figure>\n\n<p>当前就是在&#x2F;home&#x2F;haxlock目录下</p>\n<p>那么我想切换到别的目录，这时需要用到cd命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">cd</span> /etc/</span><br><span class=\"line\">haxlock@armbian:/etc$ </span><br></pre></td></tr></table></figure>\n\n<p>cd 后面接 &#x2F;etc&#x2F;就切换到了 <strong>根目录下</strong>  的 <strong>etc</strong> 文件夹下的路径</p>\n<blockquote>\n<p>注意！</p>\n<p>其中最头部的 ‘&#x2F;’是代表linux的根目录，一一定不能少    </p>\n</blockquote>\n<p>如果直接就写一个cd，那么会快速返回用户目录下的home目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:/etc$ <span class=\"built_in\">cd</span></span><br><span class=\"line\">haxlock@armbian:~$ </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pwd-Print-Word-Directory\"><a href=\"#pwd-Print-Word-Directory\" class=\"headerlink\" title=\"pwd (Print Word Directory)\"></a>pwd (Print Word Directory)</h4><p>pwd用于打印当前的工作目录路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">pwd</span></span><br><span class=\"line\">/home/haxlock</span><br></pre></td></tr></table></figure>\n\n<p>可见控制台可以输出当前工作目录</p>\n<h2 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h2><h3 id=\"mkdir-创建目录命令\"><a href=\"#mkdir-创建目录命令\" class=\"headerlink\" title=\"mkdir 创建目录命令\"></a>mkdir 创建目录命令</h3><p>通过 mkdir [-p] Linux路径</p>\n<ul>\n<li>参数 <strong>必填</strong> 表示路径，就是要创建文件夹的路径，相对和绝对均可</li>\n<li>-p是为了创建多个层级的目录</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">mkdir</span> <span class=\"built_in\">test</span></span><br><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">back_data  DDNS-go  ha  server  <span class=\"built_in\">test</span>  test.txt</span><br></pre></td></tr></table></figure>\n\n<p>可见此时新出现一个test文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">cd</span> <span class=\"built_in\">test</span></span><br><span class=\"line\">haxlock@armbian:~/test$ </span><br></pre></td></tr></table></figure>\n\n<p>可以进入这个新文件夹</p>\n<p>我想快速在home目录下创建文件怎么办呢？</p>\n<p>可以用这个快捷命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">mkdir</span> ~/1</span><br><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">1  back_data  DDNS-go  ha  server  <span class=\"built_in\">test</span>  test.txt</span><br></pre></td></tr></table></figure>\n\n<p>可见在home路径下创建了一个新的‘1’的文件夹</p>\n<h3 id=\"mkdir-创建多个层级目录\"><a href=\"#mkdir-创建多个层级目录\" class=\"headerlink\" title=\"mkdir 创建多个层级目录\"></a>mkdir 创建多个层级目录</h3><p>此时需要使用-p命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">mkdir</span> -p 2/3/4</span><br><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">1  2  back_data  DDNS-go  ha  server  <span class=\"built_in\">test</span>  test.txt</span><br><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">cd</span> 2/3/4/</span><br><span class=\"line\">haxlock@armbian:~/2/3/4$ <span class=\"built_in\">pwd</span></span><br><span class=\"line\">/home/haxlock/2/3/4</span><br><span class=\"line\">haxlock@armbian:~/2/3/4$ </span><br></pre></td></tr></table></figure>\n\n<p>可以创建多层路径</p>\n<h2 id=\"touch、cat、more文件操作命令\"><a href=\"#touch、cat、more文件操作命令\" class=\"headerlink\" title=\"touch、cat、more文件操作命令\"></a>touch、cat、more文件操作命令</h2><h3 id=\"touch-创建文件\"><a href=\"#touch-创建文件\" class=\"headerlink\" title=\"touch 创建文件\"></a>touch 创建文件</h3><p>touch Linux路径</p>\n<p>我想创建一个test.txt文件</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">touch</span> test.txt</span><br><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">back_data  DDNS-go  ha  server  test.txt</span><br></pre></td></tr></table></figure>\n\n<p>创建了一个test.txt文件</p>\n<blockquote>\n<p>可以通过颜色分别文件和文件夹，有色的是文件夹，白色的是文件</p>\n</blockquote>\n<h3 id=\"cat、more查看文件内容\"><a href=\"#cat、more查看文件内容\" class=\"headerlink\" title=\"cat、more查看文件内容\"></a>cat、more查看文件内容</h3><h4 id=\"cat查看\"><a href=\"#cat查看\" class=\"headerlink\" title=\"cat查看\"></a>cat查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">cat</span> test.txt </span><br><span class=\"line\">这是一个测试文件</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"more查看\"><a href=\"#more查看\" class=\"headerlink\" title=\"more查看\"></a>more查看</h4><p>more与cat不同的是</p>\n<ul>\n<li><p>cat是直接把所有内容显示出来</p>\n</li>\n<li><p>more是支持翻页的，可以一页一页显（空格翻页）</p>\n</li>\n</ul>\n<h2 id=\"cp-mv-rm命令\"><a href=\"#cp-mv-rm命令\" class=\"headerlink\" title=\"cp-mv-rm命令\"></a>cp-mv-rm命令</h2><h4 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h4><p>cp（copy）用于复制文件、文件夹，主要用途在于修改某文件前将他提前备份。</p>\n<p><strong>cp [-r] 路径1 路径2</strong></p>\n<p>例如我想把&#x2F;home&#x2F;haxlock下的test.txt复制到根目录下，那么命令就是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /home/haxlock/test.txt /</span><br></pre></td></tr></table></figure>\n\n<p>其中-r是当复制文件夹时候使用的，表示递归</p>\n<h4 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h4><p>mv（move）用于移动文件或文件夹</p>\n<p><strong>mv 参数1 参数2</strong></p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> /home/haxlock/test.txt /</span><br></pre></td></tr></table></figure>\n\n<p>把路径下的test.txt移动到根目录下</p>\n<h4 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h4><h5 id=\"基础指令\"><a href=\"#基础指令\" class=\"headerlink\" title=\"基础指令\"></a>基础指令</h5><p>rm是用于删除的指令</p>\n<p>rm [-r -f] 参数1 参数2 参数3 ….参数n </p>\n<p>其中，-r表示用于删除文件夹</p>\n<p>-f 表示force,强制删除文件夹，不会弹出提示</p>\n<p>后面多个参数代表多个您需要删除的文件。</p>\n<p>例如我想删除&#x2F;home&#x2F;haxlock路径下的‘1’文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -r /home/haxlock/1</span><br></pre></td></tr></table></figure>\n\n<p>这时候会弹出提示您是否要删除？然后确认即可</p>\n<p>如果您加了 -f 那么就不会弹出提示</p>\n<p>大部分情况下不建议使用-f 参数，因为十分危险。</p>\n<h5 id=\"搭配通配符使用\"><a href=\"#搭配通配符使用\" class=\"headerlink\" title=\"搭配通配符使用\"></a>搭配通配符使用</h5><ul>\n<li><p>*符号就代表通配符，可以匹配任意内容</p>\n</li>\n<li><p>test* 表示匹配所有以test开头的内容</p>\n</li>\n<li><p>*test 表示所有以test结尾的内容</p>\n</li>\n<li><p>*test* 表示所有包含test的内容</p>\n</li>\n<li><p>删除所有以test开头的文件和文件夹：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -r <span class=\"built_in\">test</span>*</span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"which-find-命令\"><a href=\"#which-find-命令\" class=\"headerlink\" title=\"which- find 命令\"></a>which- find 命令</h2><h3 id=\"which\"><a href=\"#which\" class=\"headerlink\" title=\"which\"></a>which</h3><p>which用于查找命令对应的文件</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> <span class=\"built_in\">pwd</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>只针对命令文件查找 </p>\n</blockquote>\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><h4 id=\"按照文件名查找\"><a href=\"#按照文件名查找\" class=\"headerlink\" title=\"按照文件名查找\"></a>按照文件名查找</h4><p>find <strong>起始路径</strong> -name <strong>“被查找文件名”</strong></p>\n<p>由于是全盘搜索</p>\n<p>命令应当这样使用:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> find / -name <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以搭配通配符使用，详情请看[搭配通配符使用](##### 搭配通配符使用)</p>\n<h4 id=\"按照大小查找\"><a href=\"#按照大小查找\" class=\"headerlink\" title=\"按照大小查找\"></a>按照大小查找</h4><p>find 起始路径 -size + | n[kMG]</p>\n<ul>\n<li><p>+ - 表示大于和小于</p>\n</li>\n<li><p>n表示大小数字</p>\n</li>\n<li><p>kMG表示单位，k(小写字母)表示kb，M为MB,G为GB</p>\n</li>\n</ul>\n<p>例如：</p>\n<ul>\n<li><p>查找小于10KB文件：find &#x2F; -size -10k</p>\n</li>\n<li><p>大于100MB文件： find &#x2F; -size + 100M</p>\n</li>\n<li><p>查找大于1GB文件: find &#x2F; -size +1G</p>\n</li>\n</ul>\n<h2 id=\"grep-wc-管道符号\"><a href=\"#grep-wc-管道符号\" class=\"headerlink\" title=\"grep-wc 管道符号\"></a>grep-wc 管道符号</h2><h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><p>grep [-n] 关键字 文件路径</p>\n<ul>\n<li><p>-n 可选表示结果中显示匹配的行的行号</p>\n</li>\n<li><p>关键字 表示要过滤的关键字，用“”包围</p>\n</li>\n<li><p>文件路径，可作为内容的输入端口</p>\n</li>\n</ul>\n<p>例如有一个test.txt文件，内容为：</p>\n<p>这是一个测试文件</p>\n<p>这是两个测试文件</p>\n<p>这是三个测试文件</p>\n<p>查找第一行，一个</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ grep <span class=\"string\">&quot;一个&quot;</span> test.txt </span><br><span class=\"line\">这是一个测试文件</span><br></pre></td></tr></table></figure>\n\n<p>一个被标红，输入查找结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ grep -n <span class=\"string\">&quot;一个&quot;</span> test.txt </span><br><span class=\"line\">1:这是一个测试文件</span><br></pre></td></tr></table></figure>\n\n<p>加入-n参数可以输入行数</p>\n<h3 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a>wc</h3><p>wc [-c -m -l -w]  文件路径</p>\n<p>用于统计文件的行数、单词数量等</p>\n<ul>\n<li><p>-c 统计bytes数量</p>\n</li>\n<li><p>-m 统计字符数量</p>\n</li>\n<li><p>-l 统计行数</p>\n</li>\n<li><p>-w 统计单词数量</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">wc</span> test.txt </span><br><span class=\"line\"> 5  3 77 test.txt</span><br></pre></td></tr></table></figure>\n\n<p>5代表五行，3代表个3个单词，77个字节</p>\n<h3 id=\"‘-’-管道符\"><a href=\"#‘-’-管道符\" class=\"headerlink\" title=\"‘|’ 管道符\"></a>‘|’ 管道符</h3><p><strong>表示把管道符后左边的命令结果，作为右边的命令的输入</strong></p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">cat</span> test.txt | <span class=\"built_in\">wc</span> -l</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n<p>左边cat输入的结果作为右边wc -l命令的输入</p>\n<p>输出结果5，代表中国文件有五行内容</p>\n<p>又例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span> -l /usr/bin | <span class=\"built_in\">wc</span> -l</span><br><span class=\"line\">1180</span><br></pre></td></tr></table></figure>\n\n<p>可以用于统计文件的数量</p>\n<h2 id=\"echo、tail和重定向符\"><a href=\"#echo、tail和重定向符\" class=\"headerlink\" title=\"echo、tail和重定向符\"></a>echo、tail和重定向符</h2><h3 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h3><p>echo 输出的内容</p>\n<p><strong>可以用echo命令在命令行输出指定内容</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;hello word&quot;</span></span><br><span class=\"line\">hello word</span><br></pre></td></tr></table></figure>\n\n<p>如果想输出‘pwd’的结果呢？</p>\n<p>我们可以：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">echo</span> `<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\">/home/haxlock</span><br></pre></td></tr></table></figure>\n\n<p>用 `pwd` 即可实现这个功能，被  &#96; 所包围的会输出它的结果</p>\n<h3 id=\"重定向符\"><a href=\"#重定向符\" class=\"headerlink\" title=\"重定向符\"></a>重定向符</h3><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"&gt;\"></a>&gt;</h4><p>&gt; 把左侧命令的结果覆盖写入符号右侧的文件中</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;覆盖测试&quot;</span> &gt; test.txt </span><br><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">cat</span> test.txt </span><br><span class=\"line\">覆盖测试</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"&gt;&gt;\"></a>&gt;&gt;</h4><p>&gt;&gt; 表示把左侧命令结果追加写入符号右侧的文件中</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;我嘞个都！&quot;</span> &gt;&gt; test.txt </span><br><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">cat</span> test.txt </span><br><span class=\"line\">覆盖测试</span><br><span class=\"line\">我嘞个都！</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tail-命令\"><a href=\"#tail-命令\" class=\"headerlink\" title=\"tail 命令\"></a>tail 命令</h3><p>tail [-f -num] Linux路径</p>\n<p>查看文件尾部内容，<strong>跟踪文件的是最新更改</strong></p>\n<ul>\n<li><p>Linux路径表示被跟踪的路径</p>\n</li>\n<li><p>-f 表示持续跟踪</p>\n</li>\n<li><p>-num 表示查看尾部多少行，默认为10</p>\n</li>\n</ul>\n<p><strong>查看尾部10行，追踪文件更新</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">tail</span> -5 test.txt </span><br><span class=\"line\">sys</span><br><span class=\"line\">tmp</span><br><span class=\"line\">usr</span><br><span class=\"line\">var</span><br><span class=\"line\">www</span><br></pre></td></tr></table></figure>\n\n<p>如果用 -f参数，那么会一直跟踪文件的更新情况</p>\n<h2 id=\"vim-vi编辑器\"><a href=\"#vim-vi编辑器\" class=\"headerlink\" title=\"vim\\vi编辑器\"></a>vim\\vi编辑器</h2><p>vim兼容所有vi功能，后续使用vim就行，无所谓</p>\n<ul>\n<li><p>若文件不存在，则创建文件</p>\n</li>\n<li><p>若文件已存在，则直接编辑文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim hello.txt</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>命令模式</td>\n<td><code>i</code></td>\n<td>在当前光标位置进入<code>输入模式</code></td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>a</code></td>\n<td>在当前光标位置后进入<code>输入模式</code></td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>I</code></td>\n<td>在行开头进入<code>输入模式</code></td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>A</code></td>\n<td>在行结尾进入<code>输入模式</code></td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>o</code></td>\n<td>在光标下一行进入<code>输入模式</code></td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>O</code></td>\n<td>在光标上一行进入<code>输入模式</code></td>\n</tr>\n<tr>\n<td>输入模式</td>\n<td><code>esc</code></td>\n<td>esc进入<code>命令模式</code></td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>上,k</code></td>\n<td>向上移动光标</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>下,j</code></td>\n<td>向下移动光标</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>左,h</code></td>\n<td>向左移动光标</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>右,l</code></td>\n<td>向右移动光标</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>0</code></td>\n<td>移动光标到当前行头</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>$</code></td>\n<td>移动光标到当前行尾</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>pgUp</code></td>\n<td>上翻页</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>pgDn</code></td>\n<td>下翻页</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>/</code></td>\n<td>搜索模式</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>n</code></td>\n<td>向下继续搜索</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>N</code></td>\n<td>向上继续搜索</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>dd</code></td>\n<td>删除当前行</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>ndd</code></td>\n<td>删除当前行下面的n行</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>yy</code></td>\n<td>复制当前行</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>nyy</code></td>\n<td>复制n行</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>p</code></td>\n<td>粘贴内容</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>u</code></td>\n<td>撤销修改</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>ctrl + r</code></td>\n<td>反向撤销修改</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>gg</code></td>\n<td>跳到首行</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>G</code></td>\n<td>跳到行尾</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>dG</code></td>\n<td>从当前行，向下全部删除</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>dgg</code></td>\n<td>从当前行开始，向上全部删除</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>d$</code></td>\n<td>从当前光标开始，删除到本行的结尾</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>d0</code></td>\n<td>从当前光标开始，删除到本行的开头</td>\n</tr>\n<tr>\n<td>底线命令模式</td>\n<td><code>:wq</code></td>\n<td>保存并退出</td>\n</tr>\n<tr>\n<td>底线命令模式</td>\n<td><code>:q</code></td>\n<td>退出</td>\n</tr>\n<tr>\n<td>底线命令模式</td>\n<td><code>:q!</code></td>\n<td>强制退出</td>\n</tr>\n<tr>\n<td>底线命令模式</td>\n<td><code>:w</code></td>\n<td>保存</td>\n</tr>\n<tr>\n<td>底线命令模式</td>\n<td><code>:set nu</code></td>\n<td>显示行号</td>\n</tr>\n<tr>\n<td>底线命令模式</td>\n<td><code>:set paste</code></td>\n<td>设置粘贴模式（为了确保粘贴格式没问题）</td>\n</tr>\n</tbody></table>\n<h2 id=\"关于为什么ubuntu、debian等使用su-root无法进入root模式的原因\"><a href=\"#关于为什么ubuntu、debian等使用su-root无法进入root模式的原因\" class=\"headerlink\" title=\"关于为什么ubuntu、debian等使用su - root无法进入root模式的原因\"></a>关于为什么ubuntu、debian等使用su - root无法进入root模式的原因</h2><p>由于ubuntu、debian等发行版操作系统一般默认不给你root账户权限，因此你输入这个的时候，可能会报错如下:</p>\n<p>su(switch user)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ su - root</span><br><span class=\"line\">Password: </span><br><span class=\"line\">su: Authentication failure</span><br></pre></td></tr></table></figure>\n\n<p>如果您需要进入root账户，需要通过以下命令进入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">sudo</span> -i</span><br><span class=\"line\">[<span class=\"built_in\">sudo</span>] password <span class=\"keyword\">for</span> haxlock: </span><br><span class=\"line\">root@armbian:~# </span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> su</span><br></pre></td></tr></table></figure>\n\n<p>也可以进入root账户</p>\n<h3 id=\"切换账户的方式\"><a href=\"#切换账户的方式\" class=\"headerlink\" title=\"切换账户的方式\"></a>切换账户的方式</h3><p>su - 用户名</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@armbian:~# su - haxlock</span><br><span class=\"line\">haxlock@armbian:~$ </span><br></pre></td></tr></table></figure>\n\n<p>如果你切换完账户后，通过<code>exit</code> 可以切换回上一个用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@armbian:/home/haxlock# <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">haxlock@armbian:~$ </span><br></pre></td></tr></table></figure>\n\n<p>还有使用<code>ctrl+d</code> 也可以切换回上一个用户</p>\n<h2 id=\"Linux-用户以及用户组\"><a href=\"#Linux-用户以及用户组\" class=\"headerlink\" title=\"Linux 用户以及用户组\"></a>Linux 用户以及用户组</h2><p>Linux系统可以</p>\n<ul>\n<li><p>配置多个用户</p>\n</li>\n<li><p>配置多个用户组</p>\n</li>\n<li><p>用户可以加入多个用户组</p>\n</li>\n</ul>\n<h3 id=\"用户组\"><a href=\"#用户组\" class=\"headerlink\" title=\"用户组\"></a>用户组</h3><ul>\n<li>创建</li>\n</ul>\n<p>groupadd 用户组名</p>\n<ul>\n<li>删除</li>\n</ul>\n<p>groupdel 用户组名</p>\n<h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><ul>\n<li>创建用户</li>\n</ul>\n<p><code>useradd [-g -d] 用户名</code></p>\n<ol>\n<li><p>选项： -g指定用户组，不指定-g，会创建同名组并自动加入，指定-g需要组以及存在，如果存在用户组，必须使用-g</p>\n</li>\n<li><p>选项：-d指定用户HOME路径，如果不指定就默认在&#x2F;home&#x2F;用户名下</p>\n</li>\n</ol>\n<ul>\n<li>删除用户</li>\n</ul>\n<p><code>userdel [-r] 用户名</code></p>\n<p>    1. 选项： -r，删除用户的HOME目录，不适用-r，删除用户时，HOME会被保留</p>\n<ul>\n<li>查看用户所属组</li>\n</ul>\n<p><code>id [用户名]</code></p>\n<p>    1. 参数：用户名，被查看的用户，如果不提供则查看自身</p>\n<ul>\n<li>修改用户所属组</li>\n</ul>\n<p><code>usermod -aG 用户组 用户名</code></p>\n<p>指定用户加入指定的用户组</p>\n<h3 id=\"getent\"><a href=\"#getent\" class=\"headerlink\" title=\"getent\"></a>getent</h3><p>getent passwd</p>\n<p>查看当前系统中有哪些用户</p>\n<p>getent group</p>\n<p>查看当前系统有哪些组</p>\n<h2 id=\"查看权限管控\"><a href=\"#查看权限管控\" class=\"headerlink\" title=\"查看权限管控\"></a>查看权限管控</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span> -l</span><br><span class=\"line\">total 20</span><br><span class=\"line\">drwxrwxr-x 13 root    root    4096  1月 23 13:38 back_data</span><br><span class=\"line\">drwxr-xr-x  2 root    root    4096  1月 10 07:46 DDNS-go</span><br><span class=\"line\">drwxr-xr-x  2 root    root    4096  1月 10 13:47 ha</span><br><span class=\"line\">drwxr-xr-x  6 root    root    4096  1月  9 17:51 server</span><br><span class=\"line\">-rw-rw-r--  1 haxlock haxlock  155  2月  7 08:45 test.txt</span><br></pre></td></tr></table></figure>\n\n<p>来分析一下头部</p>\n<p>drwxrwxr-x</p>\n<ul>\n<li><p>d表示这是一个文件夹，-为文件,l表示软链接</p>\n</li>\n<li><p>rwx这三个是所属用户权限，表示有r有w有x</p>\n</li>\n<li><p>rwx后三个表示是所属用户组的权限,有r有w有x</p>\n</li>\n<li><p>r-x最后三个表示洽谈用户权限，有r无w有x</p>\n</li>\n</ul>\n<p>r代表读权限，w代表可写，x代表可执行(excute)</p>\n<h2 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h2><p>可以通过chmod命令，修改，文件、文件夹的权限信息</p>\n<blockquote>\n<p>只有文件、文件夹的所属用户或者root用户可以修改</p>\n</blockquote>\n<p><strong>语法： chmod [-R] 权限 权限 文件或者文件夹</strong></p>\n<ul>\n<li><p>-R 对文件夹内全部内容应用同样的擦欧总</p>\n</li>\n<li><p>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x hello.txt 把权限修改为rwxr-x–x</p>\n</li>\n<li><ul>\n<li>其中u代表user所属先前，g表示group组权限，o表示其他用户权限</li>\n</ul>\n</li>\n<li><p>chmod -r u&#x3D;rwx,g&#x3D;rx,o&#x3D;x test 将问及那家tst以及文件夹内全部内容权限设置为wrxr-r–x</p>\n</li>\n</ul>\n<p>权限也可以用数字来替代</p>\n<p>用三位数字表示 <strong>r为4,w为2,x为1</strong></p>\n<ul>\n<li><p>0:无任何权限 —</p>\n</li>\n<li><p>1:仅x，–x</p>\n</li>\n<li><p>2:仅w, -w-</p>\n</li>\n<li><p>3:wx, -wx</p>\n</li>\n<li><p>4:仅，r</p>\n</li>\n<li><p>5:r-x,r和x权限, r-x</p>\n</li>\n<li><p>6:有r和w权限，rw-</p>\n</li>\n<li><p>7:全部权限,rwx</p>\n</li>\n</ul>\n<p><strong>简单说就是二进制的和</strong></p>\n<h2 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h2><p>修改文件、文件夹所属用户和用户组</p>\n<p><strong>此命令只可root执行</strong></p>\n<p>语法：<code>chown [-R] [用户][:][用户组] 文件或者文件夹</code></p>\n<h2 id=\"linux各种实用命令\"><a href=\"#linux各种实用命令\" class=\"headerlink\" title=\"linux各种实用命令\"></a>linux各种实用命令</h2><h3 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h3><p>ctrl+c强制退出停止命令运行</p>\n<p>ctrl+d退出当前登录</p>\n<p>history 查看历史输入过的命令</p>\n<p>!命令前缀，自动执行上一次匹配前缀的命令</p>\n<h3 id=\"历史命令搜索：\"><a href=\"#历史命令搜索：\" class=\"headerlink\" title=\"历史命令搜索：\"></a>历史命令搜索：</h3><ul>\n<li><p>通过ctrl+r，输入内容去匹配历史命令</p>\n</li>\n<li><p>键盘左右键，可以得到此命令（不执行）</p>\n</li>\n<li><p>ctrl+a跳到命令开头,ctrl+e跳到命令结尾，ctril+左，向左跳一个单词，ctrl+右，向右跳一个单词</p>\n</li>\n<li><p>ctrl+l清空终端内容,clear也可以得到同样的效果</p>\n</li>\n</ul>\n<h3 id=\"ubuntu-apt命令\"><a href=\"#ubuntu-apt命令\" class=\"headerlink\" title=\"ubuntu-apt命令\"></a>ubuntu-apt命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br><span class=\"line\"><span class=\"comment\">#安装这个包</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install wget</span><br><span class=\"line\"><span class=\"comment\"># 寻找这个应用包</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt search wget</span><br><span class=\"line\"><span class=\"comment\">#移除这个包</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt remove wget</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"systemctl命令\"><a href=\"#systemctl命令\" class=\"headerlink\" title=\"systemctl命令\"></a>systemctl命令</h3><p>systemctl控制软件、服务的启停，开机自启</p>\n<ul>\n<li><p>systemctl start 开启服务</p>\n</li>\n<li><p>systemctl stop 关闭服务</p>\n</li>\n<li><p>systemctl enable 开机自启动</p>\n</li>\n<li><p>systemctl status 查看状态</p>\n</li>\n</ul>\n<h2 id=\"软链接\"><a href=\"#软链接\" class=\"headerlink\" title=\"软链接\"></a>软链接</h2><p>简单来说类似于windows中的快捷方式</p>\n<p>创建一个链接可以指向一个文件、文件夹</p>\n<p>语法： <code>ln -s 参数1 参数2</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s /etc/apt ~/apt</span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">ls</span> -l</span><br><span class=\"line\">total 12</span><br><span class=\"line\">drwxr-xr-x 3 root    root    4096 Feb 11 14:33 1panel-v1.10.24-lts-linux-amd64</span><br><span class=\"line\">lrwxrwxrwx 1 root    root       8 Feb 14 08:16 apt -&gt; /etc/apt</span><br><span class=\"line\">-rw-rw-r-- 1 haxlock haxlock 3586 Jun 29  2020 bt-uninstall.sh</span><br><span class=\"line\">drwxrwxr-x 2 root    root    4096 Feb 14 05:35 <span class=\"built_in\">test</span></span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">cd</span> apt</span><br><span class=\"line\">haxlock@ubuntu:~/apt$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">apt.conf.d   keyrings       preferences.d.save  sources.list.btbackup     sources.list.d  trusted.gpg.d</span><br><span class=\"line\">auth.conf.d  preferences.d  sources.list        sources.list.curtin.orig  trusted.gpg</span><br><span class=\"line\">haxlock@ubuntu:~/apt$ <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">1panel-v1.10.24-lts-linux-amd64  apt  bt-uninstall.sh  <span class=\"built_in\">test</span></span><br><span class=\"line\">haxlock@ubuntu:~$ </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"date-查看时间\"><a href=\"#date-查看时间\" class=\"headerlink\" title=\"date 查看时间\"></a>date 查看时间</h2><p>格式<code>date [-d] [+格式化字符串]</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fri Feb 14 08:17:09 AM UTC 2025</span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">date</span></span><br><span class=\"line\">Fri Feb 14 08:18:34 AM UTC 2025</span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">date</span> +%Y-%m-%d</span><br><span class=\"line\">2025-02-14</span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">date</span> <span class=\"string\">&quot;+%Y-%m-%d %H:%M:%S&quot;</span></span><br><span class=\"line\">2025-02-14 08:20:32</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>%Y年</p>\n</li>\n<li><p>y 年份后两位数字</p>\n</li>\n<li><p>m 月份</p>\n</li>\n<li><p>d 天</p>\n</li>\n<li><p>H 小时（24）</p>\n</li>\n<li><p>M 分钟</p>\n</li>\n<li><p>S 秒</p>\n</li>\n<li><p>s 自1970-01-01至今的时间</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看明天的时间</span></span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">date</span> -d <span class=\"string\">&quot;+1 day&quot;</span></span><br><span class=\"line\">Sat Feb 15 08:26:36 AM UTC 2025</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#去年</span></span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">date</span> -d <span class=\"string\">&quot;-1 year&quot;</span></span><br><span class=\"line\">Wed Feb 14 08:28:10 AM UTC 2024haxlock@ubuntu:~$ <span class=\"built_in\">date</span> -d <span class=\"string\">&quot;-1 year&quot;</span></span><br><span class=\"line\">Wed Feb 14 08:28:10 AM UTC 2024</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改linux时区\"><a href=\"#修改linux时区\" class=\"headerlink\" title=\"修改linux时区\"></a>修改linux时区</h3><h4 id=\"手动修改\"><a href=\"#手动修改\" class=\"headerlink\" title=\"手动修改\"></a>手动修改</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">sudo</span> <span class=\"built_in\">rm</span> -f /etc/localtime</span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime </span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">date</span></span><br><span class=\"line\">Fri Feb 14 04:47:51 PM CST 2025</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ntp自动校准\"><a href=\"#ntp自动校准\" class=\"headerlink\" title=\"ntp自动校准\"></a>ntp自动校准</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start ntp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ntp手动校准\"><a href=\"#ntp手动校准\" class=\"headerlink\" title=\"ntp手动校准\"></a>ntp手动校准</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ntpdate -u ntp.aliyun.com</span><br></pre></td></tr></table></figure>\n\n<p>指向一个ntp服务器即可</p>\n<h2 id=\"查看ip地址\"><a href=\"#查看ip地址\" class=\"headerlink\" title=\"查看ip地址\"></a>查看ip地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n\n<p>主机名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@ubuntu:~$ hostname</span><br><span class=\"line\">ubuntu</span><br></pre></td></tr></table></figure>\n\n<p>修改主机名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname [需要修改的主机名]</span><br></pre></td></tr></table></figure>\n\n<p>配置主机名映射</p>\n<p>先查看本机记录</p>\n<ul>\n<li><p>Windows看 C:\\Windows\\System32\\drivers\\etc\\hosts</p>\n</li>\n<li><p>Linux看： &#x2F;etc&#x2F;hosts</p>\n</li>\n<li><p>配置文件＋‘ip+主机名即可’</p>\n</li>\n</ul>\n<p>再去联网去DNS服务器询问</p>\n<h2 id=\"虚拟机静态ip配置\"><a href=\"#虚拟机静态ip配置\" class=\"headerlink\" title=\"虚拟机静态ip配置\"></a>虚拟机静态ip配置</h2><ul>\n<li><p>首先在Vmware配置好网卡设置</p>\n</li>\n<li><p>进入&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33文件，修改内容</p>\n</li>\n<li><p>将BOOTPROTO后面DHCP改为static</p>\n</li>\n<li><p>末尾加入如下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPADDR=<span class=\"string\">&quot;192.168.88.130&quot;</span> <span class=\"comment\">#IP地址</span></span><br><span class=\"line\">NETMASK=<span class=\"string\">&quot;255.255.255.0&quot;</span> <span class=\"comment\">#子网掩码</span></span><br><span class=\"line\">GATEWAY=<span class=\"string\">&quot;192.168.88.2&quot;</span> <span class=\"comment\">#网关与VMware设置一致</span></span><br><span class=\"line\">DNS1 =<span class=\"string\">&quot;DNS为网关即可&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"网络传输\"><a href=\"#网络传输\" class=\"headerlink\" title=\"网络传输\"></a>网络传输</h2><h3 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h3><p><code>ping [-c num] ip</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@ubuntu:~$ ping -c 5 www.baidu.com</span><br><span class=\"line\">PING www.baidu.com(2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77)) 56 data bytes</span><br><span class=\"line\">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=1 ttl=54 <span class=\"keyword\">time</span>=4.15 ms</span><br><span class=\"line\">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=2 ttl=54 <span class=\"keyword\">time</span>=4.71 ms</span><br><span class=\"line\">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=3 ttl=54 <span class=\"keyword\">time</span>=4.86 ms</span><br><span class=\"line\">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=4 ttl=54 <span class=\"keyword\">time</span>=4.59 ms</span><br><span class=\"line\">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=5 ttl=54 <span class=\"keyword\">time</span>=4.59 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- www.baidu.com ping statistics ---</span><br><span class=\"line\">5 packets transmitted, 5 received, 0% packet loss, <span class=\"keyword\">time</span> 4005ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 4.152/4.582/4.862/0.237 ms</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"wget\"><a href=\"#wget\" class=\"headerlink\" title=\"wget\"></a>wget</h3><p>非交互式文件下载器</p>\n<p><code>wget [-b] url</code></p>\n<ul>\n<li><p>-b 后台下载，日志会写道wget-log中</p>\n</li>\n<li><p>url下载链接</p>\n</li>\n</ul>\n<h3 id=\"curl\"><a href=\"#curl\" class=\"headerlink\" title=\"curl\"></a>curl</h3><p>发起http网络请求，可用于下载文件、获取信息</p>\n<p><code>curl [-o] url</code></p>\n<ul>\n<li><p>-o 用于下载文件</p>\n</li>\n<li><p>url请求的地址</p>\n</li>\n</ul>\n<h2 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h2><p>设备与外界通信交流的出入口</p>\n<p>分为物理端口以及虚拟端口</p>\n<ul>\n<li><p>物理端口：也称为接口，如USB,RJ45网口，HDMI</p>\n</li>\n<li><p>虚拟端口：指的计算机内部端口，用于操作系统与外界交互使用</p>\n</li>\n</ul>\n<p>Linux支持65535个端口，这6万多个端口可以分为3类使用</p>\n<ul>\n<li><p>公认端口：1-1023,通常为一些系统内置或者知名程序预留，例如ssh的22，https的443</p>\n</li>\n<li><p>注册端口：1024-49151 ，通常可以随意使用，用于松散地绑定一些程序\\服务</p>\n</li>\n<li><p>动态端口：49152-65535，也通常不绑定程序，而是程序对外进行网络链接时候，用于临时使用</p>\n</li>\n</ul>\n<h3 id=\"nmap查看端口占用情况\"><a href=\"#nmap查看端口占用情况\" class=\"headerlink\" title=\"nmap查看端口占用情况\"></a>nmap查看端口占用情况</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install nmap -y</span><br><span class=\"line\">nmap 127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<p>会扫描某个ip开放地端口</p>\n<h3 id=\"netstat查看指定端口占用情况\"><a href=\"#netstat查看指定端口占用情况\" class=\"headerlink\" title=\"netstat查看指定端口占用情况\"></a>netstat查看指定端口占用情况</h3><p>netstat -anp|grep 端口号</p>\n<p>安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install net-tools</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@root:~$ netstat -anp|grep 3001</span><br><span class=\"line\">(Not all processes could be identified, non-owned process info</span><br><span class=\"line\"> will not be shown, you would have to be root to see it all.)</span><br><span class=\"line\">tcp6       0      0 :::3001                 :::*                    LISTEN      6550/java     </span><br></pre></td></tr></table></figure>\n\n<p>可以看到某端口在被哪个端口占用，进程号(PID)是多少</p>\n<h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><p>也可以说是<strong>任务管理器</strong></p>\n<h3 id=\"查看进程\"><a href=\"#查看进程\" class=\"headerlink\" title=\"查看进程\"></a>查看进程</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps [-e -f]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-e 显示所有的进程</p>\n</li>\n<li><p>-f 以完全格式化的形式展示信息</p>\n</li>\n</ul>\n<p>一般来说，如果ps -ef就是列出所有进程的全部信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@root:~$ ps -f</span><br><span class=\"line\">UID          PID    PPID  C STIME TTY          TIME CMD</span><br><span class=\"line\">haxlock    96215   96214  0 14:49 pts/0    00:00:00 -bash</span><br><span class=\"line\">haxlock    96232   96215 99 14:50 pts/0    00:00:00 ps -f</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>UID:进程所属的用户ID</p>\n</li>\n<li><p>PID: 进程的进程号ID</p>\n</li>\n<li><p>PPID: 进程的父ID</p>\n</li>\n<li><p>C:此进程的CPU占用比</p>\n</li>\n<li><p>STIME：进程的启动时间</p>\n</li>\n<li><p>TTY：启动此进程的终端序号，？表示非终端启动</p>\n</li>\n<li><p>TIME：进程占用CPU的时间</p>\n</li>\n<li><p>CMD：进程的启动路径或运行路径</p>\n</li>\n</ul>\n<p>如果想确认跟踪一个进程的信息</p>\n<p>可以：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep [进程名]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭进程\"><a href=\"#关闭进程\" class=\"headerlink\" title=\"关闭进程\"></a>关闭进程</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> [-9] 进程ID</span><br></pre></td></tr></table></figure>\n\n<p>其中 <strong>-9</strong> 代表强制关闭</p>\n<h2 id=\"top-主机状态详解\"><a href=\"#top-主机状态详解\" class=\"headerlink\" title=\"top 主机状态详解\"></a>top 主机状态详解</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n\n<p>查看主机的各种状态参数，默认每5s刷新一次</p>\n<p>内容较多，此处可当工具查找</p>\n<p><strong>top命令经常用来监控linux的系统状况，是常用的性能分析工具，能够实时显示系统中各个进程的资源占用情况。</strong></p>\n<h3 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a><strong>常用参数</strong></h3><p>top的使用方式 top [-d number] | top [-bnp]</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d number</td>\n<td>number代表秒数，表示top命令显示的页面更新一次的间隔 (default&#x3D;5s)</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>以批次的方式执行top</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>与-b配合使用，表示需要进行几次top命令的输出结果</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>指定特定的pid进程号进行观察</td>\n</tr>\n</tbody></table>\n<p><strong>top命令显示的页面还可以输入以下按键执行相应的功能（注意大小写区分的）</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>？</td>\n<td>显示在top当中可以输入的命令</td>\n</tr>\n<tr>\n<td>P</td>\n<td>以CPU的使用资源排序显示</td>\n</tr>\n<tr>\n<td>M</td>\n<td>以内存的使用资源排序显示</td>\n</tr>\n<tr>\n<td>N</td>\n<td>以pid排序显示</td>\n</tr>\n<tr>\n<td>T</td>\n<td>由进程使用的时间累计排序显示</td>\n</tr>\n<tr>\n<td>k</td>\n<td>给某一个pid一个信号,可以用来杀死进程(9)</td>\n</tr>\n<tr>\n<td>r</td>\n<td>给某个pid重新定制一个nice值（即优先级)</td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出top（用ctrl+c也可以退出top）</td>\n</tr>\n</tbody></table>\n<h3 id=\"top各输出参数含义\"><a href=\"#top各输出参数含义\" class=\"headerlink\" title=\"top各输出参数含义\"></a><strong>top各输出参数含义</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top - 15:23:39 up 7 days,  7:57,  2 <span class=\"built_in\">users</span>,  load average: 0.00, 0.01, 0.00</span><br><span class=\"line\">Tasks: 249 total,   1 running, 248 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s):  0.1 us,  0.2 sy,  0.0 ni, 99.8 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st </span><br><span class=\"line\">MiB Mem :   7894.1 total,    367.4 free,   5022.1 used,   2813.0 buff/cache     </span><br><span class=\"line\">MiB Swap:   2048.0 total,   2047.7 free,      0.3 used.   2872.0 avail Mem </span><br><span class=\"line\"></span><br><span class=\"line\">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                 </span><br><span class=\"line\">  81232 root      20   0  315932   9472   7936 S   0.3   0.1   2:52.54 vmtoolsd                                                </span><br><span class=\"line\">  96087 root      20   0       0      0      0 I   0.3   0.0   0:02.13 kworker/3:2-events                                      </span><br><span class=\"line\">  96214 haxlock   20   0   15124   7088   5120 S   0.3   0.1   0:00.17 sshd                                                    </span><br><span class=\"line\">  96302 haxlock   20   0   11944   5888   3712 R   0.3   0.1   0:00.02 top                                                     </span><br><span class=\"line\">      1 root      20   0   22624  13696   9472 S   0.0   0.2   1:22.07 systemd                                                 </span><br><span class=\"line\">      2 root      20   0       0      0      0 S   0.0   0.0   0:00.89 kthreadd         </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一、top前五条信息解释\"><a href=\"#一、top前五条信息解释\" class=\"headerlink\" title=\"一、top前五条信息解释\"></a>一、top前五条信息解释</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top - 15:23:39 up 7 days,  7:57,  2 <span class=\"built_in\">users</span>,  load average: 0.00, 0.01, 0.00</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>14:49:28</td>\n<td>表示当前时间</td>\n</tr>\n<tr>\n<td>up 1:33</td>\n<td>系统远行时间，格式为时：分</td>\n</tr>\n<tr>\n<td>1 user</td>\n<td>当前登陆用户数</td>\n</tr>\n<tr>\n<td>load average: 0.00, 0.00, 0.00</td>\n<td>系统负载，即任务队列的平均长度。 三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tasks: 249 total,   1 running, 248 sleeping,   0 stopped,   0 zombi</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Tasks: 80 total</td>\n<td>进程总数</td>\n</tr>\n<tr>\n<td>2 running</td>\n<td>正在运行的进程数</td>\n</tr>\n<tr>\n<td>78 sleeping</td>\n<td>睡眠的进程数</td>\n</tr>\n<tr>\n<td>0 stopped</td>\n<td>停止的进程数</td>\n</tr>\n<tr>\n<td>0 zombie</td>\n<td>僵尸进程数</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%Cpu(s):  0.1 us,  0.2 sy,  0.0 ni, 99.8 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 s</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0.0%us</td>\n<td>用户空间占用CPU百分比</td>\n</tr>\n<tr>\n<td>0.0%sy</td>\n<td>内核空间占用CPU百分比</td>\n</tr>\n<tr>\n<td>0.0%ni</td>\n<td>用户进程空间内改变过优先级的进程占用CPU百分比</td>\n</tr>\n<tr>\n<td>100.0%id</td>\n<td>空闲CPU百分比</td>\n</tr>\n<tr>\n<td>0.0%wa</td>\n<td>等待输入输出的CPU时间百分比</td>\n</tr>\n<tr>\n<td>0.0%hi</td>\n<td>硬中断（Hardware IRQ）占用CPU的百分比</td>\n</tr>\n<tr>\n<td>0.0%si</td>\n<td>软中断（Software Interrupts）占用CPU的百分比</td>\n</tr>\n<tr>\n<td>0.0 st</td>\n<td>用于有虚拟cpu的情况，用来指示被虚拟机偷掉的cpu时间</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mem: 1922488k total, 406936k used, 1515552k free, 11940k buffers</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1922488k total</td>\n<td>物理内存总量</td>\n</tr>\n<tr>\n<td>406936k used</td>\n<td>使用的物理内存总量</td>\n</tr>\n<tr>\n<td>1515552k free</td>\n<td>空闲内存总量</td>\n</tr>\n<tr>\n<td>11940k buffers</td>\n<td>用作内核缓存的内存量</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Swap: 835576k total, 0k used, 835576k free, 111596k cached</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>835576k total</td>\n<td>交换区总量</td>\n</tr>\n<tr>\n<td>0k used</td>\n<td>使用的交换区总量</td>\n</tr>\n<tr>\n<td>835576k free</td>\n<td>空闲交换区总量</td>\n</tr>\n<tr>\n<td>111596k cached</td>\n<td>缓冲的交换区总量</td>\n</tr>\n</tbody></table>\n<h4 id=\"二、进程信息\"><a href=\"#二、进程信息\" class=\"headerlink\" title=\"二、进程信息\"></a>二、进程信息</h4><table>\n<thead>\n<tr>\n<th>列名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PID</td>\n<td>进程id</td>\n</tr>\n<tr>\n<td>USER</td>\n<td>进程所有者的用户名</td>\n</tr>\n<tr>\n<td>PR</td>\n<td>优先级</td>\n</tr>\n<tr>\n<td>NI</td>\n<td>nice值。负值表示高优先级，正值表示低优先级</td>\n</tr>\n<tr>\n<td>VIRT</td>\n<td>进程使用的虚拟内存总量，单位kb。VIRT&#x3D;SWAP+RES</td>\n</tr>\n<tr>\n<td>RES</td>\n<td>进程使用的、未被换出的物理内存大小，单位kb。RES&#x3D;CODE+DATA</td>\n</tr>\n<tr>\n<td>SHR</td>\n<td>共享内存大小，单位kb</td>\n</tr>\n<tr>\n<td>S</td>\n<td>进程状态。D&#x3D;不可中断的睡眠状态 R&#x3D;运行 S&#x3D;睡眠 T&#x3D;跟踪&#x2F;停止 Z&#x3D;僵尸进程</td>\n</tr>\n<tr>\n<td>%CPU</td>\n<td>上次更新到现在的CPU时间占用百分比</td>\n</tr>\n<tr>\n<td>%MEM</td>\n<td>进程使用的物理内存百分比</td>\n</tr>\n<tr>\n<td>TIME+</td>\n<td>进程使用的CPU时间总计，单位1&#x2F;100秒</td>\n</tr>\n<tr>\n<td>COMMAND</td>\n<td>命令名&#x2F;命令行</td>\n</tr>\n</tbody></table>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>一系列命令本质上就是一个个可执行文件。</p>\n<p>例如：cd本体就是&#x2F;usr&#x2F;bin&#x2F;cd这个文件下的文件</p>\n<p>查看当前环境变量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">env</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PATH\"><a href=\"#PATH\" class=\"headerlink\" title=\"PATH\"></a>PATH</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@root:~$ <span class=\"built_in\">env</span> | grep PATH</span><br><span class=\"line\">CLASSPATH=.:/usr/local/jdk21/lib</span><br><span class=\"line\">PATH=.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>\n\n<p>可以得到这么一些键值对，其实从本以上来理解，查询环境变量，本就是通过在<strong>PATH键对应的值</strong>中去查找相应的命令环境</p>\n<p>会在值中挨个去搜索环境变量的值，直到寻找到相应的内容。</p>\n<h3 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"$符号\"></a>$符号</h3><p>$是用于取”变量”的值。</p>\n<p>取得环境变量的值可以通过语法：$来获得</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@root:~$ <span class=\"built_in\">echo</span> <span class=\"variable\">$PATH</span></span><br><span class=\"line\">.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>如果你给你自己开发的程序记录在环境变量中，那么也可以通过你自己设定的命令行来快速地执行这个环境变量</p>\n<h4 id=\"自行设置方法：\"><a href=\"#自行设置方法：\" class=\"headerlink\" title=\"自行设置方法：\"></a>自行设置方法：</h4><ul>\n<li>临时设置：语法：export 变量名称&#x3D;变量值</li>\n</ul>\n","excerpt":"<h1 id=\"这是一篇关于linux基本命令以及作用的概述和汇总学习\"><a href=\"#这是一篇关于linux基本命令以及作用的概述和汇总学习\" class=\"headerlink\" title=\"这是一篇关于linux基本命令以及作用的概述和汇总学习\"></a>这是一篇关于linux基本命令以及作用的概述和汇总学习</h1><h2 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h2><h3 id=\"ls命令\"><a href=\"#ls命令\" class=\"headerlink\" title=\"ls命令\"></a>ls命令</h3><p>ls命令用于列出目录下的内容</p>\n<p>例如输出结果可能如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">back_data  DDNS-go  ha  server  test.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ls参数-选项\"><a href=\"#ls参数-选项\" class=\"headerlink\" title=\"ls参数-选项\"></a>ls参数-选项</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> [-a -l -h] [linux路径]</span><br></pre></td></tr></table></figure>\n\n<p>这是ls 可选参数的基本概况</p>\n<p>以下是三种参数对应的输出情况：</p>\n<h4 id=\"ls-a\"><a href=\"#ls-a\" class=\"headerlink\" title=\"ls -a\"></a>ls -a</h4><p>会输出项目下所有文件夹下所有文件情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span> -a</span><br><span class=\"line\">.              .bash_history  DDNS-go     .profile                   test.txt    .Xauthority</span><br><span class=\"line\">..             .bash_logout   ha          .pyenv                     .vim        .xsessionrc</span><br><span class=\"line\">back_data      .bashrc        .<span class=\"built_in\">local</span>      server                     .viminfo    .zshrc</span><br><span class=\"line\">.bash_aliases  .cache         .oh-my-zsh  .sudo_as_admin_successful  .wget-hsts</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ls-l\"><a href=\"#ls-l\" class=\"headerlink\" title=\"ls -l\"></a>ls -l</h4><p>会以列表的形式，详细说明目录下文件的具体信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span> -l</span><br><span class=\"line\">total 20</span><br><span class=\"line\">drwxrwxr-x 13 root    root    4096  1月 23 13:38 back_data</span><br><span class=\"line\">drwxr-xr-x  2 root    root    4096  1月 10 07:46 DDNS-go</span><br><span class=\"line\">drwxr-xr-x  2 root    root    4096  1月 10 13:47 ha</span><br><span class=\"line\">drwxr-xr-x  6 root    root    4096  1月  9 17:51 server</span><br><span class=\"line\">-rw-rw-r--  1 haxlock haxlock   20  2月  6 10:26 test.txt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ls-h\"><a href=\"#ls-h\" class=\"headerlink\" title=\"ls -h\"></a>ls -h</h4><ul>\n<li><p>-h 表示易于阅读的形式，列出文件的大小，如K,M,G</p>\n</li>\n<li><p>[attention!] -h 必须要搭配 -l 使用，否则无效、</p>\n</li>\n</ul>\n<p>下面为演示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span> -lh</span><br><span class=\"line\">total 20K</span><br><span class=\"line\">drwxrwxr-x 13 root    root    4.0K  1月 23 13:38 back_data</span><br><span class=\"line\">drwxr-xr-x  2 root    root    4.0K  1月 10 07:46 DDNS-go</span><br><span class=\"line\">drwxr-xr-x  2 root    root    4.0K  1月 10 13:47 ha</span><br><span class=\"line\">drwxr-xr-x  6 root    root    4.0K  1月  9 17:51 server</span><br><span class=\"line\">-rw-rw-r--  1 haxlock haxlock   20  2月  6 10:26 test.txt</span><br></pre></td></tr></table></figure>\n\n<p>可以看到这是显示出来了文件的大小，如4.0K</p>\n<h3 id=\"ls-结尾\"><a href=\"#ls-结尾\" class=\"headerlink\" title=\"ls 结尾\"></a>ls 结尾</h3><p>ls -a -l -h 都可以组合使用，具体需要根据实际场景进行变更，这是一个非常方便的快捷键用于查看当前路径下的所有文件情况。</p>\n<h2 id=\"cd-pwd-命令\"><a href=\"#cd-pwd-命令\" class=\"headerlink\" title=\"cd &#x2F; pwd 命令\"></a>cd &#x2F; pwd 命令</h2><h4 id=\"cd-（Change-Directory）\"><a href=\"#cd-（Change-Directory）\" class=\"headerlink\" title=\"cd （Change Directory）\"></a>cd （Change Directory）</h4><p>cd 主要用于切换当前操作目录，例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ </span><br></pre></td></tr></table></figure>\n\n<p>当前就是在&#x2F;home&#x2F;haxlock目录下</p>\n<p>那么我想切换到别的目录，这时需要用到cd命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">cd</span> /etc/</span><br><span class=\"line\">haxlock@armbian:/etc$ </span><br></pre></td></tr></table></figure>\n\n<p>cd 后面接 &#x2F;etc&#x2F;就切换到了 <strong>根目录下</strong>  的 <strong>etc</strong> 文件夹下的路径</p>\n<blockquote>\n<p>注意！</p>\n<p>其中最头部的 ‘&#x2F;’是代表linux的根目录，一一定不能少    </p>\n</blockquote>\n<p>如果直接就写一个cd，那么会快速返回用户目录下的home目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:/etc$ <span class=\"built_in\">cd</span></span><br><span class=\"line\">haxlock@armbian:~$ </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pwd-Print-Word-Directory\"><a href=\"#pwd-Print-Word-Directory\" class=\"headerlink\" title=\"pwd (Print Word Directory)\"></a>pwd (Print Word Directory)</h4><p>pwd用于打印当前的工作目录路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">pwd</span></span><br><span class=\"line\">/home/haxlock</span><br></pre></td></tr></table></figure>\n\n<p>可见控制台可以输出当前工作目录</p>\n<h2 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h2><h3 id=\"mkdir-创建目录命令\"><a href=\"#mkdir-创建目录命令\" class=\"headerlink\" title=\"mkdir 创建目录命令\"></a>mkdir 创建目录命令</h3><p>通过 mkdir [-p] Linux路径</p>\n<ul>\n<li>参数 <strong>必填</strong> 表示路径，就是要创建文件夹的路径，相对和绝对均可</li>\n<li>-p是为了创建多个层级的目录</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">mkdir</span> <span class=\"built_in\">test</span></span><br><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">back_data  DDNS-go  ha  server  <span class=\"built_in\">test</span>  test.txt</span><br></pre></td></tr></table></figure>\n\n<p>可见此时新出现一个test文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">cd</span> <span class=\"built_in\">test</span></span><br><span class=\"line\">haxlock@armbian:~/test$ </span><br></pre></td></tr></table></figure>\n\n<p>可以进入这个新文件夹</p>\n<p>我想快速在home目录下创建文件怎么办呢？</p>\n<p>可以用这个快捷命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">mkdir</span> ~/1</span><br><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">1  back_data  DDNS-go  ha  server  <span class=\"built_in\">test</span>  test.txt</span><br></pre></td></tr></table></figure>\n\n<p>可见在home路径下创建了一个新的‘1’的文件夹</p>\n<h3 id=\"mkdir-创建多个层级目录\"><a href=\"#mkdir-创建多个层级目录\" class=\"headerlink\" title=\"mkdir 创建多个层级目录\"></a>mkdir 创建多个层级目录</h3><p>此时需要使用-p命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">mkdir</span> -p 2/3/4</span><br><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">1  2  back_data  DDNS-go  ha  server  <span class=\"built_in\">test</span>  test.txt</span><br><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">cd</span> 2/3/4/</span><br><span class=\"line\">haxlock@armbian:~/2/3/4$ <span class=\"built_in\">pwd</span></span><br><span class=\"line\">/home/haxlock/2/3/4</span><br><span class=\"line\">haxlock@armbian:~/2/3/4$ </span><br></pre></td></tr></table></figure>\n\n<p>可以创建多层路径</p>\n<h2 id=\"touch、cat、more文件操作命令\"><a href=\"#touch、cat、more文件操作命令\" class=\"headerlink\" title=\"touch、cat、more文件操作命令\"></a>touch、cat、more文件操作命令</h2><h3 id=\"touch-创建文件\"><a href=\"#touch-创建文件\" class=\"headerlink\" title=\"touch 创建文件\"></a>touch 创建文件</h3><p>touch Linux路径</p>\n<p>我想创建一个test.txt文件</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">touch</span> test.txt</span><br><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">back_data  DDNS-go  ha  server  test.txt</span><br></pre></td></tr></table></figure>\n\n<p>创建了一个test.txt文件</p>\n<blockquote>\n<p>可以通过颜色分别文件和文件夹，有色的是文件夹，白色的是文件</p>\n</blockquote>\n<h3 id=\"cat、more查看文件内容\"><a href=\"#cat、more查看文件内容\" class=\"headerlink\" title=\"cat、more查看文件内容\"></a>cat、more查看文件内容</h3><h4 id=\"cat查看\"><a href=\"#cat查看\" class=\"headerlink\" title=\"cat查看\"></a>cat查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">cat</span> test.txt </span><br><span class=\"line\">这是一个测试文件</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"more查看\"><a href=\"#more查看\" class=\"headerlink\" title=\"more查看\"></a>more查看</h4><p>more与cat不同的是</p>\n<ul>\n<li><p>cat是直接把所有内容显示出来</p>\n</li>\n<li><p>more是支持翻页的，可以一页一页显（空格翻页）</p>\n</li>\n</ul>\n<h2 id=\"cp-mv-rm命令\"><a href=\"#cp-mv-rm命令\" class=\"headerlink\" title=\"cp-mv-rm命令\"></a>cp-mv-rm命令</h2><h4 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h4><p>cp（copy）用于复制文件、文件夹，主要用途在于修改某文件前将他提前备份。</p>\n<p><strong>cp [-r] 路径1 路径2</strong></p>\n<p>例如我想把&#x2F;home&#x2F;haxlock下的test.txt复制到根目录下，那么命令就是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /home/haxlock/test.txt /</span><br></pre></td></tr></table></figure>\n\n<p>其中-r是当复制文件夹时候使用的，表示递归</p>\n<h4 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h4><p>mv（move）用于移动文件或文件夹</p>\n<p><strong>mv 参数1 参数2</strong></p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> /home/haxlock/test.txt /</span><br></pre></td></tr></table></figure>\n\n<p>把路径下的test.txt移动到根目录下</p>\n<h4 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h4><h5 id=\"基础指令\"><a href=\"#基础指令\" class=\"headerlink\" title=\"基础指令\"></a>基础指令</h5><p>rm是用于删除的指令</p>\n<p>rm [-r -f] 参数1 参数2 参数3 ….参数n </p>\n<p>其中，-r表示用于删除文件夹</p>\n<p>-f 表示force,强制删除文件夹，不会弹出提示</p>\n<p>后面多个参数代表多个您需要删除的文件。</p>\n<p>例如我想删除&#x2F;home&#x2F;haxlock路径下的‘1’文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -r /home/haxlock/1</span><br></pre></td></tr></table></figure>\n\n<p>这时候会弹出提示您是否要删除？然后确认即可</p>\n<p>如果您加了 -f 那么就不会弹出提示</p>\n<p>大部分情况下不建议使用-f 参数，因为十分危险。</p>\n<h5 id=\"搭配通配符使用\"><a href=\"#搭配通配符使用\" class=\"headerlink\" title=\"搭配通配符使用\"></a>搭配通配符使用</h5><ul>\n<li><p>*符号就代表通配符，可以匹配任意内容</p>\n</li>\n<li><p>test* 表示匹配所有以test开头的内容</p>\n</li>\n<li><p>*test 表示所有以test结尾的内容</p>\n</li>\n<li><p>*test* 表示所有包含test的内容</p>\n</li>\n<li><p>删除所有以test开头的文件和文件夹：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -r <span class=\"built_in\">test</span>*</span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"which-find-命令\"><a href=\"#which-find-命令\" class=\"headerlink\" title=\"which- find 命令\"></a>which- find 命令</h2><h3 id=\"which\"><a href=\"#which\" class=\"headerlink\" title=\"which\"></a>which</h3><p>which用于查找命令对应的文件</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> <span class=\"built_in\">pwd</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>只针对命令文件查找 </p>\n</blockquote>\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><h4 id=\"按照文件名查找\"><a href=\"#按照文件名查找\" class=\"headerlink\" title=\"按照文件名查找\"></a>按照文件名查找</h4><p>find <strong>起始路径</strong> -name <strong>“被查找文件名”</strong></p>\n<p>由于是全盘搜索</p>\n<p>命令应当这样使用:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> find / -name <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以搭配通配符使用，详情请看[搭配通配符使用](##### 搭配通配符使用)</p>\n<h4 id=\"按照大小查找\"><a href=\"#按照大小查找\" class=\"headerlink\" title=\"按照大小查找\"></a>按照大小查找</h4><p>find 起始路径 -size + | n[kMG]</p>\n<ul>\n<li><p>+ - 表示大于和小于</p>\n</li>\n<li><p>n表示大小数字</p>\n</li>\n<li><p>kMG表示单位，k(小写字母)表示kb，M为MB,G为GB</p>\n</li>\n</ul>\n<p>例如：</p>\n<ul>\n<li><p>查找小于10KB文件：find &#x2F; -size -10k</p>\n</li>\n<li><p>大于100MB文件： find &#x2F; -size + 100M</p>\n</li>\n<li><p>查找大于1GB文件: find &#x2F; -size +1G</p>\n</li>\n</ul>\n<h2 id=\"grep-wc-管道符号\"><a href=\"#grep-wc-管道符号\" class=\"headerlink\" title=\"grep-wc 管道符号\"></a>grep-wc 管道符号</h2><h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><p>grep [-n] 关键字 文件路径</p>\n<ul>\n<li><p>-n 可选表示结果中显示匹配的行的行号</p>\n</li>\n<li><p>关键字 表示要过滤的关键字，用“”包围</p>\n</li>\n<li><p>文件路径，可作为内容的输入端口</p>\n</li>\n</ul>\n<p>例如有一个test.txt文件，内容为：</p>\n<p>这是一个测试文件</p>\n<p>这是两个测试文件</p>\n<p>这是三个测试文件</p>\n<p>查找第一行，一个</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ grep <span class=\"string\">&quot;一个&quot;</span> test.txt </span><br><span class=\"line\">这是一个测试文件</span><br></pre></td></tr></table></figure>\n\n<p>一个被标红，输入查找结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ grep -n <span class=\"string\">&quot;一个&quot;</span> test.txt </span><br><span class=\"line\">1:这是一个测试文件</span><br></pre></td></tr></table></figure>\n\n<p>加入-n参数可以输入行数</p>\n<h3 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a>wc</h3><p>wc [-c -m -l -w]  文件路径</p>\n<p>用于统计文件的行数、单词数量等</p>\n<ul>\n<li><p>-c 统计bytes数量</p>\n</li>\n<li><p>-m 统计字符数量</p>\n</li>\n<li><p>-l 统计行数</p>\n</li>\n<li><p>-w 统计单词数量</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">wc</span> test.txt </span><br><span class=\"line\"> 5  3 77 test.txt</span><br></pre></td></tr></table></figure>\n\n<p>5代表五行，3代表个3个单词，77个字节</p>\n<h3 id=\"‘-’-管道符\"><a href=\"#‘-’-管道符\" class=\"headerlink\" title=\"‘|’ 管道符\"></a>‘|’ 管道符</h3><p><strong>表示把管道符后左边的命令结果，作为右边的命令的输入</strong></p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">cat</span> test.txt | <span class=\"built_in\">wc</span> -l</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n<p>左边cat输入的结果作为右边wc -l命令的输入</p>\n<p>输出结果5，代表中国文件有五行内容</p>\n<p>又例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span> -l /usr/bin | <span class=\"built_in\">wc</span> -l</span><br><span class=\"line\">1180</span><br></pre></td></tr></table></figure>\n\n<p>可以用于统计文件的数量</p>\n<h2 id=\"echo、tail和重定向符\"><a href=\"#echo、tail和重定向符\" class=\"headerlink\" title=\"echo、tail和重定向符\"></a>echo、tail和重定向符</h2><h3 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h3><p>echo 输出的内容</p>\n<p><strong>可以用echo命令在命令行输出指定内容</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;hello word&quot;</span></span><br><span class=\"line\">hello word</span><br></pre></td></tr></table></figure>\n\n<p>如果想输出‘pwd’的结果呢？</p>\n<p>我们可以：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">echo</span> `<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\">/home/haxlock</span><br></pre></td></tr></table></figure>\n\n<p>用 `pwd` 即可实现这个功能，被  &#96; 所包围的会输出它的结果</p>\n<h3 id=\"重定向符\"><a href=\"#重定向符\" class=\"headerlink\" title=\"重定向符\"></a>重定向符</h3><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"&gt;\"></a>&gt;</h4><p>&gt; 把左侧命令的结果覆盖写入符号右侧的文件中</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;覆盖测试&quot;</span> &gt; test.txt </span><br><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">cat</span> test.txt </span><br><span class=\"line\">覆盖测试</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"&gt;&gt;\"></a>&gt;&gt;</h4><p>&gt;&gt; 表示把左侧命令结果追加写入符号右侧的文件中</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;我嘞个都！&quot;</span> &gt;&gt; test.txt </span><br><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">cat</span> test.txt </span><br><span class=\"line\">覆盖测试</span><br><span class=\"line\">我嘞个都！</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tail-命令\"><a href=\"#tail-命令\" class=\"headerlink\" title=\"tail 命令\"></a>tail 命令</h3><p>tail [-f -num] Linux路径</p>\n<p>查看文件尾部内容，<strong>跟踪文件的是最新更改</strong></p>\n<ul>\n<li><p>Linux路径表示被跟踪的路径</p>\n</li>\n<li><p>-f 表示持续跟踪</p>\n</li>\n<li><p>-num 表示查看尾部多少行，默认为10</p>\n</li>\n</ul>\n<p><strong>查看尾部10行，追踪文件更新</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">tail</span> -5 test.txt </span><br><span class=\"line\">sys</span><br><span class=\"line\">tmp</span><br><span class=\"line\">usr</span><br><span class=\"line\">var</span><br><span class=\"line\">www</span><br></pre></td></tr></table></figure>\n\n<p>如果用 -f参数，那么会一直跟踪文件的更新情况</p>\n<h2 id=\"vim-vi编辑器\"><a href=\"#vim-vi编辑器\" class=\"headerlink\" title=\"vim\\vi编辑器\"></a>vim\\vi编辑器</h2><p>vim兼容所有vi功能，后续使用vim就行，无所谓</p>\n<ul>\n<li><p>若文件不存在，则创建文件</p>\n</li>\n<li><p>若文件已存在，则直接编辑文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim hello.txt</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>命令模式</td>\n<td><code>i</code></td>\n<td>在当前光标位置进入<code>输入模式</code></td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>a</code></td>\n<td>在当前光标位置后进入<code>输入模式</code></td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>I</code></td>\n<td>在行开头进入<code>输入模式</code></td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>A</code></td>\n<td>在行结尾进入<code>输入模式</code></td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>o</code></td>\n<td>在光标下一行进入<code>输入模式</code></td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>O</code></td>\n<td>在光标上一行进入<code>输入模式</code></td>\n</tr>\n<tr>\n<td>输入模式</td>\n<td><code>esc</code></td>\n<td>esc进入<code>命令模式</code></td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>上,k</code></td>\n<td>向上移动光标</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>下,j</code></td>\n<td>向下移动光标</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>左,h</code></td>\n<td>向左移动光标</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>右,l</code></td>\n<td>向右移动光标</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>0</code></td>\n<td>移动光标到当前行头</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>$</code></td>\n<td>移动光标到当前行尾</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>pgUp</code></td>\n<td>上翻页</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>pgDn</code></td>\n<td>下翻页</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>/</code></td>\n<td>搜索模式</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>n</code></td>\n<td>向下继续搜索</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>N</code></td>\n<td>向上继续搜索</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>dd</code></td>\n<td>删除当前行</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>ndd</code></td>\n<td>删除当前行下面的n行</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>yy</code></td>\n<td>复制当前行</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>nyy</code></td>\n<td>复制n行</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>p</code></td>\n<td>粘贴内容</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>u</code></td>\n<td>撤销修改</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>ctrl + r</code></td>\n<td>反向撤销修改</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>gg</code></td>\n<td>跳到首行</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>G</code></td>\n<td>跳到行尾</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>dG</code></td>\n<td>从当前行，向下全部删除</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>dgg</code></td>\n<td>从当前行开始，向上全部删除</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>d$</code></td>\n<td>从当前光标开始，删除到本行的结尾</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td><code>d0</code></td>\n<td>从当前光标开始，删除到本行的开头</td>\n</tr>\n<tr>\n<td>底线命令模式</td>\n<td><code>:wq</code></td>\n<td>保存并退出</td>\n</tr>\n<tr>\n<td>底线命令模式</td>\n<td><code>:q</code></td>\n<td>退出</td>\n</tr>\n<tr>\n<td>底线命令模式</td>\n<td><code>:q!</code></td>\n<td>强制退出</td>\n</tr>\n<tr>\n<td>底线命令模式</td>\n<td><code>:w</code></td>\n<td>保存</td>\n</tr>\n<tr>\n<td>底线命令模式</td>\n<td><code>:set nu</code></td>\n<td>显示行号</td>\n</tr>\n<tr>\n<td>底线命令模式</td>\n<td><code>:set paste</code></td>\n<td>设置粘贴模式（为了确保粘贴格式没问题）</td>\n</tr>\n</tbody></table>\n<h2 id=\"关于为什么ubuntu、debian等使用su-root无法进入root模式的原因\"><a href=\"#关于为什么ubuntu、debian等使用su-root无法进入root模式的原因\" class=\"headerlink\" title=\"关于为什么ubuntu、debian等使用su - root无法进入root模式的原因\"></a>关于为什么ubuntu、debian等使用su - root无法进入root模式的原因</h2><p>由于ubuntu、debian等发行版操作系统一般默认不给你root账户权限，因此你输入这个的时候，可能会报错如下:</p>\n<p>su(switch user)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ su - root</span><br><span class=\"line\">Password: </span><br><span class=\"line\">su: Authentication failure</span><br></pre></td></tr></table></figure>\n\n<p>如果您需要进入root账户，需要通过以下命令进入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">sudo</span> -i</span><br><span class=\"line\">[<span class=\"built_in\">sudo</span>] password <span class=\"keyword\">for</span> haxlock: </span><br><span class=\"line\">root@armbian:~# </span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> su</span><br></pre></td></tr></table></figure>\n\n<p>也可以进入root账户</p>\n<h3 id=\"切换账户的方式\"><a href=\"#切换账户的方式\" class=\"headerlink\" title=\"切换账户的方式\"></a>切换账户的方式</h3><p>su - 用户名</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@armbian:~# su - haxlock</span><br><span class=\"line\">haxlock@armbian:~$ </span><br></pre></td></tr></table></figure>\n\n<p>如果你切换完账户后，通过<code>exit</code> 可以切换回上一个用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@armbian:/home/haxlock# <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">haxlock@armbian:~$ </span><br></pre></td></tr></table></figure>\n\n<p>还有使用<code>ctrl+d</code> 也可以切换回上一个用户</p>\n<h2 id=\"Linux-用户以及用户组\"><a href=\"#Linux-用户以及用户组\" class=\"headerlink\" title=\"Linux 用户以及用户组\"></a>Linux 用户以及用户组</h2><p>Linux系统可以</p>\n<ul>\n<li><p>配置多个用户</p>\n</li>\n<li><p>配置多个用户组</p>\n</li>\n<li><p>用户可以加入多个用户组</p>\n</li>\n</ul>\n<h3 id=\"用户组\"><a href=\"#用户组\" class=\"headerlink\" title=\"用户组\"></a>用户组</h3><ul>\n<li>创建</li>\n</ul>\n<p>groupadd 用户组名</p>\n<ul>\n<li>删除</li>\n</ul>\n<p>groupdel 用户组名</p>\n<h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><ul>\n<li>创建用户</li>\n</ul>\n<p><code>useradd [-g -d] 用户名</code></p>\n<ol>\n<li><p>选项： -g指定用户组，不指定-g，会创建同名组并自动加入，指定-g需要组以及存在，如果存在用户组，必须使用-g</p>\n</li>\n<li><p>选项：-d指定用户HOME路径，如果不指定就默认在&#x2F;home&#x2F;用户名下</p>\n</li>\n</ol>\n<ul>\n<li>删除用户</li>\n</ul>\n<p><code>userdel [-r] 用户名</code></p>\n<p>    1. 选项： -r，删除用户的HOME目录，不适用-r，删除用户时，HOME会被保留</p>\n<ul>\n<li>查看用户所属组</li>\n</ul>\n<p><code>id [用户名]</code></p>\n<p>    1. 参数：用户名，被查看的用户，如果不提供则查看自身</p>\n<ul>\n<li>修改用户所属组</li>\n</ul>\n<p><code>usermod -aG 用户组 用户名</code></p>\n<p>指定用户加入指定的用户组</p>\n<h3 id=\"getent\"><a href=\"#getent\" class=\"headerlink\" title=\"getent\"></a>getent</h3><p>getent passwd</p>\n<p>查看当前系统中有哪些用户</p>\n<p>getent group</p>\n<p>查看当前系统有哪些组</p>\n<h2 id=\"查看权限管控\"><a href=\"#查看权限管控\" class=\"headerlink\" title=\"查看权限管控\"></a>查看权限管控</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@armbian:~$ <span class=\"built_in\">ls</span> -l</span><br><span class=\"line\">total 20</span><br><span class=\"line\">drwxrwxr-x 13 root    root    4096  1月 23 13:38 back_data</span><br><span class=\"line\">drwxr-xr-x  2 root    root    4096  1月 10 07:46 DDNS-go</span><br><span class=\"line\">drwxr-xr-x  2 root    root    4096  1月 10 13:47 ha</span><br><span class=\"line\">drwxr-xr-x  6 root    root    4096  1月  9 17:51 server</span><br><span class=\"line\">-rw-rw-r--  1 haxlock haxlock  155  2月  7 08:45 test.txt</span><br></pre></td></tr></table></figure>\n\n<p>来分析一下头部</p>\n<p>drwxrwxr-x</p>\n<ul>\n<li><p>d表示这是一个文件夹，-为文件,l表示软链接</p>\n</li>\n<li><p>rwx这三个是所属用户权限，表示有r有w有x</p>\n</li>\n<li><p>rwx后三个表示是所属用户组的权限,有r有w有x</p>\n</li>\n<li><p>r-x最后三个表示洽谈用户权限，有r无w有x</p>\n</li>\n</ul>\n<p>r代表读权限，w代表可写，x代表可执行(excute)</p>\n<h2 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h2><p>可以通过chmod命令，修改，文件、文件夹的权限信息</p>\n<blockquote>\n<p>只有文件、文件夹的所属用户或者root用户可以修改</p>\n</blockquote>\n<p><strong>语法： chmod [-R] 权限 权限 文件或者文件夹</strong></p>\n<ul>\n<li><p>-R 对文件夹内全部内容应用同样的擦欧总</p>\n</li>\n<li><p>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x hello.txt 把权限修改为rwxr-x–x</p>\n</li>\n<li><ul>\n<li>其中u代表user所属先前，g表示group组权限，o表示其他用户权限</li>\n</ul>\n</li>\n<li><p>chmod -r u&#x3D;rwx,g&#x3D;rx,o&#x3D;x test 将问及那家tst以及文件夹内全部内容权限设置为wrxr-r–x</p>\n</li>\n</ul>\n<p>权限也可以用数字来替代</p>\n<p>用三位数字表示 <strong>r为4,w为2,x为1</strong></p>\n<ul>\n<li><p>0:无任何权限 —</p>\n</li>\n<li><p>1:仅x，–x</p>\n</li>\n<li><p>2:仅w, -w-</p>\n</li>\n<li><p>3:wx, -wx</p>\n</li>\n<li><p>4:仅，r</p>\n</li>\n<li><p>5:r-x,r和x权限, r-x</p>\n</li>\n<li><p>6:有r和w权限，rw-</p>\n</li>\n<li><p>7:全部权限,rwx</p>\n</li>\n</ul>\n<p><strong>简单说就是二进制的和</strong></p>\n<h2 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h2><p>修改文件、文件夹所属用户和用户组</p>\n<p><strong>此命令只可root执行</strong></p>\n<p>语法：<code>chown [-R] [用户][:][用户组] 文件或者文件夹</code></p>\n<h2 id=\"linux各种实用命令\"><a href=\"#linux各种实用命令\" class=\"headerlink\" title=\"linux各种实用命令\"></a>linux各种实用命令</h2><h3 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h3><p>ctrl+c强制退出停止命令运行</p>\n<p>ctrl+d退出当前登录</p>\n<p>history 查看历史输入过的命令</p>\n<p>!命令前缀，自动执行上一次匹配前缀的命令</p>\n<h3 id=\"历史命令搜索：\"><a href=\"#历史命令搜索：\" class=\"headerlink\" title=\"历史命令搜索：\"></a>历史命令搜索：</h3><ul>\n<li><p>通过ctrl+r，输入内容去匹配历史命令</p>\n</li>\n<li><p>键盘左右键，可以得到此命令（不执行）</p>\n</li>\n<li><p>ctrl+a跳到命令开头,ctrl+e跳到命令结尾，ctril+左，向左跳一个单词，ctrl+右，向右跳一个单词</p>\n</li>\n<li><p>ctrl+l清空终端内容,clear也可以得到同样的效果</p>\n</li>\n</ul>\n<h3 id=\"ubuntu-apt命令\"><a href=\"#ubuntu-apt命令\" class=\"headerlink\" title=\"ubuntu-apt命令\"></a>ubuntu-apt命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br><span class=\"line\"><span class=\"comment\">#安装这个包</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install wget</span><br><span class=\"line\"><span class=\"comment\"># 寻找这个应用包</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt search wget</span><br><span class=\"line\"><span class=\"comment\">#移除这个包</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt remove wget</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"systemctl命令\"><a href=\"#systemctl命令\" class=\"headerlink\" title=\"systemctl命令\"></a>systemctl命令</h3><p>systemctl控制软件、服务的启停，开机自启</p>\n<ul>\n<li><p>systemctl start 开启服务</p>\n</li>\n<li><p>systemctl stop 关闭服务</p>\n</li>\n<li><p>systemctl enable 开机自启动</p>\n</li>\n<li><p>systemctl status 查看状态</p>\n</li>\n</ul>\n<h2 id=\"软链接\"><a href=\"#软链接\" class=\"headerlink\" title=\"软链接\"></a>软链接</h2><p>简单来说类似于windows中的快捷方式</p>\n<p>创建一个链接可以指向一个文件、文件夹</p>\n<p>语法： <code>ln -s 参数1 参数2</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s /etc/apt ~/apt</span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">ls</span> -l</span><br><span class=\"line\">total 12</span><br><span class=\"line\">drwxr-xr-x 3 root    root    4096 Feb 11 14:33 1panel-v1.10.24-lts-linux-amd64</span><br><span class=\"line\">lrwxrwxrwx 1 root    root       8 Feb 14 08:16 apt -&gt; /etc/apt</span><br><span class=\"line\">-rw-rw-r-- 1 haxlock haxlock 3586 Jun 29  2020 bt-uninstall.sh</span><br><span class=\"line\">drwxrwxr-x 2 root    root    4096 Feb 14 05:35 <span class=\"built_in\">test</span></span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">cd</span> apt</span><br><span class=\"line\">haxlock@ubuntu:~/apt$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">apt.conf.d   keyrings       preferences.d.save  sources.list.btbackup     sources.list.d  trusted.gpg.d</span><br><span class=\"line\">auth.conf.d  preferences.d  sources.list        sources.list.curtin.orig  trusted.gpg</span><br><span class=\"line\">haxlock@ubuntu:~/apt$ <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">1panel-v1.10.24-lts-linux-amd64  apt  bt-uninstall.sh  <span class=\"built_in\">test</span></span><br><span class=\"line\">haxlock@ubuntu:~$ </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"date-查看时间\"><a href=\"#date-查看时间\" class=\"headerlink\" title=\"date 查看时间\"></a>date 查看时间</h2><p>格式<code>date [-d] [+格式化字符串]</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fri Feb 14 08:17:09 AM UTC 2025</span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">date</span></span><br><span class=\"line\">Fri Feb 14 08:18:34 AM UTC 2025</span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">date</span> +%Y-%m-%d</span><br><span class=\"line\">2025-02-14</span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">date</span> <span class=\"string\">&quot;+%Y-%m-%d %H:%M:%S&quot;</span></span><br><span class=\"line\">2025-02-14 08:20:32</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>%Y年</p>\n</li>\n<li><p>y 年份后两位数字</p>\n</li>\n<li><p>m 月份</p>\n</li>\n<li><p>d 天</p>\n</li>\n<li><p>H 小时（24）</p>\n</li>\n<li><p>M 分钟</p>\n</li>\n<li><p>S 秒</p>\n</li>\n<li><p>s 自1970-01-01至今的时间</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看明天的时间</span></span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">date</span> -d <span class=\"string\">&quot;+1 day&quot;</span></span><br><span class=\"line\">Sat Feb 15 08:26:36 AM UTC 2025</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#去年</span></span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">date</span> -d <span class=\"string\">&quot;-1 year&quot;</span></span><br><span class=\"line\">Wed Feb 14 08:28:10 AM UTC 2024haxlock@ubuntu:~$ <span class=\"built_in\">date</span> -d <span class=\"string\">&quot;-1 year&quot;</span></span><br><span class=\"line\">Wed Feb 14 08:28:10 AM UTC 2024</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改linux时区\"><a href=\"#修改linux时区\" class=\"headerlink\" title=\"修改linux时区\"></a>修改linux时区</h3><h4 id=\"手动修改\"><a href=\"#手动修改\" class=\"headerlink\" title=\"手动修改\"></a>手动修改</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">sudo</span> <span class=\"built_in\">rm</span> -f /etc/localtime</span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime </span><br><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">date</span></span><br><span class=\"line\">Fri Feb 14 04:47:51 PM CST 2025</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ntp自动校准\"><a href=\"#ntp自动校准\" class=\"headerlink\" title=\"ntp自动校准\"></a>ntp自动校准</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start ntp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ntp手动校准\"><a href=\"#ntp手动校准\" class=\"headerlink\" title=\"ntp手动校准\"></a>ntp手动校准</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ntpdate -u ntp.aliyun.com</span><br></pre></td></tr></table></figure>\n\n<p>指向一个ntp服务器即可</p>\n<h2 id=\"查看ip地址\"><a href=\"#查看ip地址\" class=\"headerlink\" title=\"查看ip地址\"></a>查看ip地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n\n<p>主机名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@ubuntu:~$ hostname</span><br><span class=\"line\">ubuntu</span><br></pre></td></tr></table></figure>\n\n<p>修改主机名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname [需要修改的主机名]</span><br></pre></td></tr></table></figure>\n\n<p>配置主机名映射</p>\n<p>先查看本机记录</p>\n<ul>\n<li><p>Windows看 C:\\Windows\\System32\\drivers\\etc\\hosts</p>\n</li>\n<li><p>Linux看： &#x2F;etc&#x2F;hosts</p>\n</li>\n<li><p>配置文件＋‘ip+主机名即可’</p>\n</li>\n</ul>\n<p>再去联网去DNS服务器询问</p>\n<h2 id=\"虚拟机静态ip配置\"><a href=\"#虚拟机静态ip配置\" class=\"headerlink\" title=\"虚拟机静态ip配置\"></a>虚拟机静态ip配置</h2><ul>\n<li><p>首先在Vmware配置好网卡设置</p>\n</li>\n<li><p>进入&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33文件，修改内容</p>\n</li>\n<li><p>将BOOTPROTO后面DHCP改为static</p>\n</li>\n<li><p>末尾加入如下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPADDR=<span class=\"string\">&quot;192.168.88.130&quot;</span> <span class=\"comment\">#IP地址</span></span><br><span class=\"line\">NETMASK=<span class=\"string\">&quot;255.255.255.0&quot;</span> <span class=\"comment\">#子网掩码</span></span><br><span class=\"line\">GATEWAY=<span class=\"string\">&quot;192.168.88.2&quot;</span> <span class=\"comment\">#网关与VMware设置一致</span></span><br><span class=\"line\">DNS1 =<span class=\"string\">&quot;DNS为网关即可&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"网络传输\"><a href=\"#网络传输\" class=\"headerlink\" title=\"网络传输\"></a>网络传输</h2><h3 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h3><p><code>ping [-c num] ip</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@ubuntu:~$ ping -c 5 www.baidu.com</span><br><span class=\"line\">PING www.baidu.com(2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77)) 56 data bytes</span><br><span class=\"line\">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=1 ttl=54 <span class=\"keyword\">time</span>=4.15 ms</span><br><span class=\"line\">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=2 ttl=54 <span class=\"keyword\">time</span>=4.71 ms</span><br><span class=\"line\">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=3 ttl=54 <span class=\"keyword\">time</span>=4.86 ms</span><br><span class=\"line\">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=4 ttl=54 <span class=\"keyword\">time</span>=4.59 ms</span><br><span class=\"line\">64 bytes from 2409:8c20:6:1d55:0:ff:b09c:7d77 (2409:8c20:6:1d55:0:ff:b09c:7d77): icmp_seq=5 ttl=54 <span class=\"keyword\">time</span>=4.59 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- www.baidu.com ping statistics ---</span><br><span class=\"line\">5 packets transmitted, 5 received, 0% packet loss, <span class=\"keyword\">time</span> 4005ms</span><br><span class=\"line\">rtt min/avg/max/mdev = 4.152/4.582/4.862/0.237 ms</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"wget\"><a href=\"#wget\" class=\"headerlink\" title=\"wget\"></a>wget</h3><p>非交互式文件下载器</p>\n<p><code>wget [-b] url</code></p>\n<ul>\n<li><p>-b 后台下载，日志会写道wget-log中</p>\n</li>\n<li><p>url下载链接</p>\n</li>\n</ul>\n<h3 id=\"curl\"><a href=\"#curl\" class=\"headerlink\" title=\"curl\"></a>curl</h3><p>发起http网络请求，可用于下载文件、获取信息</p>\n<p><code>curl [-o] url</code></p>\n<ul>\n<li><p>-o 用于下载文件</p>\n</li>\n<li><p>url请求的地址</p>\n</li>\n</ul>\n<h2 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h2><p>设备与外界通信交流的出入口</p>\n<p>分为物理端口以及虚拟端口</p>\n<ul>\n<li><p>物理端口：也称为接口，如USB,RJ45网口，HDMI</p>\n</li>\n<li><p>虚拟端口：指的计算机内部端口，用于操作系统与外界交互使用</p>\n</li>\n</ul>\n<p>Linux支持65535个端口，这6万多个端口可以分为3类使用</p>\n<ul>\n<li><p>公认端口：1-1023,通常为一些系统内置或者知名程序预留，例如ssh的22，https的443</p>\n</li>\n<li><p>注册端口：1024-49151 ，通常可以随意使用，用于松散地绑定一些程序\\服务</p>\n</li>\n<li><p>动态端口：49152-65535，也通常不绑定程序，而是程序对外进行网络链接时候，用于临时使用</p>\n</li>\n</ul>\n<h3 id=\"nmap查看端口占用情况\"><a href=\"#nmap查看端口占用情况\" class=\"headerlink\" title=\"nmap查看端口占用情况\"></a>nmap查看端口占用情况</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install nmap -y</span><br><span class=\"line\">nmap 127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<p>会扫描某个ip开放地端口</p>\n<h3 id=\"netstat查看指定端口占用情况\"><a href=\"#netstat查看指定端口占用情况\" class=\"headerlink\" title=\"netstat查看指定端口占用情况\"></a>netstat查看指定端口占用情况</h3><p>netstat -anp|grep 端口号</p>\n<p>安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install net-tools</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@root:~$ netstat -anp|grep 3001</span><br><span class=\"line\">(Not all processes could be identified, non-owned process info</span><br><span class=\"line\"> will not be shown, you would have to be root to see it all.)</span><br><span class=\"line\">tcp6       0      0 :::3001                 :::*                    LISTEN      6550/java     </span><br></pre></td></tr></table></figure>\n\n<p>可以看到某端口在被哪个端口占用，进程号(PID)是多少</p>\n<h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><p>也可以说是<strong>任务管理器</strong></p>\n<h3 id=\"查看进程\"><a href=\"#查看进程\" class=\"headerlink\" title=\"查看进程\"></a>查看进程</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps [-e -f]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-e 显示所有的进程</p>\n</li>\n<li><p>-f 以完全格式化的形式展示信息</p>\n</li>\n</ul>\n<p>一般来说，如果ps -ef就是列出所有进程的全部信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@root:~$ ps -f</span><br><span class=\"line\">UID          PID    PPID  C STIME TTY          TIME CMD</span><br><span class=\"line\">haxlock    96215   96214  0 14:49 pts/0    00:00:00 -bash</span><br><span class=\"line\">haxlock    96232   96215 99 14:50 pts/0    00:00:00 ps -f</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>UID:进程所属的用户ID</p>\n</li>\n<li><p>PID: 进程的进程号ID</p>\n</li>\n<li><p>PPID: 进程的父ID</p>\n</li>\n<li><p>C:此进程的CPU占用比</p>\n</li>\n<li><p>STIME：进程的启动时间</p>\n</li>\n<li><p>TTY：启动此进程的终端序号，？表示非终端启动</p>\n</li>\n<li><p>TIME：进程占用CPU的时间</p>\n</li>\n<li><p>CMD：进程的启动路径或运行路径</p>\n</li>\n</ul>\n<p>如果想确认跟踪一个进程的信息</p>\n<p>可以：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep [进程名]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭进程\"><a href=\"#关闭进程\" class=\"headerlink\" title=\"关闭进程\"></a>关闭进程</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> [-9] 进程ID</span><br></pre></td></tr></table></figure>\n\n<p>其中 <strong>-9</strong> 代表强制关闭</p>\n<h2 id=\"top-主机状态详解\"><a href=\"#top-主机状态详解\" class=\"headerlink\" title=\"top 主机状态详解\"></a>top 主机状态详解</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n\n<p>查看主机的各种状态参数，默认每5s刷新一次</p>\n<p>内容较多，此处可当工具查找</p>\n<p><strong>top命令经常用来监控linux的系统状况，是常用的性能分析工具，能够实时显示系统中各个进程的资源占用情况。</strong></p>\n<h3 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a><strong>常用参数</strong></h3><p>top的使用方式 top [-d number] | top [-bnp]</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d number</td>\n<td>number代表秒数，表示top命令显示的页面更新一次的间隔 (default&#x3D;5s)</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>以批次的方式执行top</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>与-b配合使用，表示需要进行几次top命令的输出结果</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>指定特定的pid进程号进行观察</td>\n</tr>\n</tbody></table>\n<p><strong>top命令显示的页面还可以输入以下按键执行相应的功能（注意大小写区分的）</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>？</td>\n<td>显示在top当中可以输入的命令</td>\n</tr>\n<tr>\n<td>P</td>\n<td>以CPU的使用资源排序显示</td>\n</tr>\n<tr>\n<td>M</td>\n<td>以内存的使用资源排序显示</td>\n</tr>\n<tr>\n<td>N</td>\n<td>以pid排序显示</td>\n</tr>\n<tr>\n<td>T</td>\n<td>由进程使用的时间累计排序显示</td>\n</tr>\n<tr>\n<td>k</td>\n<td>给某一个pid一个信号,可以用来杀死进程(9)</td>\n</tr>\n<tr>\n<td>r</td>\n<td>给某个pid重新定制一个nice值（即优先级)</td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出top（用ctrl+c也可以退出top）</td>\n</tr>\n</tbody></table>\n<h3 id=\"top各输出参数含义\"><a href=\"#top各输出参数含义\" class=\"headerlink\" title=\"top各输出参数含义\"></a><strong>top各输出参数含义</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top - 15:23:39 up 7 days,  7:57,  2 <span class=\"built_in\">users</span>,  load average: 0.00, 0.01, 0.00</span><br><span class=\"line\">Tasks: 249 total,   1 running, 248 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s):  0.1 us,  0.2 sy,  0.0 ni, 99.8 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st </span><br><span class=\"line\">MiB Mem :   7894.1 total,    367.4 free,   5022.1 used,   2813.0 buff/cache     </span><br><span class=\"line\">MiB Swap:   2048.0 total,   2047.7 free,      0.3 used.   2872.0 avail Mem </span><br><span class=\"line\"></span><br><span class=\"line\">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                 </span><br><span class=\"line\">  81232 root      20   0  315932   9472   7936 S   0.3   0.1   2:52.54 vmtoolsd                                                </span><br><span class=\"line\">  96087 root      20   0       0      0      0 I   0.3   0.0   0:02.13 kworker/3:2-events                                      </span><br><span class=\"line\">  96214 haxlock   20   0   15124   7088   5120 S   0.3   0.1   0:00.17 sshd                                                    </span><br><span class=\"line\">  96302 haxlock   20   0   11944   5888   3712 R   0.3   0.1   0:00.02 top                                                     </span><br><span class=\"line\">      1 root      20   0   22624  13696   9472 S   0.0   0.2   1:22.07 systemd                                                 </span><br><span class=\"line\">      2 root      20   0       0      0      0 S   0.0   0.0   0:00.89 kthreadd         </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一、top前五条信息解释\"><a href=\"#一、top前五条信息解释\" class=\"headerlink\" title=\"一、top前五条信息解释\"></a>一、top前五条信息解释</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top - 15:23:39 up 7 days,  7:57,  2 <span class=\"built_in\">users</span>,  load average: 0.00, 0.01, 0.00</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>14:49:28</td>\n<td>表示当前时间</td>\n</tr>\n<tr>\n<td>up 1:33</td>\n<td>系统远行时间，格式为时：分</td>\n</tr>\n<tr>\n<td>1 user</td>\n<td>当前登陆用户数</td>\n</tr>\n<tr>\n<td>load average: 0.00, 0.00, 0.00</td>\n<td>系统负载，即任务队列的平均长度。 三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tasks: 249 total,   1 running, 248 sleeping,   0 stopped,   0 zombi</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Tasks: 80 total</td>\n<td>进程总数</td>\n</tr>\n<tr>\n<td>2 running</td>\n<td>正在运行的进程数</td>\n</tr>\n<tr>\n<td>78 sleeping</td>\n<td>睡眠的进程数</td>\n</tr>\n<tr>\n<td>0 stopped</td>\n<td>停止的进程数</td>\n</tr>\n<tr>\n<td>0 zombie</td>\n<td>僵尸进程数</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%Cpu(s):  0.1 us,  0.2 sy,  0.0 ni, 99.8 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 s</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0.0%us</td>\n<td>用户空间占用CPU百分比</td>\n</tr>\n<tr>\n<td>0.0%sy</td>\n<td>内核空间占用CPU百分比</td>\n</tr>\n<tr>\n<td>0.0%ni</td>\n<td>用户进程空间内改变过优先级的进程占用CPU百分比</td>\n</tr>\n<tr>\n<td>100.0%id</td>\n<td>空闲CPU百分比</td>\n</tr>\n<tr>\n<td>0.0%wa</td>\n<td>等待输入输出的CPU时间百分比</td>\n</tr>\n<tr>\n<td>0.0%hi</td>\n<td>硬中断（Hardware IRQ）占用CPU的百分比</td>\n</tr>\n<tr>\n<td>0.0%si</td>\n<td>软中断（Software Interrupts）占用CPU的百分比</td>\n</tr>\n<tr>\n<td>0.0 st</td>\n<td>用于有虚拟cpu的情况，用来指示被虚拟机偷掉的cpu时间</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mem: 1922488k total, 406936k used, 1515552k free, 11940k buffers</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1922488k total</td>\n<td>物理内存总量</td>\n</tr>\n<tr>\n<td>406936k used</td>\n<td>使用的物理内存总量</td>\n</tr>\n<tr>\n<td>1515552k free</td>\n<td>空闲内存总量</td>\n</tr>\n<tr>\n<td>11940k buffers</td>\n<td>用作内核缓存的内存量</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Swap: 835576k total, 0k used, 835576k free, 111596k cached</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>835576k total</td>\n<td>交换区总量</td>\n</tr>\n<tr>\n<td>0k used</td>\n<td>使用的交换区总量</td>\n</tr>\n<tr>\n<td>835576k free</td>\n<td>空闲交换区总量</td>\n</tr>\n<tr>\n<td>111596k cached</td>\n<td>缓冲的交换区总量</td>\n</tr>\n</tbody></table>\n<h4 id=\"二、进程信息\"><a href=\"#二、进程信息\" class=\"headerlink\" title=\"二、进程信息\"></a>二、进程信息</h4><table>\n<thead>\n<tr>\n<th>列名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PID</td>\n<td>进程id</td>\n</tr>\n<tr>\n<td>USER</td>\n<td>进程所有者的用户名</td>\n</tr>\n<tr>\n<td>PR</td>\n<td>优先级</td>\n</tr>\n<tr>\n<td>NI</td>\n<td>nice值。负值表示高优先级，正值表示低优先级</td>\n</tr>\n<tr>\n<td>VIRT</td>\n<td>进程使用的虚拟内存总量，单位kb。VIRT&#x3D;SWAP+RES</td>\n</tr>\n<tr>\n<td>RES</td>\n<td>进程使用的、未被换出的物理内存大小，单位kb。RES&#x3D;CODE+DATA</td>\n</tr>\n<tr>\n<td>SHR</td>\n<td>共享内存大小，单位kb</td>\n</tr>\n<tr>\n<td>S</td>\n<td>进程状态。D&#x3D;不可中断的睡眠状态 R&#x3D;运行 S&#x3D;睡眠 T&#x3D;跟踪&#x2F;停止 Z&#x3D;僵尸进程</td>\n</tr>\n<tr>\n<td>%CPU</td>\n<td>上次更新到现在的CPU时间占用百分比</td>\n</tr>\n<tr>\n<td>%MEM</td>\n<td>进程使用的物理内存百分比</td>\n</tr>\n<tr>\n<td>TIME+</td>\n<td>进程使用的CPU时间总计，单位1&#x2F;100秒</td>\n</tr>\n<tr>\n<td>COMMAND</td>\n<td>命令名&#x2F;命令行</td>\n</tr>\n</tbody></table>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>一系列命令本质上就是一个个可执行文件。</p>\n<p>例如：cd本体就是&#x2F;usr&#x2F;bin&#x2F;cd这个文件下的文件</p>\n<p>查看当前环境变量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">env</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PATH\"><a href=\"#PATH\" class=\"headerlink\" title=\"PATH\"></a>PATH</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@root:~$ <span class=\"built_in\">env</span> | grep PATH</span><br><span class=\"line\">CLASSPATH=.:/usr/local/jdk21/lib</span><br><span class=\"line\">PATH=.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>\n\n<p>可以得到这么一些键值对，其实从本以上来理解，查询环境变量，本就是通过在<strong>PATH键对应的值</strong>中去查找相应的命令环境</p>\n<p>会在值中挨个去搜索环境变量的值，直到寻找到相应的内容。</p>\n<h3 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"$符号\"></a>$符号</h3><p>$是用于取”变量”的值。</p>\n<p>取得环境变量的值可以通过语法：$来获得</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@root:~$ <span class=\"built_in\">echo</span> <span class=\"variable\">$PATH</span></span><br><span class=\"line\">.:/usr/local/jdk21/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>如果你给你自己开发的程序记录在环境变量中，那么也可以通过你自己设定的命令行来快速地执行这个环境变量</p>\n<h4 id=\"自行设置方法：\"><a href=\"#自行设置方法：\" class=\"headerlink\" title=\"自行设置方法：\"></a>自行设置方法：</h4><ul>\n<li>临时设置：语法：export 变量名称&#x3D;变量值</li>\n</ul>"},{"title":"windows配置WSL(ubuntu)环境","date":"2025-01-19T13:25:00.000Z","_content":"\n## 什么是WSL\n\n**WSL**：Windows Subsystem for Linux,是用于Windows系统上的Linux子系统\n\n- 完全**直连**计算机硬件\n\n- 无需虚拟机虚拟硬件\n  \n  <!-- more -->\n\n是win10系统带来的全新特性\n\n- 传统方式获取linux操作环境，都是通过虚拟机，如VMware\n\n- 使用WSL，可以以非常轻量化的方式，得到linux系统环境\n\n## 为什么要用WSL\n\n- 使用范围广，大家都在用\n\n- 非常方便，轻量化，节省内存\n\n## WSL 使用方式（WIN10）\n\n- 首先 WIN+X打开 *应用和功能*  \n\n然后点击程序和功能\n\n   ![](http://m401a.haxlock.top:3003/uploads/d2a6e589-50af-4e59-ab1a-c18179ab875b.jpg)\n\n- 然后点击启用或关闭Windows功能\n  \n  ![](http://m401a.haxlock.top:3003/uploads/8aa8fb11-50b9-4668-a8a2-140abed46122.jpg)\n\n**找到 *适用于Linux的Windows子系统* 并打勾**\n\n之后可能会重启计算机，此时点击确认重启。\n\n- 重启结束后，进入微软商店，搜索ubuntu\n\n![](http://m401a.haxlock.top:3003/uploads/eb3275cc-5e9c-4299-a364-0e5d0ccb49cd.jpg)\n\n众多版本均可选择，看你喜欢就好。\n\n- 等待安装完成，此时在搜索框内搜索ubuntu，点击打开即可进入ubuntu终端界面，此时这个系统并非虚拟化。而是实打实本地直连的操作系统。后续配置也同正常ubuntu一样即可。非常的便捷方便\n\n## win内ubuntu终端优化\n\n由于原始的直接安装的ubuntu页面不太好用，页面不美观等问题，这边有一个方法用于美化ubuntu页面。   \n\n### 在微软商店下载windows Terminal\n\n![](http://m401a.haxlock.top:3003/uploads/122a1654-624a-4f12-a2a7-32487cd19e15.jpg)\n\n下载完成后，打开，可以发现终端上有个小箭头，此时可以切换到ubuntu即可\n\n![](http://m401a.haxlock.top:3003/uploads/ccfd3796-8dee-4783-ae3a-a4f2486a6c59.jpg)\n\n这样就可以愉快的使用ubuntu进行操作了(yeah!)\n\n能看到这的小伙伴我想以及超越了99%的人了，加油吧骚年！\n","source":"_posts/linux学习/windows配置WSL(ubuntu)环境.md","raw":"---\ntitle: windows配置WSL(ubuntu)环境\ndate: 2025/1/19 21:25:00\ntags: linux\ncategories: \n- [服务器]\n- [运维]\n- [linux]\n---\n\n## 什么是WSL\n\n**WSL**：Windows Subsystem for Linux,是用于Windows系统上的Linux子系统\n\n- 完全**直连**计算机硬件\n\n- 无需虚拟机虚拟硬件\n  \n  <!-- more -->\n\n是win10系统带来的全新特性\n\n- 传统方式获取linux操作环境，都是通过虚拟机，如VMware\n\n- 使用WSL，可以以非常轻量化的方式，得到linux系统环境\n\n## 为什么要用WSL\n\n- 使用范围广，大家都在用\n\n- 非常方便，轻量化，节省内存\n\n## WSL 使用方式（WIN10）\n\n- 首先 WIN+X打开 *应用和功能*  \n\n然后点击程序和功能\n\n   ![](http://m401a.haxlock.top:3003/uploads/d2a6e589-50af-4e59-ab1a-c18179ab875b.jpg)\n\n- 然后点击启用或关闭Windows功能\n  \n  ![](http://m401a.haxlock.top:3003/uploads/8aa8fb11-50b9-4668-a8a2-140abed46122.jpg)\n\n**找到 *适用于Linux的Windows子系统* 并打勾**\n\n之后可能会重启计算机，此时点击确认重启。\n\n- 重启结束后，进入微软商店，搜索ubuntu\n\n![](http://m401a.haxlock.top:3003/uploads/eb3275cc-5e9c-4299-a364-0e5d0ccb49cd.jpg)\n\n众多版本均可选择，看你喜欢就好。\n\n- 等待安装完成，此时在搜索框内搜索ubuntu，点击打开即可进入ubuntu终端界面，此时这个系统并非虚拟化。而是实打实本地直连的操作系统。后续配置也同正常ubuntu一样即可。非常的便捷方便\n\n## win内ubuntu终端优化\n\n由于原始的直接安装的ubuntu页面不太好用，页面不美观等问题，这边有一个方法用于美化ubuntu页面。   \n\n### 在微软商店下载windows Terminal\n\n![](http://m401a.haxlock.top:3003/uploads/122a1654-624a-4f12-a2a7-32487cd19e15.jpg)\n\n下载完成后，打开，可以发现终端上有个小箭头，此时可以切换到ubuntu即可\n\n![](http://m401a.haxlock.top:3003/uploads/ccfd3796-8dee-4783-ae3a-a4f2486a6c59.jpg)\n\n这样就可以愉快的使用ubuntu进行操作了(yeah!)\n\n能看到这的小伙伴我想以及超越了99%的人了，加油吧骚年！\n","slug":"linux学习/windows配置WSL(ubuntu)环境","published":1,"updated":"2025-02-23T11:07:54.254Z","comments":1,"layout":"post","photos":[],"_id":"cm7n0r3az0003tqvy8t2y9mdg","content":"<h2 id=\"什么是WSL\"><a href=\"#什么是WSL\" class=\"headerlink\" title=\"什么是WSL\"></a>什么是WSL</h2><p><strong>WSL</strong>：Windows Subsystem for Linux,是用于Windows系统上的Linux子系统</p>\n<ul>\n<li><p>完全<strong>直连</strong>计算机硬件</p>\n</li>\n<li><p>无需虚拟机虚拟硬件</p>\n<span id=\"more\"></span></li>\n</ul>\n<p>是win10系统带来的全新特性</p>\n<ul>\n<li><p>传统方式获取linux操作环境，都是通过虚拟机，如VMware</p>\n</li>\n<li><p>使用WSL，可以以非常轻量化的方式，得到linux系统环境</p>\n</li>\n</ul>\n<h2 id=\"为什么要用WSL\"><a href=\"#为什么要用WSL\" class=\"headerlink\" title=\"为什么要用WSL\"></a>为什么要用WSL</h2><ul>\n<li><p>使用范围广，大家都在用</p>\n</li>\n<li><p>非常方便，轻量化，节省内存</p>\n</li>\n</ul>\n<h2 id=\"WSL-使用方式（WIN10）\"><a href=\"#WSL-使用方式（WIN10）\" class=\"headerlink\" title=\"WSL 使用方式（WIN10）\"></a>WSL 使用方式（WIN10）</h2><ul>\n<li>首先 WIN+X打开 <em>应用和功能</em></li>\n</ul>\n<p>然后点击程序和功能</p>\n<p>   <img data-src=\"http://m401a.haxlock.top:3003/uploads/d2a6e589-50af-4e59-ab1a-c18179ab875b.jpg\"></p>\n<ul>\n<li><p>然后点击启用或关闭Windows功能</p>\n<p><img data-src=\"http://m401a.haxlock.top:3003/uploads/8aa8fb11-50b9-4668-a8a2-140abed46122.jpg\"></p>\n</li>\n</ul>\n<p><strong>找到 <em>适用于Linux的Windows子系统</em> 并打勾</strong></p>\n<p>之后可能会重启计算机，此时点击确认重启。</p>\n<ul>\n<li>重启结束后，进入微软商店，搜索ubuntu</li>\n</ul>\n<p><img data-src=\"http://m401a.haxlock.top:3003/uploads/eb3275cc-5e9c-4299-a364-0e5d0ccb49cd.jpg\"></p>\n<p>众多版本均可选择，看你喜欢就好。</p>\n<ul>\n<li>等待安装完成，此时在搜索框内搜索ubuntu，点击打开即可进入ubuntu终端界面，此时这个系统并非虚拟化。而是实打实本地直连的操作系统。后续配置也同正常ubuntu一样即可。非常的便捷方便</li>\n</ul>\n<h2 id=\"win内ubuntu终端优化\"><a href=\"#win内ubuntu终端优化\" class=\"headerlink\" title=\"win内ubuntu终端优化\"></a>win内ubuntu终端优化</h2><p>由于原始的直接安装的ubuntu页面不太好用，页面不美观等问题，这边有一个方法用于美化ubuntu页面。   </p>\n<h3 id=\"在微软商店下载windows-Terminal\"><a href=\"#在微软商店下载windows-Terminal\" class=\"headerlink\" title=\"在微软商店下载windows Terminal\"></a>在微软商店下载windows Terminal</h3><p><img data-src=\"http://m401a.haxlock.top:3003/uploads/122a1654-624a-4f12-a2a7-32487cd19e15.jpg\"></p>\n<p>下载完成后，打开，可以发现终端上有个小箭头，此时可以切换到ubuntu即可</p>\n<p><img data-src=\"http://m401a.haxlock.top:3003/uploads/ccfd3796-8dee-4783-ae3a-a4f2486a6c59.jpg\"></p>\n<p>这样就可以愉快的使用ubuntu进行操作了(yeah!)</p>\n<p>能看到这的小伙伴我想以及超越了99%的人了，加油吧骚年！</p>\n","excerpt":"<h2 id=\"什么是WSL\"><a href=\"#什么是WSL\" class=\"headerlink\" title=\"什么是WSL\"></a>什么是WSL</h2><p><strong>WSL</strong>：Windows Subsystem for Linux,是用于Windows系统上的Linux子系统</p>\n<ul>\n<li><p>完全<strong>直连</strong>计算机硬件</p>\n</li>\n<li><p>无需虚拟机虚拟硬件</p>","more":"</li>\n</ul>\n<p>是win10系统带来的全新特性</p>\n<ul>\n<li><p>传统方式获取linux操作环境，都是通过虚拟机，如VMware</p>\n</li>\n<li><p>使用WSL，可以以非常轻量化的方式，得到linux系统环境</p>\n</li>\n</ul>\n<h2 id=\"为什么要用WSL\"><a href=\"#为什么要用WSL\" class=\"headerlink\" title=\"为什么要用WSL\"></a>为什么要用WSL</h2><ul>\n<li><p>使用范围广，大家都在用</p>\n</li>\n<li><p>非常方便，轻量化，节省内存</p>\n</li>\n</ul>\n<h2 id=\"WSL-使用方式（WIN10）\"><a href=\"#WSL-使用方式（WIN10）\" class=\"headerlink\" title=\"WSL 使用方式（WIN10）\"></a>WSL 使用方式（WIN10）</h2><ul>\n<li>首先 WIN+X打开 <em>应用和功能</em></li>\n</ul>\n<p>然后点击程序和功能</p>\n<p>   <img data-src=\"http://m401a.haxlock.top:3003/uploads/d2a6e589-50af-4e59-ab1a-c18179ab875b.jpg\"></p>\n<ul>\n<li><p>然后点击启用或关闭Windows功能</p>\n<p><img data-src=\"http://m401a.haxlock.top:3003/uploads/8aa8fb11-50b9-4668-a8a2-140abed46122.jpg\"></p>\n</li>\n</ul>\n<p><strong>找到 <em>适用于Linux的Windows子系统</em> 并打勾</strong></p>\n<p>之后可能会重启计算机，此时点击确认重启。</p>\n<ul>\n<li>重启结束后，进入微软商店，搜索ubuntu</li>\n</ul>\n<p><img data-src=\"http://m401a.haxlock.top:3003/uploads/eb3275cc-5e9c-4299-a364-0e5d0ccb49cd.jpg\"></p>\n<p>众多版本均可选择，看你喜欢就好。</p>\n<ul>\n<li>等待安装完成，此时在搜索框内搜索ubuntu，点击打开即可进入ubuntu终端界面，此时这个系统并非虚拟化。而是实打实本地直连的操作系统。后续配置也同正常ubuntu一样即可。非常的便捷方便</li>\n</ul>\n<h2 id=\"win内ubuntu终端优化\"><a href=\"#win内ubuntu终端优化\" class=\"headerlink\" title=\"win内ubuntu终端优化\"></a>win内ubuntu终端优化</h2><p>由于原始的直接安装的ubuntu页面不太好用，页面不美观等问题，这边有一个方法用于美化ubuntu页面。   </p>\n<h3 id=\"在微软商店下载windows-Terminal\"><a href=\"#在微软商店下载windows-Terminal\" class=\"headerlink\" title=\"在微软商店下载windows Terminal\"></a>在微软商店下载windows Terminal</h3><p><img data-src=\"http://m401a.haxlock.top:3003/uploads/122a1654-624a-4f12-a2a7-32487cd19e15.jpg\"></p>\n<p>下载完成后，打开，可以发现终端上有个小箭头，此时可以切换到ubuntu即可</p>\n<p><img data-src=\"http://m401a.haxlock.top:3003/uploads/ccfd3796-8dee-4783-ae3a-a4f2486a6c59.jpg\"></p>\n<p>这样就可以愉快的使用ubuntu进行操作了(yeah!)</p>\n<p>能看到这的小伙伴我想以及超越了99%的人了，加油吧骚年！</p>"},{"title":"关于docker部署nextcloud和优化的一些经历记录","date":"2025-02-20T06:35:00.000Z","_content":"\n待填坑","source":"_posts/linux学习/关于docker部署nextcloud和优化的一些经历记录.md","raw":"---\ntitle: 关于docker部署nextcloud和优化的一些经历记录\ndate: 2025/2/20 14:35:00\ntags: linux\ncategories:\n\n- [服务器]\n- [运维]\n- [linux]\n\n---\n\n待填坑","slug":"linux学习/关于docker部署nextcloud和优化的一些经历记录","published":1,"updated":"2025-02-23T11:07:54.254Z","comments":1,"layout":"post","photos":[],"_id":"cm7n0r3b20005tqvyejko15cu","content":"<p>待填坑</p>\n","excerpt":"","more":"<p>待填坑</p>\n"},{"title":"关于在使用X window界面时候如何切换到其它tty?","date":"2025-02-26T16:00:00.000Z","_content":"\n# X window与文字模式的切换\n\n<!-- more -->\n\n大部分人用ubuntu第一次接触到的肯定都是窗口管理员环境\n\n但是没看到纯粹的命令行环境啊\n\n**实际上是有的**\n\n其实也就是Terminal或者终端模式\n\n切换方式简单粗暴\n\n## 切换方式\n\n[Ctrl]+[Alt]+[F1]~[F6]组合按钮\n\n- [Ctrl]+[Alt]+[F1]:图形接口界面\n\n- 其他2~6是终端界面\n\n如果你在X window环境下，只要按[Ctrl]+[Alt]+[F2]~[F6]，就可以直接切换到中断了，具体自己试试，一试便知[doge]\n\n\n","source":"_posts/linux学习/关于在使用X window界面时候如何切换到其它tty?.md","raw":"---\ntitle: 关于在使用X window界面时候如何切换到其它tty?\ndate: 2025/2/27\ntags: linux\ncategories:\n\n- [服务器]\n- [运维]\n- [linux]\n\n---\n\n# X window与文字模式的切换\n\n<!-- more -->\n\n大部分人用ubuntu第一次接触到的肯定都是窗口管理员环境\n\n但是没看到纯粹的命令行环境啊\n\n**实际上是有的**\n\n其实也就是Terminal或者终端模式\n\n切换方式简单粗暴\n\n## 切换方式\n\n[Ctrl]+[Alt]+[F1]~[F6]组合按钮\n\n- [Ctrl]+[Alt]+[F1]:图形接口界面\n\n- 其他2~6是终端界面\n\n如果你在X window环境下，只要按[Ctrl]+[Alt]+[F2]~[F6]，就可以直接切换到中断了，具体自己试试，一试便知[doge]\n\n\n","slug":"linux学习/关于在使用X window界面时候如何切换到其它tty?","published":1,"updated":"2025-02-27T07:26:19.727Z","_id":"cm7n0r3b40006tqvyeludcwbf","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"X-window与文字模式的切换\"><a href=\"#X-window与文字模式的切换\" class=\"headerlink\" title=\"X window与文字模式的切换\"></a>X window与文字模式的切换</h1><span id=\"more\"></span>\n\n<p>大部分人用ubuntu第一次接触到的肯定都是窗口管理员环境</p>\n<p>但是没看到纯粹的命令行环境啊</p>\n<p><strong>实际上是有的</strong></p>\n<p>其实也就是Terminal或者终端模式</p>\n<p>切换方式简单粗暴</p>\n<h2 id=\"切换方式\"><a href=\"#切换方式\" class=\"headerlink\" title=\"切换方式\"></a>切换方式</h2><p>[Ctrl]+[Alt]+[F1]~[F6]组合按钮</p>\n<ul>\n<li><p>[Ctrl]+[Alt]+[F1]:图形接口界面</p>\n</li>\n<li><p>其他2~6是终端界面</p>\n</li>\n</ul>\n<p>如果你在X window环境下，只要按[Ctrl]+[Alt]+[F2]~[F6]，就可以直接切换到中断了，具体自己试试，一试便知[doge]</p>\n","excerpt":"<h1 id=\"X-window与文字模式的切换\"><a href=\"#X-window与文字模式的切换\" class=\"headerlink\" title=\"X window与文字模式的切换\"></a>X window与文字模式的切换</h1>","more":"<p>大部分人用ubuntu第一次接触到的肯定都是窗口管理员环境</p>\n<p>但是没看到纯粹的命令行环境啊</p>\n<p><strong>实际上是有的</strong></p>\n<p>其实也就是Terminal或者终端模式</p>\n<p>切换方式简单粗暴</p>\n<h2 id=\"切换方式\"><a href=\"#切换方式\" class=\"headerlink\" title=\"切换方式\"></a>切换方式</h2><p>[Ctrl]+[Alt]+[F1]~[F6]组合按钮</p>\n<ul>\n<li><p>[Ctrl]+[Alt]+[F1]:图形接口界面</p>\n</li>\n<li><p>其他2~6是终端界面</p>\n</li>\n</ul>\n<p>如果你在X window环境下，只要按[Ctrl]+[Alt]+[F2]~[F6]，就可以直接切换到中断了，具体自己试试，一试便知[doge]</p>"},{"title":"关于ubuntu创建新用户时候遇到的一些问题","date":"2025-02-18T11:35:00.000Z","_content":"\n# 问题\n\n我在根据教程来创建linux新用户时候，遇到了不少棘手的问题，这边分享一下我的经历。\n\n主要问题是，**我创建的新用户，进入用户bash后，什么功能都没有**\n\n<!-- more -->\n\n这让我非常不解，情况大概就是下面这样的\n\n```bash\nroot@ubuntu:~# login\nubuntu login: test\nPassword: $ ls\n$ cd ..\n$ ls\nhaxlock  lost+found  test\n```\n\n我懵逼了，这什么情况？怎么和我用其他用户不一样？\n\n正常我们使用账户的情况应该是这样的：\n\n```bash\nroot@ubuntu:~# apt update\n```\n\n有路径，有用户名称，有主机名称\n\n并且有很多可以使用的快捷键，例如tab快速补充，上下键历史命令等，但是，这个用户都没有！\n\n对于我一个新手菜鸟来说，着实有些蒙圈\n\n但是我想到一个关键的问题，先前那些说白了用的都是ubuntu基于bash的shell终端操作，然而，有没有可能这个新用户他的bash有问题呢？\n\n我马上排查这个问题，寻找这个用户的shell路径\n\n```bash\n$ echo $SHELL  \n```\n\n果然输出如下\n\n```bash\n/bin/sh\n```\n\n我又切换会root用户查询了一下，输出如下：\n\n```bash\n/bin/bash\n```\n\n这和我们的预期不同，按照root用户来说，应该是 **/bin/bash** 才对，\n\n因此这边我上网查了一下修改shell的命令，如下：\n\n```bash\n$ chsh -s /bin/bash\n```\n\n> `chsh` 是 Linux 系统中用于更改用户登录 Shell 的命令。通过 `chsh`，用户可以将自己的默认 Shell 更改为系统中已安装的其他 Shell（如 `/bin/bash`、`/bin/zsh` 等）。\n\n此外，在root用户下，修改别人的shell是这样的\n\n```bash\nchsh -s /bin/zsh testuser\n```\n\n> 注意，上述操作结束后，需要用户重新登录进入才能生效\n\n后面重新登录进入用户后，惊喜地发现\n\n```bash\nhaxlock@ubuntu:~$ sudo su - test\n[sudo] password for haxlock: \ntest@ubuntu:~$ ls\ntest@ubuntu:~$ cd ..\n```\n\n已经可以成功显示相关信息，并且shell所有地快捷键等操作均可以进行了。\n\n问题就那么愉快地解决了。\n","source":"_posts/linux学习/关于新创建用户遇到的一些bug.md","raw":"---\ntitle: 关于ubuntu创建新用户时候遇到的一些问题\ndate: 2025/2/18 19:35:00\ntags: linux\ncategories:\n\n- [服务器]\n- [运维]\n- [linux]\n\n---\n\n# 问题\n\n我在根据教程来创建linux新用户时候，遇到了不少棘手的问题，这边分享一下我的经历。\n\n主要问题是，**我创建的新用户，进入用户bash后，什么功能都没有**\n\n<!-- more -->\n\n这让我非常不解，情况大概就是下面这样的\n\n```bash\nroot@ubuntu:~# login\nubuntu login: test\nPassword: $ ls\n$ cd ..\n$ ls\nhaxlock  lost+found  test\n```\n\n我懵逼了，这什么情况？怎么和我用其他用户不一样？\n\n正常我们使用账户的情况应该是这样的：\n\n```bash\nroot@ubuntu:~# apt update\n```\n\n有路径，有用户名称，有主机名称\n\n并且有很多可以使用的快捷键，例如tab快速补充，上下键历史命令等，但是，这个用户都没有！\n\n对于我一个新手菜鸟来说，着实有些蒙圈\n\n但是我想到一个关键的问题，先前那些说白了用的都是ubuntu基于bash的shell终端操作，然而，有没有可能这个新用户他的bash有问题呢？\n\n我马上排查这个问题，寻找这个用户的shell路径\n\n```bash\n$ echo $SHELL  \n```\n\n果然输出如下\n\n```bash\n/bin/sh\n```\n\n我又切换会root用户查询了一下，输出如下：\n\n```bash\n/bin/bash\n```\n\n这和我们的预期不同，按照root用户来说，应该是 **/bin/bash** 才对，\n\n因此这边我上网查了一下修改shell的命令，如下：\n\n```bash\n$ chsh -s /bin/bash\n```\n\n> `chsh` 是 Linux 系统中用于更改用户登录 Shell 的命令。通过 `chsh`，用户可以将自己的默认 Shell 更改为系统中已安装的其他 Shell（如 `/bin/bash`、`/bin/zsh` 等）。\n\n此外，在root用户下，修改别人的shell是这样的\n\n```bash\nchsh -s /bin/zsh testuser\n```\n\n> 注意，上述操作结束后，需要用户重新登录进入才能生效\n\n后面重新登录进入用户后，惊喜地发现\n\n```bash\nhaxlock@ubuntu:~$ sudo su - test\n[sudo] password for haxlock: \ntest@ubuntu:~$ ls\ntest@ubuntu:~$ cd ..\n```\n\n已经可以成功显示相关信息，并且shell所有地快捷键等操作均可以进行了。\n\n问题就那么愉快地解决了。\n","slug":"linux学习/关于新创建用户遇到的一些bug","published":1,"updated":"2025-02-23T13:57:58.824Z","comments":1,"layout":"post","photos":[],"_id":"cm7n0r3ba000atqvy869mhd26","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>我在根据教程来创建linux新用户时候，遇到了不少棘手的问题，这边分享一下我的经历。</p>\n<p>主要问题是，<strong>我创建的新用户，进入用户bash后，什么功能都没有</strong></p>\n<span id=\"more\"></span>\n\n<p>这让我非常不解，情况大概就是下面这样的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~# login</span><br><span class=\"line\">ubuntu login: <span class=\"built_in\">test</span></span><br><span class=\"line\">Password: $ <span class=\"built_in\">ls</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">haxlock  lost+found  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<p>我懵逼了，这什么情况？怎么和我用其他用户不一样？</p>\n<p>正常我们使用账户的情况应该是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~# apt update</span><br></pre></td></tr></table></figure>\n\n<p>有路径，有用户名称，有主机名称</p>\n<p>并且有很多可以使用的快捷键，例如tab快速补充，上下键历史命令等，但是，这个用户都没有！</p>\n<p>对于我一个新手菜鸟来说，着实有些蒙圈</p>\n<p>但是我想到一个关键的问题，先前那些说白了用的都是ubuntu基于bash的shell终端操作，然而，有没有可能这个新用户他的bash有问题呢？</p>\n<p>我马上排查这个问题，寻找这个用户的shell路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span>  </span><br></pre></td></tr></table></figure>\n\n<p>果然输出如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/sh</span><br></pre></td></tr></table></figure>\n\n<p>我又切换会root用户查询了一下，输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>这和我们的预期不同，按照root用户来说，应该是 <strong>&#x2F;bin&#x2F;bash</strong> 才对，</p>\n<p>因此这边我上网查了一下修改shell的命令，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chsh -s /bin/bash</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>chsh</code> 是 Linux 系统中用于更改用户登录 Shell 的命令。通过 <code>chsh</code>，用户可以将自己的默认 Shell 更改为系统中已安装的其他 Shell（如 <code>/bin/bash</code>、<code>/bin/zsh</code> 等）。</p>\n</blockquote>\n<p>此外，在root用户下，修改别人的shell是这样的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/zsh testuser</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意，上述操作结束后，需要用户重新登录进入才能生效</p>\n</blockquote>\n<p>后面重新登录进入用户后，惊喜地发现</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">sudo</span> su - <span class=\"built_in\">test</span></span><br><span class=\"line\">[<span class=\"built_in\">sudo</span>] password <span class=\"keyword\">for</span> haxlock: </span><br><span class=\"line\"><span class=\"built_in\">test</span>@ubuntu:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\"><span class=\"built_in\">test</span>@ubuntu:~$ <span class=\"built_in\">cd</span> ..</span><br></pre></td></tr></table></figure>\n\n<p>已经可以成功显示相关信息，并且shell所有地快捷键等操作均可以进行了。</p>\n<p>问题就那么愉快地解决了。</p>\n","excerpt":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>我在根据教程来创建linux新用户时候，遇到了不少棘手的问题，这边分享一下我的经历。</p>\n<p>主要问题是，<strong>我创建的新用户，进入用户bash后，什么功能都没有</strong></p>","more":"<p>这让我非常不解，情况大概就是下面这样的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~# login</span><br><span class=\"line\">ubuntu login: <span class=\"built_in\">test</span></span><br><span class=\"line\">Password: $ <span class=\"built_in\">ls</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">haxlock  lost+found  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<p>我懵逼了，这什么情况？怎么和我用其他用户不一样？</p>\n<p>正常我们使用账户的情况应该是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~# apt update</span><br></pre></td></tr></table></figure>\n\n<p>有路径，有用户名称，有主机名称</p>\n<p>并且有很多可以使用的快捷键，例如tab快速补充，上下键历史命令等，但是，这个用户都没有！</p>\n<p>对于我一个新手菜鸟来说，着实有些蒙圈</p>\n<p>但是我想到一个关键的问题，先前那些说白了用的都是ubuntu基于bash的shell终端操作，然而，有没有可能这个新用户他的bash有问题呢？</p>\n<p>我马上排查这个问题，寻找这个用户的shell路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span>  </span><br></pre></td></tr></table></figure>\n\n<p>果然输出如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/sh</span><br></pre></td></tr></table></figure>\n\n<p>我又切换会root用户查询了一下，输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>这和我们的预期不同，按照root用户来说，应该是 <strong>&#x2F;bin&#x2F;bash</strong> 才对，</p>\n<p>因此这边我上网查了一下修改shell的命令，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chsh -s /bin/bash</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>chsh</code> 是 Linux 系统中用于更改用户登录 Shell 的命令。通过 <code>chsh</code>，用户可以将自己的默认 Shell 更改为系统中已安装的其他 Shell（如 <code>/bin/bash</code>、<code>/bin/zsh</code> 等）。</p>\n</blockquote>\n<p>此外，在root用户下，修改别人的shell是这样的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/zsh testuser</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意，上述操作结束后，需要用户重新登录进入才能生效</p>\n</blockquote>\n<p>后面重新登录进入用户后，惊喜地发现</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haxlock@ubuntu:~$ <span class=\"built_in\">sudo</span> su - <span class=\"built_in\">test</span></span><br><span class=\"line\">[<span class=\"built_in\">sudo</span>] password <span class=\"keyword\">for</span> haxlock: </span><br><span class=\"line\"><span class=\"built_in\">test</span>@ubuntu:~$ <span class=\"built_in\">ls</span></span><br><span class=\"line\"><span class=\"built_in\">test</span>@ubuntu:~$ <span class=\"built_in\">cd</span> ..</span><br></pre></td></tr></table></figure>\n\n<p>已经可以成功显示相关信息，并且shell所有地快捷键等操作均可以进行了。</p>\n<p>问题就那么愉快地解决了。</p>"},{"title":"如何卸载/重装ubuntu的桌面界面？","date":"2025-02-25T16:00:00.000Z","_content":"\n# 禁用图形界面\n\nUbuntu 使用 **systemd** 管理系统服务，图形界面通常由 **gdm3** 或 **lightdm** 管理。你可以禁用图形界面服务，使系统开机后直接进入命令行。\n\n<!-- more -->\n\n## 禁用`gdm3`(假设你是GNOME桌面)\n\n- 停止当前运行的图形界面服务：\n\n```bash\nsudo systemctl stop gdm3\n```\n\n- 禁用gdm3服务，使他开机不启动：\n\n```bash\nsudo systemctl disable gdm3\n```\n\n**禁用`lightdm`(假设你使用的是LightDM)**\n\n- 停止当前运行图形界面服务：\n\n```bash\nsudo systemctl stop lightdm\n```\n\n- 禁用服务，开机不启动\n\n```bash\nsudo systemctl disable lightdm\n```\n\n## 设置默认运行级别为多用户模式（命令行）\n\nUbuntu 使用 `systemd` 的目标（target）来管理运行级别。默认图形界面运行在 `graphical.target`，而命令行模式运行在 `multi-user.target`。\n\n- 设置默认目标为 `multi-user.target`：\n\n```bash\nsudo systemctl set-default multi-user.target\n```\n\n- 重启系统\n\n```bash\nsudo reboot\n```\n\n## 彻底卸载桌面环境并释放空间\n\n- 卸载 GNOME 桌面\n\n```bash\nsudo apt remove --purge ubuntu-desktop gnome-shell gnome gdm3\n```\n\n- 卸载其他桌面环境（如果你安装了其他桌面）\n\n```bash\nsudo apt remove --purge kubuntu-desktop  # 卸载 KDE\nsudo apt remove --purge xubuntu-desktop  # 卸载 XFCE\n```\n\n- 运行autoremove清除依赖\n\n```bash\nsudo apt autoremove\n```\n\n重启进入系统后，如果看到是终端形式，那应该就是卸载成功了。\n\n或者通过以下命令：\n\n```bash\nsystemctl get-default\n```\n\n如果输出为：`multi-user,target` 则配置成功\n\n## 恢复桌面环境\n\n- 重装桌面环境\n\n```bash\nsudo apt install ubuntu-desktop\n```\n\n- 设置默认目标为 `graphical.target`：\n\n```bash\nsudo systemctl set-default graphical.target\n```\n\n- 重启系统：\n\n```bash\nsudo reboot\n```\n","source":"_posts/linux学习/如何重装ubuntu的ui界面？.md","raw":"---\ntitle: 如何卸载/重装ubuntu的桌面界面？\ndate: 2025/2/26\ntags: linux\ncategories:\n\n- [服务器]\n- [运维]\n- [linux]\n\n---\n\n# 禁用图形界面\n\nUbuntu 使用 **systemd** 管理系统服务，图形界面通常由 **gdm3** 或 **lightdm** 管理。你可以禁用图形界面服务，使系统开机后直接进入命令行。\n\n<!-- more -->\n\n## 禁用`gdm3`(假设你是GNOME桌面)\n\n- 停止当前运行的图形界面服务：\n\n```bash\nsudo systemctl stop gdm3\n```\n\n- 禁用gdm3服务，使他开机不启动：\n\n```bash\nsudo systemctl disable gdm3\n```\n\n**禁用`lightdm`(假设你使用的是LightDM)**\n\n- 停止当前运行图形界面服务：\n\n```bash\nsudo systemctl stop lightdm\n```\n\n- 禁用服务，开机不启动\n\n```bash\nsudo systemctl disable lightdm\n```\n\n## 设置默认运行级别为多用户模式（命令行）\n\nUbuntu 使用 `systemd` 的目标（target）来管理运行级别。默认图形界面运行在 `graphical.target`，而命令行模式运行在 `multi-user.target`。\n\n- 设置默认目标为 `multi-user.target`：\n\n```bash\nsudo systemctl set-default multi-user.target\n```\n\n- 重启系统\n\n```bash\nsudo reboot\n```\n\n## 彻底卸载桌面环境并释放空间\n\n- 卸载 GNOME 桌面\n\n```bash\nsudo apt remove --purge ubuntu-desktop gnome-shell gnome gdm3\n```\n\n- 卸载其他桌面环境（如果你安装了其他桌面）\n\n```bash\nsudo apt remove --purge kubuntu-desktop  # 卸载 KDE\nsudo apt remove --purge xubuntu-desktop  # 卸载 XFCE\n```\n\n- 运行autoremove清除依赖\n\n```bash\nsudo apt autoremove\n```\n\n重启进入系统后，如果看到是终端形式，那应该就是卸载成功了。\n\n或者通过以下命令：\n\n```bash\nsystemctl get-default\n```\n\n如果输出为：`multi-user,target` 则配置成功\n\n## 恢复桌面环境\n\n- 重装桌面环境\n\n```bash\nsudo apt install ubuntu-desktop\n```\n\n- 设置默认目标为 `graphical.target`：\n\n```bash\nsudo systemctl set-default graphical.target\n```\n\n- 重启系统：\n\n```bash\nsudo reboot\n```\n","slug":"linux学习/如何重装ubuntu的ui界面？","published":1,"updated":"2025-02-27T07:25:49.952Z","_id":"cm7n0r3bc000ctqvy501xfbuw","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"禁用图形界面\"><a href=\"#禁用图形界面\" class=\"headerlink\" title=\"禁用图形界面\"></a>禁用图形界面</h1><p>Ubuntu 使用 <strong>systemd</strong> 管理系统服务，图形界面通常由 <strong>gdm3</strong> 或 <strong>lightdm</strong> 管理。你可以禁用图形界面服务，使系统开机后直接进入命令行。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"禁用gdm3-假设你是GNOME桌面\"><a href=\"#禁用gdm3-假设你是GNOME桌面\" class=\"headerlink\" title=\"禁用gdm3(假设你是GNOME桌面)\"></a>禁用<code>gdm3</code>(假设你是GNOME桌面)</h2><ul>\n<li>停止当前运行的图形界面服务：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl stop gdm3</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>禁用gdm3服务，使他开机不启动：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">disable</span> gdm3</span><br></pre></td></tr></table></figure>\n\n<p><strong>禁用<code>lightdm</code>(假设你使用的是LightDM)</strong></p>\n<ul>\n<li>停止当前运行图形界面服务：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl stop lightdm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>禁用服务，开机不启动</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">disable</span> lightdm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置默认运行级别为多用户模式（命令行）\"><a href=\"#设置默认运行级别为多用户模式（命令行）\" class=\"headerlink\" title=\"设置默认运行级别为多用户模式（命令行）\"></a>设置默认运行级别为多用户模式（命令行）</h2><p>Ubuntu 使用 <code>systemd</code> 的目标（target）来管理运行级别。默认图形界面运行在 <code>graphical.target</code>，而命令行模式运行在 <code>multi-user.target</code>。</p>\n<ul>\n<li>设置默认目标为 <code>multi-user.target</code>：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl set-default multi-user.target</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启系统</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"彻底卸载桌面环境并释放空间\"><a href=\"#彻底卸载桌面环境并释放空间\" class=\"headerlink\" title=\"彻底卸载桌面环境并释放空间\"></a>彻底卸载桌面环境并释放空间</h2><ul>\n<li>卸载 GNOME 桌面</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt remove --purge ubuntu-desktop gnome-shell gnome gdm3</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>卸载其他桌面环境（如果你安装了其他桌面）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt remove --purge kubuntu-desktop  <span class=\"comment\"># 卸载 KDE</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt remove --purge xubuntu-desktop  <span class=\"comment\"># 卸载 XFCE</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>运行autoremove清除依赖</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt autoremove</span><br></pre></td></tr></table></figure>\n\n<p>重启进入系统后，如果看到是终端形式，那应该就是卸载成功了。</p>\n<p>或者通过以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl get-default</span><br></pre></td></tr></table></figure>\n\n<p>如果输出为：<code>multi-user,target</code> 则配置成功</p>\n<h2 id=\"恢复桌面环境\"><a href=\"#恢复桌面环境\" class=\"headerlink\" title=\"恢复桌面环境\"></a>恢复桌面环境</h2><ul>\n<li>重装桌面环境</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install ubuntu-desktop</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置默认目标为 <code>graphical.target</code>：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl set-default graphical.target</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启系统：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> reboot</span><br></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"禁用图形界面\"><a href=\"#禁用图形界面\" class=\"headerlink\" title=\"禁用图形界面\"></a>禁用图形界面</h1><p>Ubuntu 使用 <strong>systemd</strong> 管理系统服务，图形界面通常由 <strong>gdm3</strong> 或 <strong>lightdm</strong> 管理。你可以禁用图形界面服务，使系统开机后直接进入命令行。</p>","more":"<h2 id=\"禁用gdm3-假设你是GNOME桌面\"><a href=\"#禁用gdm3-假设你是GNOME桌面\" class=\"headerlink\" title=\"禁用gdm3(假设你是GNOME桌面)\"></a>禁用<code>gdm3</code>(假设你是GNOME桌面)</h2><ul>\n<li>停止当前运行的图形界面服务：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl stop gdm3</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>禁用gdm3服务，使他开机不启动：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">disable</span> gdm3</span><br></pre></td></tr></table></figure>\n\n<p><strong>禁用<code>lightdm</code>(假设你使用的是LightDM)</strong></p>\n<ul>\n<li>停止当前运行图形界面服务：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl stop lightdm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>禁用服务，开机不启动</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">disable</span> lightdm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置默认运行级别为多用户模式（命令行）\"><a href=\"#设置默认运行级别为多用户模式（命令行）\" class=\"headerlink\" title=\"设置默认运行级别为多用户模式（命令行）\"></a>设置默认运行级别为多用户模式（命令行）</h2><p>Ubuntu 使用 <code>systemd</code> 的目标（target）来管理运行级别。默认图形界面运行在 <code>graphical.target</code>，而命令行模式运行在 <code>multi-user.target</code>。</p>\n<ul>\n<li>设置默认目标为 <code>multi-user.target</code>：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl set-default multi-user.target</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启系统</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"彻底卸载桌面环境并释放空间\"><a href=\"#彻底卸载桌面环境并释放空间\" class=\"headerlink\" title=\"彻底卸载桌面环境并释放空间\"></a>彻底卸载桌面环境并释放空间</h2><ul>\n<li>卸载 GNOME 桌面</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt remove --purge ubuntu-desktop gnome-shell gnome gdm3</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>卸载其他桌面环境（如果你安装了其他桌面）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt remove --purge kubuntu-desktop  <span class=\"comment\"># 卸载 KDE</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt remove --purge xubuntu-desktop  <span class=\"comment\"># 卸载 XFCE</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>运行autoremove清除依赖</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt autoremove</span><br></pre></td></tr></table></figure>\n\n<p>重启进入系统后，如果看到是终端形式，那应该就是卸载成功了。</p>\n<p>或者通过以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl get-default</span><br></pre></td></tr></table></figure>\n\n<p>如果输出为：<code>multi-user,target</code> 则配置成功</p>\n<h2 id=\"恢复桌面环境\"><a href=\"#恢复桌面环境\" class=\"headerlink\" title=\"恢复桌面环境\"></a>恢复桌面环境</h2><ul>\n<li>重装桌面环境</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install ubuntu-desktop</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置默认目标为 <code>graphical.target</code>：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl set-default graphical.target</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启系统：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> reboot</span><br></pre></td></tr></table></figure>"},{"title":"如何从0开始搭建一个mc服务器？","date":"2025-01-19T13:25:00.000Z","_content":"\n# 关于如何将家中闲置电脑变为mc服务器\n\n## 前言\n\n相信对于很多minecraft爱好者来说，mc服务器对他们来说并不陌生，喜欢折腾电脑和玩游戏的我，对这个同样也不例外，因此，我将开荒一个关于mc服务端的相关教程，本人也是刚玩mc没多久，希望也能边学边做此文档。\n\n<!-- more -->\n\n## 初次尝试\n\n相信很多人像我一样，对于开服一开始十分迷茫该做什么。\n\n这边简洁列举几个流程\n\n- 拥有一个具有<mark>[公网ip](###公网ip)</mark>的服务器并搭载可以运行服务端的操作系统(linux, ubuntu, windows等都可)。\n\n- 在服务器上装上java虚拟机环境\n\n- 从 [minecraft官网](https://www.minecraft.net/zh-hans/download/server) 下载minecraft服务端，您应该会获得一个server.jar 的java脚本文件\n\n- 接着进到您server.jar的目录下(例如/home/user/server.jar) 接着运行以下命令\n\n- ```java\n  java -Xmx1024M -Xms1024M -jar server.jar nogui\n  ```\n\n那么此时就可以愉快的通过ip地址和你的小伙伴畅玩mc了(~~bushi~~)\n\n## 具体步骤\n\nok，概括就说到这，估计很多盆友们看到这边感觉一头雾水，对于一个新手小白，或者完全不懂计算机知识的盆友们来说，还是太难了，因此这边会细嗦 **具体步骤**。\n\n### 公网ip\n\n首先，你可以简单想一下，公网IP，为何叫公网？因为只要你在国内，没有防火墙拦着你，类似于**[www.baidu.com]()** 这种的域名，每个人都可以用自己的终端设备，例如手机，电脑平板等访问到，这样的可以所有人在那边都可以访问到的ip地址，就叫公网Ip。同理，你的服务器若想所有人都可以进入，所有人都可以访问到，那我们也需要一个公网IP来供你的小伙伴来进入。这就是我们需要公网ip的原因。\n","source":"_posts/minecraft/2025_01_21.md","raw":"---\ntitle: 如何从0开始搭建一个mc服务器？\ndate: 2025/1/19 21:25:00\ntags: 服务器\ncategories: \n- [minecraft]\n- [服务器]\n---\n\n# 关于如何将家中闲置电脑变为mc服务器\n\n## 前言\n\n相信对于很多minecraft爱好者来说，mc服务器对他们来说并不陌生，喜欢折腾电脑和玩游戏的我，对这个同样也不例外，因此，我将开荒一个关于mc服务端的相关教程，本人也是刚玩mc没多久，希望也能边学边做此文档。\n\n<!-- more -->\n\n## 初次尝试\n\n相信很多人像我一样，对于开服一开始十分迷茫该做什么。\n\n这边简洁列举几个流程\n\n- 拥有一个具有<mark>[公网ip](###公网ip)</mark>的服务器并搭载可以运行服务端的操作系统(linux, ubuntu, windows等都可)。\n\n- 在服务器上装上java虚拟机环境\n\n- 从 [minecraft官网](https://www.minecraft.net/zh-hans/download/server) 下载minecraft服务端，您应该会获得一个server.jar 的java脚本文件\n\n- 接着进到您server.jar的目录下(例如/home/user/server.jar) 接着运行以下命令\n\n- ```java\n  java -Xmx1024M -Xms1024M -jar server.jar nogui\n  ```\n\n那么此时就可以愉快的通过ip地址和你的小伙伴畅玩mc了(~~bushi~~)\n\n## 具体步骤\n\nok，概括就说到这，估计很多盆友们看到这边感觉一头雾水，对于一个新手小白，或者完全不懂计算机知识的盆友们来说，还是太难了，因此这边会细嗦 **具体步骤**。\n\n### 公网ip\n\n首先，你可以简单想一下，公网IP，为何叫公网？因为只要你在国内，没有防火墙拦着你，类似于**[www.baidu.com]()** 这种的域名，每个人都可以用自己的终端设备，例如手机，电脑平板等访问到，这样的可以所有人在那边都可以访问到的ip地址，就叫公网Ip。同理，你的服务器若想所有人都可以进入，所有人都可以访问到，那我们也需要一个公网IP来供你的小伙伴来进入。这就是我们需要公网ip的原因。\n","slug":"minecraft/2025_01_21","published":1,"updated":"2025-02-23T11:07:54.252Z","comments":1,"layout":"post","photos":[],"_id":"cm7n0r3bg000gtqvy7qdcdyzx","content":"<h1 id=\"关于如何将家中闲置电脑变为mc服务器\"><a href=\"#关于如何将家中闲置电脑变为mc服务器\" class=\"headerlink\" title=\"关于如何将家中闲置电脑变为mc服务器\"></a>关于如何将家中闲置电脑变为mc服务器</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>相信对于很多minecraft爱好者来说，mc服务器对他们来说并不陌生，喜欢折腾电脑和玩游戏的我，对这个同样也不例外，因此，我将开荒一个关于mc服务端的相关教程，本人也是刚玩mc没多久，希望也能边学边做此文档。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"初次尝试\"><a href=\"#初次尝试\" class=\"headerlink\" title=\"初次尝试\"></a>初次尝试</h2><p>相信很多人像我一样，对于开服一开始十分迷茫该做什么。</p>\n<p>这边简洁列举几个流程</p>\n<ul>\n<li><p>拥有一个具有<mark><a href=\"###%E5%85%AC%E7%BD%91ip\">公网ip</a></mark>的服务器并搭载可以运行服务端的操作系统(linux, ubuntu, windows等都可)。</p>\n</li>\n<li><p>在服务器上装上java虚拟机环境</p>\n</li>\n<li><p>从 <a href=\"https://www.minecraft.net/zh-hans/download/server\">minecraft官网</a> 下载minecraft服务端，您应该会获得一个server.jar 的java脚本文件</p>\n</li>\n<li><p>接着进到您server.jar的目录下(例如&#x2F;home&#x2F;user&#x2F;server.jar) 接着运行以下命令</p>\n</li>\n<li><pre><code class=\"java\">java -Xmx1024M -Xms1024M -jar server.jar nogui\n</code></pre>\n</li>\n</ul>\n<p>那么此时就可以愉快的通过ip地址和你的小伙伴畅玩mc了(<del>bushi</del>)</p>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><p>ok，概括就说到这，估计很多盆友们看到这边感觉一头雾水，对于一个新手小白，或者完全不懂计算机知识的盆友们来说，还是太难了，因此这边会细嗦 <strong>具体步骤</strong>。</p>\n<h3 id=\"公网ip\"><a href=\"#公网ip\" class=\"headerlink\" title=\"公网ip\"></a>公网ip</h3><p>首先，你可以简单想一下，公网IP，为何叫公网？因为只要你在国内，没有防火墙拦着你，类似于**<a href=\"\">www.baidu.com</a>** 这种的域名，每个人都可以用自己的终端设备，例如手机，电脑平板等访问到，这样的可以所有人在那边都可以访问到的ip地址，就叫公网Ip。同理，你的服务器若想所有人都可以进入，所有人都可以访问到，那我们也需要一个公网IP来供你的小伙伴来进入。这就是我们需要公网ip的原因。</p>\n","excerpt":"<h1 id=\"关于如何将家中闲置电脑变为mc服务器\"><a href=\"#关于如何将家中闲置电脑变为mc服务器\" class=\"headerlink\" title=\"关于如何将家中闲置电脑变为mc服务器\"></a>关于如何将家中闲置电脑变为mc服务器</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>相信对于很多minecraft爱好者来说，mc服务器对他们来说并不陌生，喜欢折腾电脑和玩游戏的我，对这个同样也不例外，因此，我将开荒一个关于mc服务端的相关教程，本人也是刚玩mc没多久，希望也能边学边做此文档。</p>","more":"<h2 id=\"初次尝试\"><a href=\"#初次尝试\" class=\"headerlink\" title=\"初次尝试\"></a>初次尝试</h2><p>相信很多人像我一样，对于开服一开始十分迷茫该做什么。</p>\n<p>这边简洁列举几个流程</p>\n<ul>\n<li><p>拥有一个具有<mark><a href=\"###%E5%85%AC%E7%BD%91ip\">公网ip</a></mark>的服务器并搭载可以运行服务端的操作系统(linux, ubuntu, windows等都可)。</p>\n</li>\n<li><p>在服务器上装上java虚拟机环境</p>\n</li>\n<li><p>从 <a href=\"https://www.minecraft.net/zh-hans/download/server\">minecraft官网</a> 下载minecraft服务端，您应该会获得一个server.jar 的java脚本文件</p>\n</li>\n<li><p>接着进到您server.jar的目录下(例如&#x2F;home&#x2F;user&#x2F;server.jar) 接着运行以下命令</p>\n</li>\n<li><pre><code class=\"java\">java -Xmx1024M -Xms1024M -jar server.jar nogui\n</code></pre>\n</li>\n</ul>\n<p>那么此时就可以愉快的通过ip地址和你的小伙伴畅玩mc了(<del>bushi</del>)</p>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><p>ok，概括就说到这，估计很多盆友们看到这边感觉一头雾水，对于一个新手小白，或者完全不懂计算机知识的盆友们来说，还是太难了，因此这边会细嗦 <strong>具体步骤</strong>。</p>\n<h3 id=\"公网ip\"><a href=\"#公网ip\" class=\"headerlink\" title=\"公网ip\"></a>公网ip</h3><p>首先，你可以简单想一下，公网IP，为何叫公网？因为只要你在国内，没有防火墙拦着你，类似于**<a href=\"\">www.baidu.com</a>** 这种的域名，每个人都可以用自己的终端设备，例如手机，电脑平板等访问到，这样的可以所有人在那边都可以访问到的ip地址，就叫公网Ip。同理，你的服务器若想所有人都可以进入，所有人都可以访问到，那我们也需要一个公网IP来供你的小伙伴来进入。这就是我们需要公网ip的原因。</p>"},{"title":"复习关于javascript的二元表达式的写法","date":"2025-01-24T14:41:00.000Z","_content":"\n# 复习关于javascript的二元表达式的写法\n\n<!-- more -->\n\n## 条件（三元）运算符\n\n在JavaScript中，三元表达式是一种简洁的条件语句写法，它由三部分组成：一个条件、一个结果表达式（当条件为真时执行），以及另一个结果表达式（当条件为假时执行）。\n\n**具体来说** **条件（三元）运算符**是 JavaScript 唯一使用三个操作数的运算符：一个条件后跟一个问号（`?`），如果条件是真值，则执行冒号（`:`）前的表达式；若条件为假值，则执行最后的表达式。该运算符经常当作 `if...else` 语句的简捷形式来使用。\n\n```javascript\nfunction getphoneNumber(num) {\n    return num ? '111' : '222'\n}\n\nconsole.log(getphoneNumber(true))\n//若参数为真，那么返回第一个值'111'\n\nconsole.log(getphoneNumber(false))\n//若参数为假，那么返回第二个值'222'\n\nconsole.log(getphoneNumber(null))\n//若参数为空，那么返回第二个值'222'\n```\n\n## 目前遇到的用法总结\n\n1. ```javascript\n   const Parameter = this.data.archiveType === 'conditon' ? 0 : 1;\n   ```\n\n**解释 :**  \n\n- **首先**：\n  \n  - 这种结构式需要从后往前看才行，那么我们就先分析`this.data.archiveType === 'conditon' ? 0 : 1;` 这一段。我们可以在 `===` 符号可以检查archiveType这个参数是否等同于字符串'conditon' 。\n\n- **如果条件为真时候的结果：**\n  \n  - 如果条件为真（即 `archiveType` 等于 `'condition'`），则将 `0` 赋值给 `Parameter`。\n\n- **如果条件为假时候的结果：**\n  \n  - 如果条件为假（即 `archiveType` 不等于 `'condition'`），则将 `1` 赋值给 `Parameter`。\n\n    \n\n**简单解释：**\n\n- 如果 `archiveType` 是 `'condition'`，那么 `imageList` 就是 `0`。\n- 否则，`imageList` 就是 `1`。\n","source":"_posts/前端/2025_01_24.md","raw":"---\ntitle: 复习关于javascript的二元表达式的写法\ndate: 2025/1/24 22:41:00\ntags: javascript\ncategories: \n- [微信小程序]\n- [前端]\n- [javascript]\n---\n\n# 复习关于javascript的二元表达式的写法\n\n<!-- more -->\n\n## 条件（三元）运算符\n\n在JavaScript中，三元表达式是一种简洁的条件语句写法，它由三部分组成：一个条件、一个结果表达式（当条件为真时执行），以及另一个结果表达式（当条件为假时执行）。\n\n**具体来说** **条件（三元）运算符**是 JavaScript 唯一使用三个操作数的运算符：一个条件后跟一个问号（`?`），如果条件是真值，则执行冒号（`:`）前的表达式；若条件为假值，则执行最后的表达式。该运算符经常当作 `if...else` 语句的简捷形式来使用。\n\n```javascript\nfunction getphoneNumber(num) {\n    return num ? '111' : '222'\n}\n\nconsole.log(getphoneNumber(true))\n//若参数为真，那么返回第一个值'111'\n\nconsole.log(getphoneNumber(false))\n//若参数为假，那么返回第二个值'222'\n\nconsole.log(getphoneNumber(null))\n//若参数为空，那么返回第二个值'222'\n```\n\n## 目前遇到的用法总结\n\n1. ```javascript\n   const Parameter = this.data.archiveType === 'conditon' ? 0 : 1;\n   ```\n\n**解释 :**  \n\n- **首先**：\n  \n  - 这种结构式需要从后往前看才行，那么我们就先分析`this.data.archiveType === 'conditon' ? 0 : 1;` 这一段。我们可以在 `===` 符号可以检查archiveType这个参数是否等同于字符串'conditon' 。\n\n- **如果条件为真时候的结果：**\n  \n  - 如果条件为真（即 `archiveType` 等于 `'condition'`），则将 `0` 赋值给 `Parameter`。\n\n- **如果条件为假时候的结果：**\n  \n  - 如果条件为假（即 `archiveType` 不等于 `'condition'`），则将 `1` 赋值给 `Parameter`。\n\n    \n\n**简单解释：**\n\n- 如果 `archiveType` 是 `'condition'`，那么 `imageList` 就是 `0`。\n- 否则，`imageList` 就是 `1`。\n","slug":"前端/2025_01_24","published":1,"updated":"2025-02-23T11:07:54.252Z","comments":1,"layout":"post","photos":[],"_id":"cm7n0r3bj000itqvy7teugv0s","content":"<h1 id=\"复习关于javascript的二元表达式的写法\"><a href=\"#复习关于javascript的二元表达式的写法\" class=\"headerlink\" title=\"复习关于javascript的二元表达式的写法\"></a>复习关于javascript的二元表达式的写法</h1><span id=\"more\"></span>\n\n<h2 id=\"条件（三元）运算符\"><a href=\"#条件（三元）运算符\" class=\"headerlink\" title=\"条件（三元）运算符\"></a>条件（三元）运算符</h2><p>在JavaScript中，三元表达式是一种简洁的条件语句写法，它由三部分组成：一个条件、一个结果表达式（当条件为真时执行），以及另一个结果表达式（当条件为假时执行）。</p>\n<p><strong>具体来说</strong> <strong>条件（三元）运算符</strong>是 JavaScript 唯一使用三个操作数的运算符：一个条件后跟一个问号（<code>?</code>），如果条件是真值，则执行冒号（<code>:</code>）前的表达式；若条件为假值，则执行最后的表达式。该运算符经常当作 <code>if...else</code> 语句的简捷形式来使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getphoneNumber</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num ? <span class=\"string\">&#x27;111&#x27;</span> : <span class=\"string\">&#x27;222&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getphoneNumber</span>(<span class=\"literal\">true</span>))</span><br><span class=\"line\"><span class=\"comment\">//若参数为真，那么返回第一个值&#x27;111&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getphoneNumber</span>(<span class=\"literal\">false</span>))</span><br><span class=\"line\"><span class=\"comment\">//若参数为假，那么返回第二个值&#x27;222&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getphoneNumber</span>(<span class=\"literal\">null</span>))</span><br><span class=\"line\"><span class=\"comment\">//若参数为空，那么返回第二个值&#x27;222&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"目前遇到的用法总结\"><a href=\"#目前遇到的用法总结\" class=\"headerlink\" title=\"目前遇到的用法总结\"></a>目前遇到的用法总结</h2><ol>\n<li><pre><code class=\"javascript\">const Parameter = this.data.archiveType === &#39;conditon&#39; ? 0 : 1;\n</code></pre>\n</li>\n</ol>\n<p><strong>解释 :</strong>  </p>\n<ul>\n<li><p><strong>首先</strong>：</p>\n<ul>\n<li>这种结构式需要从后往前看才行，那么我们就先分析<code>this.data.archiveType === &#39;conditon&#39; ? 0 : 1;</code> 这一段。我们可以在 <code>===</code> 符号可以检查archiveType这个参数是否等同于字符串’conditon’ 。</li>\n</ul>\n</li>\n<li><p><strong>如果条件为真时候的结果：</strong></p>\n<ul>\n<li>如果条件为真（即 <code>archiveType</code> 等于 <code>&#39;condition&#39;</code>），则将 <code>0</code> 赋值给 <code>Parameter</code>。</li>\n</ul>\n</li>\n<li><p><strong>如果条件为假时候的结果：</strong></p>\n<ul>\n<li>如果条件为假（即 <code>archiveType</code> 不等于 <code>&#39;condition&#39;</code>），则将 <code>1</code> 赋值给 <code>Parameter</code>。</li>\n</ul>\n</li>\n</ul>\n<p>    </p>\n<p><strong>简单解释：</strong></p>\n<ul>\n<li>如果 <code>archiveType</code> 是 <code>&#39;condition&#39;</code>，那么 <code>imageList</code> 就是 <code>0</code>。</li>\n<li>否则，<code>imageList</code> 就是 <code>1</code>。</li>\n</ul>\n","excerpt":"<h1 id=\"复习关于javascript的二元表达式的写法\"><a href=\"#复习关于javascript的二元表达式的写法\" class=\"headerlink\" title=\"复习关于javascript的二元表达式的写法\"></a>复习关于javascript的二元表达式的写法</h1>","more":"<h2 id=\"条件（三元）运算符\"><a href=\"#条件（三元）运算符\" class=\"headerlink\" title=\"条件（三元）运算符\"></a>条件（三元）运算符</h2><p>在JavaScript中，三元表达式是一种简洁的条件语句写法，它由三部分组成：一个条件、一个结果表达式（当条件为真时执行），以及另一个结果表达式（当条件为假时执行）。</p>\n<p><strong>具体来说</strong> <strong>条件（三元）运算符</strong>是 JavaScript 唯一使用三个操作数的运算符：一个条件后跟一个问号（<code>?</code>），如果条件是真值，则执行冒号（<code>:</code>）前的表达式；若条件为假值，则执行最后的表达式。该运算符经常当作 <code>if...else</code> 语句的简捷形式来使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getphoneNumber</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num ? <span class=\"string\">&#x27;111&#x27;</span> : <span class=\"string\">&#x27;222&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getphoneNumber</span>(<span class=\"literal\">true</span>))</span><br><span class=\"line\"><span class=\"comment\">//若参数为真，那么返回第一个值&#x27;111&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getphoneNumber</span>(<span class=\"literal\">false</span>))</span><br><span class=\"line\"><span class=\"comment\">//若参数为假，那么返回第二个值&#x27;222&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getphoneNumber</span>(<span class=\"literal\">null</span>))</span><br><span class=\"line\"><span class=\"comment\">//若参数为空，那么返回第二个值&#x27;222&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"目前遇到的用法总结\"><a href=\"#目前遇到的用法总结\" class=\"headerlink\" title=\"目前遇到的用法总结\"></a>目前遇到的用法总结</h2><ol>\n<li><pre><code class=\"javascript\">const Parameter = this.data.archiveType === &#39;conditon&#39; ? 0 : 1;\n</code></pre>\n</li>\n</ol>\n<p><strong>解释 :</strong>  </p>\n<ul>\n<li><p><strong>首先</strong>：</p>\n<ul>\n<li>这种结构式需要从后往前看才行，那么我们就先分析<code>this.data.archiveType === &#39;conditon&#39; ? 0 : 1;</code> 这一段。我们可以在 <code>===</code> 符号可以检查archiveType这个参数是否等同于字符串’conditon’ 。</li>\n</ul>\n</li>\n<li><p><strong>如果条件为真时候的结果：</strong></p>\n<ul>\n<li>如果条件为真（即 <code>archiveType</code> 等于 <code>&#39;condition&#39;</code>），则将 <code>0</code> 赋值给 <code>Parameter</code>。</li>\n</ul>\n</li>\n<li><p><strong>如果条件为假时候的结果：</strong></p>\n<ul>\n<li>如果条件为假（即 <code>archiveType</code> 不等于 <code>&#39;condition&#39;</code>），则将 <code>1</code> 赋值给 <code>Parameter</code>。</li>\n</ul>\n</li>\n</ul>\n<p>    </p>\n<p><strong>简单解释：</strong></p>\n<ul>\n<li>如果 <code>archiveType</code> 是 <code>&#39;condition&#39;</code>，那么 <code>imageList</code> 就是 <code>0</code>。</li>\n<li>否则，<code>imageList</code> 就是 <code>1</code>。</li>\n</ul>"},{"title":"新版微信小程序该如何实现手机号快捷登录功能？","date":"2025-01-19T13:25:00.000Z","_content":"\n## 前提概要\n\n更新原因： 从基础库2.21.2开始，对步骤2中换取手机号信息的方式进行了安全升级，上述为新方式使用指南。（[旧方式](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/deprecatedGetPhoneNumber.html)目前可以继续使用，但**建议开发者使用新方式，以增强小程序安全性**）另外，新方式**不再**需要提前调用**wx.login**进行登录。\n\n<!-- more -->\n\n以下放下微信官方的链接\n\n[手机号快速验证组件 | 微信开放文档](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/getPhoneNumber.html)\n\n前端工具：小程序原生开发\n\n后端工具：基于nodejs的express框架\n\n因此我们需要修改我们新的微信小程序的登录逻辑，以实现用户便捷登录。\n\n从官方文档更新的说明来看，登录逻辑也许并不需要在写wx.login了（吗）？\n\n如果真不需要写了，不仅仅便捷了用户，同时也便捷了开发者写接口和前端的工作量。\n\n这边先放新方法的代码演示\n\n## 手机号快捷登录代码示例\n\n#### 前端\n\n##### **wxml**\n\nwxml需要写入button组件，并写入**open-type=\"getPhoneNumber\"，bindgetphonenumber=\"getPhoneNumber\"**这两个语句。\n\n如果您是**uniapp**开发，那么bindgetphonenumber需要替换为@getphonenumber，其他不变\n\n```html\n<button \n    class=\"login-btn\" \n    open-type=\"getPhoneNumber\" \n    bindgetphonenumber=\"getPhoneNumber\"\n>请先登录再使用\n</button>\n```\n\nwxss样式，一般我都觉得随心所欲即可（其实是我实在懒得贴那么多代码啊哈哈）\n\n##### **javascript**\n\n根据微信开发者文档中官方示例代码我们可知:getPhoneNumber这个函数有一个e(函数的事件参数),其中这个e包括三个信息，分别为动态令牌，回调信息以及错误码，其中回调信息无论成功失败都会返回信息。\n\n```javascript\nPage({\n  getPhoneNumber (e) {\n    console.log(e.detail.code)  // 动态令牌\n    console.log(e.detail.errMsg) // 回调信息（成功失败都会返回）\n    console.log(e.detail.errno)  // 错误码（失败时返回）\n  }\n})\n```\n\n例如，也许你的js文件用的官方的信息，也许你的控制台会受到以下的返回信息：\n\ngetPhoneNumber: ok\n\ncode: 动态令牌码\n\nerrono: undifined\n\n这样你就初步实现了这个微信组件的调用数据。\n\n接下来是再项目中实用的这个函数组件\n\n根据官方文档，你需要先获取access_token,然后在根据access_token和前端发送的code数据来获取到用户的手机号信息。\n\n以下为我的示例代码\n\n```javascript\ngetPhoneNumber(e) {\n    const code = e.detail.code;\n    const errMsg = e.detail.errMsg;\n    //首先确认从微信官方获取的信息是没问题的\n    if (errMsg === 'getPhoneNumber:ok') {\n      wx.request({\n       //这里写你的后端接口的地址\n        url: 'http://127.0.0.1:3000/api/getPhoneNumber',\n        method: 'POST',\n       //发送给后端的数据\n        data: {\n          code\n        },\n        //登录成功case\n        success: (res) => {\n            console.log('返回数据:', res.data);\n            //登录成功弹窗函数\n            wx.showToast({\n              title: '登录成功',\n              icon: 'success'\n            });\n          } else {\n            console.error('返回数据格式错误:', res.data);\n            //获取手机号失败\n            wx.showToast({\n              title: '获取手机号失败',\n              icon: 'none'\n            });\n          }\n        },\n        //登录失败case\n        //接口请求失败\n        fail: (error) => {\n          console.error('请求失败:', error);\n          wx.showToast({\n            title: '登录失败',\n            icon: 'none'\n          });\n        }\n      });\n    } else {\n      //用户取消授权\n      wx.showToast({\n        title: '您取消了授权',\n        icon: 'none'\n      });\n    }\n  },\n```\n\n如果你能理解我上面写的代码，那么基本就可以在实际项目中使用这个组件。\n\n下面我简单提供一下我的后端代码，本人小白，写的后端较为啰嗦，还请各位大神见谅，主要目的为了配合前面前端。\n\nget_AccessToken(做router_function)\n\n```javascript\nconst axios = require('axios');\n\n// 微信小程序配置\nconst APPID = '你的微信后台appid';\nconst SECRET = '你的微信后台secret';\n// 这个不用\nconst GRANT_TYPE = 'client_credential';\n\n// 获取access_token\nasync function getAccessToken() {\n    try {\n        const response = await axios.get('https://api.weixin.qq.com/cgi-bin/token', {\n            params: {\n                appid: APPID,\n                secret: SECRET,\n                grant_type: GRANT_TYPE\n            }\n        });\n\n        return response.data;\n    } catch (error) {\n        console.error('获取access_token失败:', error);\n        throw error;\n    }\n}\n\n// 导出模块\nmodule.exports = {\n    getAccessToken\n};\n```\n\ngetPhoneNumber\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst axios = require('axios');\nconst { getAccessToken } = require('../routes_function/getAccessToken');\n//我这边引入了一个中间件用于获取token，作为用户的登录令牌，代码会放到下面\nconst { generateToken } = require('../middleware/auth');\n\n// 获取手机号\nrouter.post('/getPhoneNumber', async (req, res) => {\n    try {\n        const { code } = req.body;\n\n        // 先获取access_token\n        const tokenData = await getAccessToken();\n\n        // 确认access_token\n        if (!tokenData) {\n            return res.status(400).json({\n                code: -1,\n                message: '获取access_token失败'\n            });\n        }\n\n        const ACCESS_TOKEN = tokenData.access_token;\n\n        // 确认请求参数code\n        if (!req.body.code) {\n            return res.status(400).json({\n                code: -1,\n                message: '缺少code参数'\n            });\n        } else {\n            console.log('code请求:', { code });\n        }\n\n        const url = `https://api.weixin.qq.com/wxa/business/getuserphonenumber?access_token=${ACCESS_TOKEN}`;\n        const response = await axios.post(url, {\n            code\n        });\n\n        console.log('获取手机号成功:', response.data);\n\n        // 在获取到手机号后，生成token\n        if (response.data.phone_info && response.data.phone_info.phoneNumber) {\n            const phoneNumber = response.data.phone_info.phoneNumber;\n\n            // 生成token\n            const token = generateToken({\n                phoneNumber,\n                timestamp: new Date().getTime()\n            });\n\n            // 返回手机号和token\n            res.json({\n                code: 0,\n                message: '获取成功',\n                data: {\n                    phone_info: response.data.phone_info,\n                    token\n                }\n            });\n        } else {\n            res.status(400).json({\n                code: -1,\n                message: '获取手机号失败'\n            });\n        }\n    } catch (error) {\n        console.error('获取手机号错误:', error);\n        res.status(500).json({\n            code: -1,\n            message: '服务器错误',\n            error: error.message\n        });\n    }\n});\n\nmodule.exports = router;\n```\n\n中间件利用jwt组件来生成token\n\n```javascript\nconst jwt = require('jsonwebtoken');\n//配置文件在下\nconst { secret } = require('../config/jwt');\n\nconst auth = {\n  // 生成token\n  generateToken(payload) {\n    return jwt.sign(payload, secret, { expiresIn: '2d' });\n  },\n\n  // 验证token\n  verifyToken(req, res, next) {\n    const token = req.headers.authorization;\n\n    if (!token) {\n      return res.status(401).json({\n        code: -1,\n        message: '未提供token'\n      });\n    }\n\n    try {\n      const decoded = jwt.verify(token.replace('Bearer ', ''), secret);\n      req.user = decoded;\n      next();\n    } catch (error) {\n      return res.status(401).json({\n        code: -1,\n        message: 'token无效或已过期'\n      });\n    }\n  }\n};\n\nmodule.exports = auth; \n```\n\njwt的配置文件\n\n```javascript\nmodule.exports = {\n  secret: '随便输', // JWT密钥\n  expiresIn: '1d' // token过期时间\n}; \n```\n\n那么以上，你就可以实现通过手机号，使手机快捷登录的组件功能了，另外微信官方接口的调用都需要在后端中利用axiox或者其他的组件进行请求，再把数据发给前端，不可在前端直接调用。\n\n如果您还有任何疑惑，可以在评论区留言，或者联系我的email。\n","source":"_posts/微信小程序/2025_01_19.md","raw":"---\ntitle: 新版微信小程序该如何实现手机号快捷登录功能？\ndate: 2025/1/19 21:25:00\ntags: 微信小程序\ncategories: \n- [微信小程序]\n- [前端]\n---\n\n## 前提概要\n\n更新原因： 从基础库2.21.2开始，对步骤2中换取手机号信息的方式进行了安全升级，上述为新方式使用指南。（[旧方式](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/deprecatedGetPhoneNumber.html)目前可以继续使用，但**建议开发者使用新方式，以增强小程序安全性**）另外，新方式**不再**需要提前调用**wx.login**进行登录。\n\n<!-- more -->\n\n以下放下微信官方的链接\n\n[手机号快速验证组件 | 微信开放文档](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/getPhoneNumber.html)\n\n前端工具：小程序原生开发\n\n后端工具：基于nodejs的express框架\n\n因此我们需要修改我们新的微信小程序的登录逻辑，以实现用户便捷登录。\n\n从官方文档更新的说明来看，登录逻辑也许并不需要在写wx.login了（吗）？\n\n如果真不需要写了，不仅仅便捷了用户，同时也便捷了开发者写接口和前端的工作量。\n\n这边先放新方法的代码演示\n\n## 手机号快捷登录代码示例\n\n#### 前端\n\n##### **wxml**\n\nwxml需要写入button组件，并写入**open-type=\"getPhoneNumber\"，bindgetphonenumber=\"getPhoneNumber\"**这两个语句。\n\n如果您是**uniapp**开发，那么bindgetphonenumber需要替换为@getphonenumber，其他不变\n\n```html\n<button \n    class=\"login-btn\" \n    open-type=\"getPhoneNumber\" \n    bindgetphonenumber=\"getPhoneNumber\"\n>请先登录再使用\n</button>\n```\n\nwxss样式，一般我都觉得随心所欲即可（其实是我实在懒得贴那么多代码啊哈哈）\n\n##### **javascript**\n\n根据微信开发者文档中官方示例代码我们可知:getPhoneNumber这个函数有一个e(函数的事件参数),其中这个e包括三个信息，分别为动态令牌，回调信息以及错误码，其中回调信息无论成功失败都会返回信息。\n\n```javascript\nPage({\n  getPhoneNumber (e) {\n    console.log(e.detail.code)  // 动态令牌\n    console.log(e.detail.errMsg) // 回调信息（成功失败都会返回）\n    console.log(e.detail.errno)  // 错误码（失败时返回）\n  }\n})\n```\n\n例如，也许你的js文件用的官方的信息，也许你的控制台会受到以下的返回信息：\n\ngetPhoneNumber: ok\n\ncode: 动态令牌码\n\nerrono: undifined\n\n这样你就初步实现了这个微信组件的调用数据。\n\n接下来是再项目中实用的这个函数组件\n\n根据官方文档，你需要先获取access_token,然后在根据access_token和前端发送的code数据来获取到用户的手机号信息。\n\n以下为我的示例代码\n\n```javascript\ngetPhoneNumber(e) {\n    const code = e.detail.code;\n    const errMsg = e.detail.errMsg;\n    //首先确认从微信官方获取的信息是没问题的\n    if (errMsg === 'getPhoneNumber:ok') {\n      wx.request({\n       //这里写你的后端接口的地址\n        url: 'http://127.0.0.1:3000/api/getPhoneNumber',\n        method: 'POST',\n       //发送给后端的数据\n        data: {\n          code\n        },\n        //登录成功case\n        success: (res) => {\n            console.log('返回数据:', res.data);\n            //登录成功弹窗函数\n            wx.showToast({\n              title: '登录成功',\n              icon: 'success'\n            });\n          } else {\n            console.error('返回数据格式错误:', res.data);\n            //获取手机号失败\n            wx.showToast({\n              title: '获取手机号失败',\n              icon: 'none'\n            });\n          }\n        },\n        //登录失败case\n        //接口请求失败\n        fail: (error) => {\n          console.error('请求失败:', error);\n          wx.showToast({\n            title: '登录失败',\n            icon: 'none'\n          });\n        }\n      });\n    } else {\n      //用户取消授权\n      wx.showToast({\n        title: '您取消了授权',\n        icon: 'none'\n      });\n    }\n  },\n```\n\n如果你能理解我上面写的代码，那么基本就可以在实际项目中使用这个组件。\n\n下面我简单提供一下我的后端代码，本人小白，写的后端较为啰嗦，还请各位大神见谅，主要目的为了配合前面前端。\n\nget_AccessToken(做router_function)\n\n```javascript\nconst axios = require('axios');\n\n// 微信小程序配置\nconst APPID = '你的微信后台appid';\nconst SECRET = '你的微信后台secret';\n// 这个不用\nconst GRANT_TYPE = 'client_credential';\n\n// 获取access_token\nasync function getAccessToken() {\n    try {\n        const response = await axios.get('https://api.weixin.qq.com/cgi-bin/token', {\n            params: {\n                appid: APPID,\n                secret: SECRET,\n                grant_type: GRANT_TYPE\n            }\n        });\n\n        return response.data;\n    } catch (error) {\n        console.error('获取access_token失败:', error);\n        throw error;\n    }\n}\n\n// 导出模块\nmodule.exports = {\n    getAccessToken\n};\n```\n\ngetPhoneNumber\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst axios = require('axios');\nconst { getAccessToken } = require('../routes_function/getAccessToken');\n//我这边引入了一个中间件用于获取token，作为用户的登录令牌，代码会放到下面\nconst { generateToken } = require('../middleware/auth');\n\n// 获取手机号\nrouter.post('/getPhoneNumber', async (req, res) => {\n    try {\n        const { code } = req.body;\n\n        // 先获取access_token\n        const tokenData = await getAccessToken();\n\n        // 确认access_token\n        if (!tokenData) {\n            return res.status(400).json({\n                code: -1,\n                message: '获取access_token失败'\n            });\n        }\n\n        const ACCESS_TOKEN = tokenData.access_token;\n\n        // 确认请求参数code\n        if (!req.body.code) {\n            return res.status(400).json({\n                code: -1,\n                message: '缺少code参数'\n            });\n        } else {\n            console.log('code请求:', { code });\n        }\n\n        const url = `https://api.weixin.qq.com/wxa/business/getuserphonenumber?access_token=${ACCESS_TOKEN}`;\n        const response = await axios.post(url, {\n            code\n        });\n\n        console.log('获取手机号成功:', response.data);\n\n        // 在获取到手机号后，生成token\n        if (response.data.phone_info && response.data.phone_info.phoneNumber) {\n            const phoneNumber = response.data.phone_info.phoneNumber;\n\n            // 生成token\n            const token = generateToken({\n                phoneNumber,\n                timestamp: new Date().getTime()\n            });\n\n            // 返回手机号和token\n            res.json({\n                code: 0,\n                message: '获取成功',\n                data: {\n                    phone_info: response.data.phone_info,\n                    token\n                }\n            });\n        } else {\n            res.status(400).json({\n                code: -1,\n                message: '获取手机号失败'\n            });\n        }\n    } catch (error) {\n        console.error('获取手机号错误:', error);\n        res.status(500).json({\n            code: -1,\n            message: '服务器错误',\n            error: error.message\n        });\n    }\n});\n\nmodule.exports = router;\n```\n\n中间件利用jwt组件来生成token\n\n```javascript\nconst jwt = require('jsonwebtoken');\n//配置文件在下\nconst { secret } = require('../config/jwt');\n\nconst auth = {\n  // 生成token\n  generateToken(payload) {\n    return jwt.sign(payload, secret, { expiresIn: '2d' });\n  },\n\n  // 验证token\n  verifyToken(req, res, next) {\n    const token = req.headers.authorization;\n\n    if (!token) {\n      return res.status(401).json({\n        code: -1,\n        message: '未提供token'\n      });\n    }\n\n    try {\n      const decoded = jwt.verify(token.replace('Bearer ', ''), secret);\n      req.user = decoded;\n      next();\n    } catch (error) {\n      return res.status(401).json({\n        code: -1,\n        message: 'token无效或已过期'\n      });\n    }\n  }\n};\n\nmodule.exports = auth; \n```\n\njwt的配置文件\n\n```javascript\nmodule.exports = {\n  secret: '随便输', // JWT密钥\n  expiresIn: '1d' // token过期时间\n}; \n```\n\n那么以上，你就可以实现通过手机号，使手机快捷登录的组件功能了，另外微信官方接口的调用都需要在后端中利用axiox或者其他的组件进行请求，再把数据发给前端，不可在前端直接调用。\n\n如果您还有任何疑惑，可以在评论区留言，或者联系我的email。\n","slug":"微信小程序/2025_01_19","published":1,"updated":"2025-02-23T11:07:54.252Z","comments":1,"layout":"post","photos":[],"_id":"cm7n0r3bm000mtqvy29x5babj","content":"<h2 id=\"前提概要\"><a href=\"#前提概要\" class=\"headerlink\" title=\"前提概要\"></a>前提概要</h2><p>更新原因： 从基础库2.21.2开始，对步骤2中换取手机号信息的方式进行了安全升级，上述为新方式使用指南。（<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/deprecatedGetPhoneNumber.html\">旧方式</a>目前可以继续使用，但<strong>建议开发者使用新方式，以增强小程序安全性</strong>）另外，新方式<strong>不再</strong>需要提前调用<strong>wx.login</strong>进行登录。</p>\n<span id=\"more\"></span>\n\n<p>以下放下微信官方的链接</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/getPhoneNumber.html\">手机号快速验证组件 | 微信开放文档</a></p>\n<p>前端工具：小程序原生开发</p>\n<p>后端工具：基于nodejs的express框架</p>\n<p>因此我们需要修改我们新的微信小程序的登录逻辑，以实现用户便捷登录。</p>\n<p>从官方文档更新的说明来看，登录逻辑也许并不需要在写wx.login了（吗）？</p>\n<p>如果真不需要写了，不仅仅便捷了用户，同时也便捷了开发者写接口和前端的工作量。</p>\n<p>这边先放新方法的代码演示</p>\n<h2 id=\"手机号快捷登录代码示例\"><a href=\"#手机号快捷登录代码示例\" class=\"headerlink\" title=\"手机号快捷登录代码示例\"></a>手机号快捷登录代码示例</h2><h4 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h4><h5 id=\"wxml\"><a href=\"#wxml\" class=\"headerlink\" title=\"wxml\"></a><strong>wxml</strong></h5><p>wxml需要写入button组件，并写入**open-type&#x3D;”getPhoneNumber”，bindgetphonenumber&#x3D;”getPhoneNumber”**这两个语句。</p>\n<p>如果您是<strong>uniapp</strong>开发，那么bindgetphonenumber需要替换为@getphonenumber，其他不变</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;login-btn&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">open-type</span>=<span class=\"string\">&quot;getPhoneNumber&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">bindgetphonenumber</span>=<span class=\"string\">&quot;getPhoneNumber&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span>请先登录再使用</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>wxss样式，一般我都觉得随心所欲即可（其实是我实在懒得贴那么多代码啊哈哈）</p>\n<h5 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a><strong>javascript</strong></h5><p>根据微信开发者文档中官方示例代码我们可知:getPhoneNumber这个函数有一个e(函数的事件参数),其中这个e包括三个信息，分别为动态令牌，回调信息以及错误码，其中回调信息无论成功失败都会返回信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Page</span>(&#123;</span><br><span class=\"line\">  <span class=\"title function_\">getPhoneNumber</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">detail</span>.<span class=\"property\">code</span>)  <span class=\"comment\">// 动态令牌</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">detail</span>.<span class=\"property\">errMsg</span>) <span class=\"comment\">// 回调信息（成功失败都会返回）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">detail</span>.<span class=\"property\">errno</span>)  <span class=\"comment\">// 错误码（失败时返回）</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>例如，也许你的js文件用的官方的信息，也许你的控制台会受到以下的返回信息：</p>\n<p>getPhoneNumber: ok</p>\n<p>code: 动态令牌码</p>\n<p>errono: undifined</p>\n<p>这样你就初步实现了这个微信组件的调用数据。</p>\n<p>接下来是再项目中实用的这个函数组件</p>\n<p>根据官方文档，你需要先获取access_token,然后在根据access_token和前端发送的code数据来获取到用户的手机号信息。</p>\n<p>以下为我的示例代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getPhoneNumber</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> code = e.<span class=\"property\">detail</span>.<span class=\"property\">code</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> errMsg = e.<span class=\"property\">detail</span>.<span class=\"property\">errMsg</span>;</span><br><span class=\"line\">    <span class=\"comment\">//首先确认从微信官方获取的信息是没问题的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (errMsg === <span class=\"string\">&#x27;getPhoneNumber:ok&#x27;</span>) &#123;</span><br><span class=\"line\">      wx.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">       <span class=\"comment\">//这里写你的后端接口的地址</span></span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://127.0.0.1:3000/api/getPhoneNumber&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">       <span class=\"comment\">//发送给后端的数据</span></span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">          code</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//登录成功case</span></span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;返回数据:&#x27;</span>, res.<span class=\"property\">data</span>);</span><br><span class=\"line\">            <span class=\"comment\">//登录成功弹窗函数</span></span><br><span class=\"line\">            wx.<span class=\"title function_\">showToast</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">title</span>: <span class=\"string\">&#x27;登录成功&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;返回数据格式错误:&#x27;</span>, res.<span class=\"property\">data</span>);</span><br><span class=\"line\">            <span class=\"comment\">//获取手机号失败</span></span><br><span class=\"line\">            wx.<span class=\"title function_\">showToast</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">title</span>: <span class=\"string\">&#x27;获取手机号失败&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//登录失败case</span></span><br><span class=\"line\">        <span class=\"comment\">//接口请求失败</span></span><br><span class=\"line\">        <span class=\"attr\">fail</span>: <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;请求失败:&#x27;</span>, error);</span><br><span class=\"line\">          wx.<span class=\"title function_\">showToast</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">title</span>: <span class=\"string\">&#x27;登录失败&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//用户取消授权</span></span><br><span class=\"line\">      wx.<span class=\"title function_\">showToast</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&#x27;您取消了授权&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>如果你能理解我上面写的代码，那么基本就可以在实际项目中使用这个组件。</p>\n<p>下面我简单提供一下我的后端代码，本人小白，写的后端较为啰嗦，还请各位大神见谅，主要目的为了配合前面前端。</p>\n<p>get_AccessToken(做router_function)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 微信小程序配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">APPID</span> = <span class=\"string\">&#x27;你的微信后台appid&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SECRET</span> = <span class=\"string\">&#x27;你的微信后台secret&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这个不用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">GRANT_TYPE</span> = <span class=\"string\">&#x27;client_credential&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取access_token</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getAccessToken</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://api.weixin.qq.com/cgi-bin/token&#x27;</span>, &#123;</span><br><span class=\"line\">            <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">appid</span>: <span class=\"variable constant_\">APPID</span>,</span><br><span class=\"line\">                <span class=\"attr\">secret</span>: <span class=\"variable constant_\">SECRET</span>,</span><br><span class=\"line\">                <span class=\"attr\">grant_type</span>: <span class=\"variable constant_\">GRANT_TYPE</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.<span class=\"property\">data</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;获取access_token失败:&#x27;</span>, error);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出模块</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    getAccessToken</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>getPhoneNumber</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.<span class=\"title class_\">Router</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; getAccessToken &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../routes_function/getAccessToken&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//我这边引入了一个中间件用于获取token，作为用户的登录令牌，代码会放到下面</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; generateToken &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../middleware/auth&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取手机号</span></span><br><span class=\"line\">router.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/getPhoneNumber&#x27;</span>, <span class=\"title function_\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; code &#125; = req.<span class=\"property\">body</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 先获取access_token</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> tokenData = <span class=\"keyword\">await</span> <span class=\"title function_\">getAccessToken</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 确认access_token</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tokenData) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">code</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">message</span>: <span class=\"string\">&#x27;获取access_token失败&#x27;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"variable constant_\">ACCESS_TOKEN</span> = tokenData.<span class=\"property\">access_token</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 确认请求参数code</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!req.<span class=\"property\">body</span>.<span class=\"property\">code</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">code</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">message</span>: <span class=\"string\">&#x27;缺少code参数&#x27;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;code请求:&#x27;</span>, &#123; code &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = <span class=\"string\">`https://api.weixin.qq.com/wxa/business/getuserphonenumber?access_token=<span class=\"subst\">$&#123;ACCESS_TOKEN&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">post</span>(url, &#123;</span><br><span class=\"line\">            code</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;获取手机号成功:&#x27;</span>, response.<span class=\"property\">data</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在获取到手机号后，生成token</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.<span class=\"property\">data</span>.<span class=\"property\">phone_info</span> &amp;&amp; response.<span class=\"property\">data</span>.<span class=\"property\">phone_info</span>.<span class=\"property\">phoneNumber</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> phoneNumber = response.<span class=\"property\">data</span>.<span class=\"property\">phone_info</span>.<span class=\"property\">phoneNumber</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 生成token</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> token = <span class=\"title function_\">generateToken</span>(&#123;</span><br><span class=\"line\">                phoneNumber,</span><br><span class=\"line\">                <span class=\"attr\">timestamp</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 返回手机号和token</span></span><br><span class=\"line\">            res.<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">code</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"attr\">message</span>: <span class=\"string\">&#x27;获取成功&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">phone_info</span>: response.<span class=\"property\">data</span>.<span class=\"property\">phone_info</span>,</span><br><span class=\"line\">                    token</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">code</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">message</span>: <span class=\"string\">&#x27;获取手机号失败&#x27;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;获取手机号错误:&#x27;</span>, error);</span><br><span class=\"line\">        res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">code</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">message</span>: <span class=\"string\">&#x27;服务器错误&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">error</span>: error.<span class=\"property\">message</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = router;</span><br></pre></td></tr></table></figure>\n\n<p>中间件利用jwt组件来生成token</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//配置文件在下</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; secret &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../config/jwt&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> auth = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 生成token</span></span><br><span class=\"line\">  <span class=\"title function_\">generateToken</span>(<span class=\"params\">payload</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jwt.<span class=\"title function_\">sign</span>(payload, secret, &#123; <span class=\"attr\">expiresIn</span>: <span class=\"string\">&#x27;2d&#x27;</span> &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 验证token</span></span><br><span class=\"line\">  <span class=\"title function_\">verifyToken</span>(<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = req.<span class=\"property\">headers</span>.<span class=\"property\">authorization</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!token) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">401</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">code</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;未提供token&#x27;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> decoded = jwt.<span class=\"title function_\">verify</span>(token.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;Bearer &#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>), secret);</span><br><span class=\"line\">      req.<span class=\"property\">user</span> = decoded;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">401</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">code</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;token无效或已过期&#x27;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = auth; </span><br></pre></td></tr></table></figure>\n\n<p>jwt的配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">secret</span>: <span class=\"string\">&#x27;随便输&#x27;</span>, <span class=\"comment\">// JWT密钥</span></span><br><span class=\"line\">  <span class=\"attr\">expiresIn</span>: <span class=\"string\">&#x27;1d&#x27;</span> <span class=\"comment\">// token过期时间</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<p>那么以上，你就可以实现通过手机号，使手机快捷登录的组件功能了，另外微信官方接口的调用都需要在后端中利用axiox或者其他的组件进行请求，再把数据发给前端，不可在前端直接调用。</p>\n<p>如果您还有任何疑惑，可以在评论区留言，或者联系我的email。</p>\n","excerpt":"<h2 id=\"前提概要\"><a href=\"#前提概要\" class=\"headerlink\" title=\"前提概要\"></a>前提概要</h2><p>更新原因： 从基础库2.21.2开始，对步骤2中换取手机号信息的方式进行了安全升级，上述为新方式使用指南。（<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/deprecatedGetPhoneNumber.html\">旧方式</a>目前可以继续使用，但<strong>建议开发者使用新方式，以增强小程序安全性</strong>）另外，新方式<strong>不再</strong>需要提前调用<strong>wx.login</strong>进行登录。</p>","more":"<p>以下放下微信官方的链接</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/getPhoneNumber.html\">手机号快速验证组件 | 微信开放文档</a></p>\n<p>前端工具：小程序原生开发</p>\n<p>后端工具：基于nodejs的express框架</p>\n<p>因此我们需要修改我们新的微信小程序的登录逻辑，以实现用户便捷登录。</p>\n<p>从官方文档更新的说明来看，登录逻辑也许并不需要在写wx.login了（吗）？</p>\n<p>如果真不需要写了，不仅仅便捷了用户，同时也便捷了开发者写接口和前端的工作量。</p>\n<p>这边先放新方法的代码演示</p>\n<h2 id=\"手机号快捷登录代码示例\"><a href=\"#手机号快捷登录代码示例\" class=\"headerlink\" title=\"手机号快捷登录代码示例\"></a>手机号快捷登录代码示例</h2><h4 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h4><h5 id=\"wxml\"><a href=\"#wxml\" class=\"headerlink\" title=\"wxml\"></a><strong>wxml</strong></h5><p>wxml需要写入button组件，并写入**open-type&#x3D;”getPhoneNumber”，bindgetphonenumber&#x3D;”getPhoneNumber”**这两个语句。</p>\n<p>如果您是<strong>uniapp</strong>开发，那么bindgetphonenumber需要替换为@getphonenumber，其他不变</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;login-btn&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">open-type</span>=<span class=\"string\">&quot;getPhoneNumber&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">bindgetphonenumber</span>=<span class=\"string\">&quot;getPhoneNumber&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span>请先登录再使用</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>wxss样式，一般我都觉得随心所欲即可（其实是我实在懒得贴那么多代码啊哈哈）</p>\n<h5 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a><strong>javascript</strong></h5><p>根据微信开发者文档中官方示例代码我们可知:getPhoneNumber这个函数有一个e(函数的事件参数),其中这个e包括三个信息，分别为动态令牌，回调信息以及错误码，其中回调信息无论成功失败都会返回信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Page</span>(&#123;</span><br><span class=\"line\">  <span class=\"title function_\">getPhoneNumber</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">detail</span>.<span class=\"property\">code</span>)  <span class=\"comment\">// 动态令牌</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">detail</span>.<span class=\"property\">errMsg</span>) <span class=\"comment\">// 回调信息（成功失败都会返回）</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">detail</span>.<span class=\"property\">errno</span>)  <span class=\"comment\">// 错误码（失败时返回）</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>例如，也许你的js文件用的官方的信息，也许你的控制台会受到以下的返回信息：</p>\n<p>getPhoneNumber: ok</p>\n<p>code: 动态令牌码</p>\n<p>errono: undifined</p>\n<p>这样你就初步实现了这个微信组件的调用数据。</p>\n<p>接下来是再项目中实用的这个函数组件</p>\n<p>根据官方文档，你需要先获取access_token,然后在根据access_token和前端发送的code数据来获取到用户的手机号信息。</p>\n<p>以下为我的示例代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getPhoneNumber</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> code = e.<span class=\"property\">detail</span>.<span class=\"property\">code</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> errMsg = e.<span class=\"property\">detail</span>.<span class=\"property\">errMsg</span>;</span><br><span class=\"line\">    <span class=\"comment\">//首先确认从微信官方获取的信息是没问题的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (errMsg === <span class=\"string\">&#x27;getPhoneNumber:ok&#x27;</span>) &#123;</span><br><span class=\"line\">      wx.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">       <span class=\"comment\">//这里写你的后端接口的地址</span></span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;http://127.0.0.1:3000/api/getPhoneNumber&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">       <span class=\"comment\">//发送给后端的数据</span></span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">          code</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//登录成功case</span></span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;返回数据:&#x27;</span>, res.<span class=\"property\">data</span>);</span><br><span class=\"line\">            <span class=\"comment\">//登录成功弹窗函数</span></span><br><span class=\"line\">            wx.<span class=\"title function_\">showToast</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">title</span>: <span class=\"string\">&#x27;登录成功&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;返回数据格式错误:&#x27;</span>, res.<span class=\"property\">data</span>);</span><br><span class=\"line\">            <span class=\"comment\">//获取手机号失败</span></span><br><span class=\"line\">            wx.<span class=\"title function_\">showToast</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">title</span>: <span class=\"string\">&#x27;获取手机号失败&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//登录失败case</span></span><br><span class=\"line\">        <span class=\"comment\">//接口请求失败</span></span><br><span class=\"line\">        <span class=\"attr\">fail</span>: <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;请求失败:&#x27;</span>, error);</span><br><span class=\"line\">          wx.<span class=\"title function_\">showToast</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">title</span>: <span class=\"string\">&#x27;登录失败&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//用户取消授权</span></span><br><span class=\"line\">      wx.<span class=\"title function_\">showToast</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&#x27;您取消了授权&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>如果你能理解我上面写的代码，那么基本就可以在实际项目中使用这个组件。</p>\n<p>下面我简单提供一下我的后端代码，本人小白，写的后端较为啰嗦，还请各位大神见谅，主要目的为了配合前面前端。</p>\n<p>get_AccessToken(做router_function)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 微信小程序配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">APPID</span> = <span class=\"string\">&#x27;你的微信后台appid&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SECRET</span> = <span class=\"string\">&#x27;你的微信后台secret&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这个不用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">GRANT_TYPE</span> = <span class=\"string\">&#x27;client_credential&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取access_token</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getAccessToken</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://api.weixin.qq.com/cgi-bin/token&#x27;</span>, &#123;</span><br><span class=\"line\">            <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">appid</span>: <span class=\"variable constant_\">APPID</span>,</span><br><span class=\"line\">                <span class=\"attr\">secret</span>: <span class=\"variable constant_\">SECRET</span>,</span><br><span class=\"line\">                <span class=\"attr\">grant_type</span>: <span class=\"variable constant_\">GRANT_TYPE</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.<span class=\"property\">data</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;获取access_token失败:&#x27;</span>, error);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出模块</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    getAccessToken</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>getPhoneNumber</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.<span class=\"title class_\">Router</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; getAccessToken &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../routes_function/getAccessToken&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//我这边引入了一个中间件用于获取token，作为用户的登录令牌，代码会放到下面</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; generateToken &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../middleware/auth&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取手机号</span></span><br><span class=\"line\">router.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/getPhoneNumber&#x27;</span>, <span class=\"title function_\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; code &#125; = req.<span class=\"property\">body</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 先获取access_token</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> tokenData = <span class=\"keyword\">await</span> <span class=\"title function_\">getAccessToken</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 确认access_token</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tokenData) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">code</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">message</span>: <span class=\"string\">&#x27;获取access_token失败&#x27;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"variable constant_\">ACCESS_TOKEN</span> = tokenData.<span class=\"property\">access_token</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 确认请求参数code</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!req.<span class=\"property\">body</span>.<span class=\"property\">code</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">code</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">message</span>: <span class=\"string\">&#x27;缺少code参数&#x27;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;code请求:&#x27;</span>, &#123; code &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = <span class=\"string\">`https://api.weixin.qq.com/wxa/business/getuserphonenumber?access_token=<span class=\"subst\">$&#123;ACCESS_TOKEN&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">post</span>(url, &#123;</span><br><span class=\"line\">            code</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;获取手机号成功:&#x27;</span>, response.<span class=\"property\">data</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在获取到手机号后，生成token</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.<span class=\"property\">data</span>.<span class=\"property\">phone_info</span> &amp;&amp; response.<span class=\"property\">data</span>.<span class=\"property\">phone_info</span>.<span class=\"property\">phoneNumber</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> phoneNumber = response.<span class=\"property\">data</span>.<span class=\"property\">phone_info</span>.<span class=\"property\">phoneNumber</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 生成token</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> token = <span class=\"title function_\">generateToken</span>(&#123;</span><br><span class=\"line\">                phoneNumber,</span><br><span class=\"line\">                <span class=\"attr\">timestamp</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 返回手机号和token</span></span><br><span class=\"line\">            res.<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">code</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"attr\">message</span>: <span class=\"string\">&#x27;获取成功&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">phone_info</span>: response.<span class=\"property\">data</span>.<span class=\"property\">phone_info</span>,</span><br><span class=\"line\">                    token</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">code</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">message</span>: <span class=\"string\">&#x27;获取手机号失败&#x27;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;获取手机号错误:&#x27;</span>, error);</span><br><span class=\"line\">        res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">code</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">message</span>: <span class=\"string\">&#x27;服务器错误&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">error</span>: error.<span class=\"property\">message</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = router;</span><br></pre></td></tr></table></figure>\n\n<p>中间件利用jwt组件来生成token</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//配置文件在下</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; secret &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../config/jwt&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> auth = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 生成token</span></span><br><span class=\"line\">  <span class=\"title function_\">generateToken</span>(<span class=\"params\">payload</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jwt.<span class=\"title function_\">sign</span>(payload, secret, &#123; <span class=\"attr\">expiresIn</span>: <span class=\"string\">&#x27;2d&#x27;</span> &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 验证token</span></span><br><span class=\"line\">  <span class=\"title function_\">verifyToken</span>(<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = req.<span class=\"property\">headers</span>.<span class=\"property\">authorization</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!token) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">401</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">code</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;未提供token&#x27;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> decoded = jwt.<span class=\"title function_\">verify</span>(token.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;Bearer &#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>), secret);</span><br><span class=\"line\">      req.<span class=\"property\">user</span> = decoded;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">401</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">code</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;token无效或已过期&#x27;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = auth; </span><br></pre></td></tr></table></figure>\n\n<p>jwt的配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">secret</span>: <span class=\"string\">&#x27;随便输&#x27;</span>, <span class=\"comment\">// JWT密钥</span></span><br><span class=\"line\">  <span class=\"attr\">expiresIn</span>: <span class=\"string\">&#x27;1d&#x27;</span> <span class=\"comment\">// token过期时间</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<p>那么以上，你就可以实现通过手机号，使手机快捷登录的组件功能了，另外微信官方接口的调用都需要在后端中利用axiox或者其他的组件进行请求，再把数据发给前端，不可在前端直接调用。</p>\n<p>如果您还有任何疑惑，可以在评论区留言，或者联系我的email。</p>"},{"title":"网络技术--基础环节","date":"2025-01-25T16:00:00.000Z","_content":"\n# 1. 基础环节\n\n## 1.1 计算机网络的基本结构\n\n典型的计算机网络从**逻辑功能**上分为**资源子网**和**通信子网**两部分。\n\n<!-- more -->\n\n资源子网：\n\n- 负责全网的数据处理业务，负责向网络用户提供各种网络资源和网络服务。\n\n- 由主计算机系统，终端和联网设备，软件与信息资源等组成。\n  \n  - 主计算机系统（主机/host）主要为本地用户与远程用户相互进行资源访问与共享提供服务\n  \n  - 早期的主机主要使用大型机、中型机、小型机，而目前主要是个人计算机\n  \n  - 主机包括用户终端设备和服务器\n  \n  - 普通用户终端通过主机连入网络，终端是用户访问网络的界面。\n\n通信子网：\n\n- 负责进行网络数据传输、转发等通信处理任务，由**通信控制处理机**、通信线路与与其他通信设备组成。\n  \n  - 通信控制处理机：也被称为网络节点\n  \n  - 他是与资源子网的主机、终端连接的接口，把主机和终端接入网络\n  \n  - 他也是存储转发分组的节点，负责分组的接收、校验、存储、转发没实现把源主机报文准确发送到目的主机的功能。\n  \n  - 他是路由器的雏形。\n\n- 通信线路\n  \n  - 为通信控制处理机之间、通信控制处理机与主机之间提供通信信道，如双绞线，同轴电缆，光纤等有线介质。微波、卫星等无线介质\n\n## 1.2 计算机网络分类和互联方式\n\n### 1.2.1 计算机网络分类\n\n分三类：局域网、城域网、广域网。\n\n#### 局域网（LAN）\n\nLAN(Local Area Network)\n","source":"_posts/网络技术/1. 网络系统结构与设计的基本原则.md","raw":"---\ntitle: 网络技术--基础环节\ndate: 2025/1/26\ntags: 网络技术\ncategories: \n- [网络技术]\n---\n\n# 1. 基础环节\n\n## 1.1 计算机网络的基本结构\n\n典型的计算机网络从**逻辑功能**上分为**资源子网**和**通信子网**两部分。\n\n<!-- more -->\n\n资源子网：\n\n- 负责全网的数据处理业务，负责向网络用户提供各种网络资源和网络服务。\n\n- 由主计算机系统，终端和联网设备，软件与信息资源等组成。\n  \n  - 主计算机系统（主机/host）主要为本地用户与远程用户相互进行资源访问与共享提供服务\n  \n  - 早期的主机主要使用大型机、中型机、小型机，而目前主要是个人计算机\n  \n  - 主机包括用户终端设备和服务器\n  \n  - 普通用户终端通过主机连入网络，终端是用户访问网络的界面。\n\n通信子网：\n\n- 负责进行网络数据传输、转发等通信处理任务，由**通信控制处理机**、通信线路与与其他通信设备组成。\n  \n  - 通信控制处理机：也被称为网络节点\n  \n  - 他是与资源子网的主机、终端连接的接口，把主机和终端接入网络\n  \n  - 他也是存储转发分组的节点，负责分组的接收、校验、存储、转发没实现把源主机报文准确发送到目的主机的功能。\n  \n  - 他是路由器的雏形。\n\n- 通信线路\n  \n  - 为通信控制处理机之间、通信控制处理机与主机之间提供通信信道，如双绞线，同轴电缆，光纤等有线介质。微波、卫星等无线介质\n\n## 1.2 计算机网络分类和互联方式\n\n### 1.2.1 计算机网络分类\n\n分三类：局域网、城域网、广域网。\n\n#### 局域网（LAN）\n\nLAN(Local Area Network)\n","slug":"网络技术/1. 网络系统结构与设计的基本原则","published":1,"updated":"2025-02-23T11:07:54.255Z","comments":1,"layout":"post","photos":[],"_id":"cm7n0r3bo000otqvy0tar90y4","content":"<h1 id=\"1-基础环节\"><a href=\"#1-基础环节\" class=\"headerlink\" title=\"1. 基础环节\"></a>1. 基础环节</h1><h2 id=\"1-1-计算机网络的基本结构\"><a href=\"#1-1-计算机网络的基本结构\" class=\"headerlink\" title=\"1.1 计算机网络的基本结构\"></a>1.1 计算机网络的基本结构</h2><p>典型的计算机网络从<strong>逻辑功能</strong>上分为<strong>资源子网</strong>和<strong>通信子网</strong>两部分。</p>\n<span id=\"more\"></span>\n\n<p>资源子网：</p>\n<ul>\n<li><p>负责全网的数据处理业务，负责向网络用户提供各种网络资源和网络服务。</p>\n</li>\n<li><p>由主计算机系统，终端和联网设备，软件与信息资源等组成。</p>\n<ul>\n<li><p>主计算机系统（主机&#x2F;host）主要为本地用户与远程用户相互进行资源访问与共享提供服务</p>\n</li>\n<li><p>早期的主机主要使用大型机、中型机、小型机，而目前主要是个人计算机</p>\n</li>\n<li><p>主机包括用户终端设备和服务器</p>\n</li>\n<li><p>普通用户终端通过主机连入网络，终端是用户访问网络的界面。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>通信子网：</p>\n<ul>\n<li><p>负责进行网络数据传输、转发等通信处理任务，由<strong>通信控制处理机</strong>、通信线路与与其他通信设备组成。</p>\n<ul>\n<li><p>通信控制处理机：也被称为网络节点</p>\n</li>\n<li><p>他是与资源子网的主机、终端连接的接口，把主机和终端接入网络</p>\n</li>\n<li><p>他也是存储转发分组的节点，负责分组的接收、校验、存储、转发没实现把源主机报文准确发送到目的主机的功能。</p>\n</li>\n<li><p>他是路由器的雏形。</p>\n</li>\n</ul>\n</li>\n<li><p>通信线路</p>\n<ul>\n<li>为通信控制处理机之间、通信控制处理机与主机之间提供通信信道，如双绞线，同轴电缆，光纤等有线介质。微波、卫星等无线介质</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-2-计算机网络分类和互联方式\"><a href=\"#1-2-计算机网络分类和互联方式\" class=\"headerlink\" title=\"1.2 计算机网络分类和互联方式\"></a>1.2 计算机网络分类和互联方式</h2><h3 id=\"1-2-1-计算机网络分类\"><a href=\"#1-2-1-计算机网络分类\" class=\"headerlink\" title=\"1.2.1 计算机网络分类\"></a>1.2.1 计算机网络分类</h3><p>分三类：局域网、城域网、广域网。</p>\n<h4 id=\"局域网（LAN）\"><a href=\"#局域网（LAN）\" class=\"headerlink\" title=\"局域网（LAN）\"></a>局域网（LAN）</h4><p>LAN(Local Area Network)</p>\n","excerpt":"<h1 id=\"1-基础环节\"><a href=\"#1-基础环节\" class=\"headerlink\" title=\"1. 基础环节\"></a>1. 基础环节</h1><h2 id=\"1-1-计算机网络的基本结构\"><a href=\"#1-1-计算机网络的基本结构\" class=\"headerlink\" title=\"1.1 计算机网络的基本结构\"></a>1.1 计算机网络的基本结构</h2><p>典型的计算机网络从<strong>逻辑功能</strong>上分为<strong>资源子网</strong>和<strong>通信子网</strong>两部分。</p>","more":"<p>资源子网：</p>\n<ul>\n<li><p>负责全网的数据处理业务，负责向网络用户提供各种网络资源和网络服务。</p>\n</li>\n<li><p>由主计算机系统，终端和联网设备，软件与信息资源等组成。</p>\n<ul>\n<li><p>主计算机系统（主机&#x2F;host）主要为本地用户与远程用户相互进行资源访问与共享提供服务</p>\n</li>\n<li><p>早期的主机主要使用大型机、中型机、小型机，而目前主要是个人计算机</p>\n</li>\n<li><p>主机包括用户终端设备和服务器</p>\n</li>\n<li><p>普通用户终端通过主机连入网络，终端是用户访问网络的界面。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>通信子网：</p>\n<ul>\n<li><p>负责进行网络数据传输、转发等通信处理任务，由<strong>通信控制处理机</strong>、通信线路与与其他通信设备组成。</p>\n<ul>\n<li><p>通信控制处理机：也被称为网络节点</p>\n</li>\n<li><p>他是与资源子网的主机、终端连接的接口，把主机和终端接入网络</p>\n</li>\n<li><p>他也是存储转发分组的节点，负责分组的接收、校验、存储、转发没实现把源主机报文准确发送到目的主机的功能。</p>\n</li>\n<li><p>他是路由器的雏形。</p>\n</li>\n</ul>\n</li>\n<li><p>通信线路</p>\n<ul>\n<li>为通信控制处理机之间、通信控制处理机与主机之间提供通信信道，如双绞线，同轴电缆，光纤等有线介质。微波、卫星等无线介质</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-2-计算机网络分类和互联方式\"><a href=\"#1-2-计算机网络分类和互联方式\" class=\"headerlink\" title=\"1.2 计算机网络分类和互联方式\"></a>1.2 计算机网络分类和互联方式</h2><h3 id=\"1-2-1-计算机网络分类\"><a href=\"#1-2-1-计算机网络分类\" class=\"headerlink\" title=\"1.2.1 计算机网络分类\"></a>1.2.1 计算机网络分类</h3><p>分三类：局域网、城域网、广域网。</p>\n<h4 id=\"局域网（LAN）\"><a href=\"#局域网（LAN）\" class=\"headerlink\" title=\"局域网（LAN）\"></a>局域网（LAN）</h4><p>LAN(Local Area Network)</p>"},{"title":"第一篇博客","date":"2025-01-03T09:30:00.000Z","_content":"\n**THIS IS MY FIRST BLOG IN MY LIFE**\n\n**这是我人生中的第一篇博客**\n\n<!-- more -->\n\n# 本博客诞生的history\n\n经过大三上学期的期末周的摧残，这篇博客折腾了我整整一个月（谁家好人大三还能有那么多课啊），所以我想说的，计算机这专业真是给狗狗都不学\n\n## 吐槽一下netlify cms\n\n从一开始就踩坑去学习netlify＋vercel＋hexo部署个人博客的教程兜兜转转到现在，netlify cms的后台写博客的markdown真的很狗屎，主要狗屎在他那个markdown输入中文TM地根本输入不进去！！\n\n**输入不进去！！！**\n\n谁懂啊，那种感觉，折腾了半天的东西最后难用的要死，真的有种想死的心都有了（真无语）\n\n说实话，我也就是个做博客的小白，我也不知道是不是我自己的技术不行，但是我排查了很久的问题，真的 $输入不进去！$ \n\n**真的，我就想着这个博客写好之后我一定要写个这个文章来发泄一下，太折腾人了（捂脸）**\n\n## next主题的主观评价\n\n首先，真的非常感谢 **[HEXO](https://hexo.io/zh-cn/)** 和 **[nexT](https://theme-next.js.org/)** 博客框架和主题，让从未制作过博客的小白也可以轻松做出非常精美的博客界面。\n\n其次，真的很感谢我自己，为了博客的$魔改美化$倾尽心血。。。\n\n我自己是一个用html,css,js,vue3做过全站开发的一个苦逼大学生。因为看到很多喜欢写代码的小伙伴们都很喜欢做技术交流，分享技术，因此我想，我也想做一个博客帖子，不仅仅来记录我自己的学习日志，整理我自己需要的工具，并且还可以将我自己的技术分享给他人，也算是为别人，为自己，为社会做贡献了吧（怎么突然升华起来了哈哈）\n\n还有就是，next主题官方给主题的扩展性和第三方插件做的真的真的特别棒，就是页面里面开f12找元素的我实在是太狼狈了哈哈。\n\n在此再次感谢 **[HEXO](https://hexo.io/zh-cn/)** 和 **[nexT](https://theme-next.js.org/)** 官方为本博客提供的支持\n\n## 接下来对本博客的维护更新打算\n\n从2025年开始，我将正式开始对于本站的内容更新，以及其他模块的上线。\n\n现在主要着手学习uniapp以及相关的技术框架。\n\n**2025年的我，加油吧！**","source":"_posts/随记/my_first_blog.md","raw":"---\ntitle: 第一篇博客\ndate: 2025/1/3 17:30:00\ntags: 随记\ncategories: \n- [随记]\n- [hexo]\n---\n\n**THIS IS MY FIRST BLOG IN MY LIFE**\n\n**这是我人生中的第一篇博客**\n\n<!-- more -->\n\n# 本博客诞生的history\n\n经过大三上学期的期末周的摧残，这篇博客折腾了我整整一个月（谁家好人大三还能有那么多课啊），所以我想说的，计算机这专业真是给狗狗都不学\n\n## 吐槽一下netlify cms\n\n从一开始就踩坑去学习netlify＋vercel＋hexo部署个人博客的教程兜兜转转到现在，netlify cms的后台写博客的markdown真的很狗屎，主要狗屎在他那个markdown输入中文TM地根本输入不进去！！\n\n**输入不进去！！！**\n\n谁懂啊，那种感觉，折腾了半天的东西最后难用的要死，真的有种想死的心都有了（真无语）\n\n说实话，我也就是个做博客的小白，我也不知道是不是我自己的技术不行，但是我排查了很久的问题，真的 $输入不进去！$ \n\n**真的，我就想着这个博客写好之后我一定要写个这个文章来发泄一下，太折腾人了（捂脸）**\n\n## next主题的主观评价\n\n首先，真的非常感谢 **[HEXO](https://hexo.io/zh-cn/)** 和 **[nexT](https://theme-next.js.org/)** 博客框架和主题，让从未制作过博客的小白也可以轻松做出非常精美的博客界面。\n\n其次，真的很感谢我自己，为了博客的$魔改美化$倾尽心血。。。\n\n我自己是一个用html,css,js,vue3做过全站开发的一个苦逼大学生。因为看到很多喜欢写代码的小伙伴们都很喜欢做技术交流，分享技术，因此我想，我也想做一个博客帖子，不仅仅来记录我自己的学习日志，整理我自己需要的工具，并且还可以将我自己的技术分享给他人，也算是为别人，为自己，为社会做贡献了吧（怎么突然升华起来了哈哈）\n\n还有就是，next主题官方给主题的扩展性和第三方插件做的真的真的特别棒，就是页面里面开f12找元素的我实在是太狼狈了哈哈。\n\n在此再次感谢 **[HEXO](https://hexo.io/zh-cn/)** 和 **[nexT](https://theme-next.js.org/)** 官方为本博客提供的支持\n\n## 接下来对本博客的维护更新打算\n\n从2025年开始，我将正式开始对于本站的内容更新，以及其他模块的上线。\n\n现在主要着手学习uniapp以及相关的技术框架。\n\n**2025年的我，加油吧！**","slug":"随记/my_first_blog","published":1,"updated":"2025-02-23T11:07:54.254Z","comments":1,"layout":"post","photos":[],"_id":"cm7n0r3bq000rtqvyeywq12ow","content":"<p><strong>THIS IS MY FIRST BLOG IN MY LIFE</strong></p>\n<p><strong>这是我人生中的第一篇博客</strong></p>\n<span id=\"more\"></span>\n\n<h1 id=\"本博客诞生的history\"><a href=\"#本博客诞生的history\" class=\"headerlink\" title=\"本博客诞生的history\"></a>本博客诞生的history</h1><p>经过大三上学期的期末周的摧残，这篇博客折腾了我整整一个月（谁家好人大三还能有那么多课啊），所以我想说的，计算机这专业真是给狗狗都不学</p>\n<h2 id=\"吐槽一下netlify-cms\"><a href=\"#吐槽一下netlify-cms\" class=\"headerlink\" title=\"吐槽一下netlify cms\"></a>吐槽一下netlify cms</h2><p>从一开始就踩坑去学习netlify＋vercel＋hexo部署个人博客的教程兜兜转转到现在，netlify cms的后台写博客的markdown真的很狗屎，主要狗屎在他那个markdown输入中文TM地根本输入不进去！！</p>\n<p><strong>输入不进去！！！</strong></p>\n<p>谁懂啊，那种感觉，折腾了半天的东西最后难用的要死，真的有种想死的心都有了（真无语）</p>\n<p>说实话，我也就是个做博客的小白，我也不知道是不是我自己的技术不行，但是我排查了很久的问题，真的 $输入不进去！$ </p>\n<p><strong>真的，我就想着这个博客写好之后我一定要写个这个文章来发泄一下，太折腾人了（捂脸）</strong></p>\n<h2 id=\"next主题的主观评价\"><a href=\"#next主题的主观评价\" class=\"headerlink\" title=\"next主题的主观评价\"></a>next主题的主观评价</h2><p>首先，真的非常感谢 <strong><a href=\"https://hexo.io/zh-cn/\">HEXO</a></strong> 和 <strong><a href=\"https://theme-next.js.org/\">nexT</a></strong> 博客框架和主题，让从未制作过博客的小白也可以轻松做出非常精美的博客界面。</p>\n<p>其次，真的很感谢我自己，为了博客的$魔改美化$倾尽心血。。。</p>\n<p>我自己是一个用html,css,js,vue3做过全站开发的一个苦逼大学生。因为看到很多喜欢写代码的小伙伴们都很喜欢做技术交流，分享技术，因此我想，我也想做一个博客帖子，不仅仅来记录我自己的学习日志，整理我自己需要的工具，并且还可以将我自己的技术分享给他人，也算是为别人，为自己，为社会做贡献了吧（怎么突然升华起来了哈哈）</p>\n<p>还有就是，next主题官方给主题的扩展性和第三方插件做的真的真的特别棒，就是页面里面开f12找元素的我实在是太狼狈了哈哈。</p>\n<p>在此再次感谢 <strong><a href=\"https://hexo.io/zh-cn/\">HEXO</a></strong> 和 <strong><a href=\"https://theme-next.js.org/\">nexT</a></strong> 官方为本博客提供的支持</p>\n<h2 id=\"接下来对本博客的维护更新打算\"><a href=\"#接下来对本博客的维护更新打算\" class=\"headerlink\" title=\"接下来对本博客的维护更新打算\"></a>接下来对本博客的维护更新打算</h2><p>从2025年开始，我将正式开始对于本站的内容更新，以及其他模块的上线。</p>\n<p>现在主要着手学习uniapp以及相关的技术框架。</p>\n<p><strong>2025年的我，加油吧！</strong></p>\n","excerpt":"<p><strong>THIS IS MY FIRST BLOG IN MY LIFE</strong></p>\n<p><strong>这是我人生中的第一篇博客</strong></p>","more":"<h1 id=\"本博客诞生的history\"><a href=\"#本博客诞生的history\" class=\"headerlink\" title=\"本博客诞生的history\"></a>本博客诞生的history</h1><p>经过大三上学期的期末周的摧残，这篇博客折腾了我整整一个月（谁家好人大三还能有那么多课啊），所以我想说的，计算机这专业真是给狗狗都不学</p>\n<h2 id=\"吐槽一下netlify-cms\"><a href=\"#吐槽一下netlify-cms\" class=\"headerlink\" title=\"吐槽一下netlify cms\"></a>吐槽一下netlify cms</h2><p>从一开始就踩坑去学习netlify＋vercel＋hexo部署个人博客的教程兜兜转转到现在，netlify cms的后台写博客的markdown真的很狗屎，主要狗屎在他那个markdown输入中文TM地根本输入不进去！！</p>\n<p><strong>输入不进去！！！</strong></p>\n<p>谁懂啊，那种感觉，折腾了半天的东西最后难用的要死，真的有种想死的心都有了（真无语）</p>\n<p>说实话，我也就是个做博客的小白，我也不知道是不是我自己的技术不行，但是我排查了很久的问题，真的 $输入不进去！$ </p>\n<p><strong>真的，我就想着这个博客写好之后我一定要写个这个文章来发泄一下，太折腾人了（捂脸）</strong></p>\n<h2 id=\"next主题的主观评价\"><a href=\"#next主题的主观评价\" class=\"headerlink\" title=\"next主题的主观评价\"></a>next主题的主观评价</h2><p>首先，真的非常感谢 <strong><a href=\"https://hexo.io/zh-cn/\">HEXO</a></strong> 和 <strong><a href=\"https://theme-next.js.org/\">nexT</a></strong> 博客框架和主题，让从未制作过博客的小白也可以轻松做出非常精美的博客界面。</p>\n<p>其次，真的很感谢我自己，为了博客的$魔改美化$倾尽心血。。。</p>\n<p>我自己是一个用html,css,js,vue3做过全站开发的一个苦逼大学生。因为看到很多喜欢写代码的小伙伴们都很喜欢做技术交流，分享技术，因此我想，我也想做一个博客帖子，不仅仅来记录我自己的学习日志，整理我自己需要的工具，并且还可以将我自己的技术分享给他人，也算是为别人，为自己，为社会做贡献了吧（怎么突然升华起来了哈哈）</p>\n<p>还有就是，next主题官方给主题的扩展性和第三方插件做的真的真的特别棒，就是页面里面开f12找元素的我实在是太狼狈了哈哈。</p>\n<p>在此再次感谢 <strong><a href=\"https://hexo.io/zh-cn/\">HEXO</a></strong> 和 <strong><a href=\"https://theme-next.js.org/\">nexT</a></strong> 官方为本博客提供的支持</p>\n<h2 id=\"接下来对本博客的维护更新打算\"><a href=\"#接下来对本博客的维护更新打算\" class=\"headerlink\" title=\"接下来对本博客的维护更新打算\"></a>接下来对本博客的维护更新打算</h2><p>从2025年开始，我将正式开始对于本站的内容更新，以及其他模块的上线。</p>\n<p>现在主要着手学习uniapp以及相关的技术框架。</p>\n<p><strong>2025年的我，加油吧！</strong></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cm7n0r3bg000gtqvy7qdcdyzx","category_id":"cm7n0r3bx0013tqvy7bi802yg","_id":"cm7n0r3bz0017tqvy63ww95qi"},{"post_id":"cm7n0r3bg000gtqvy7qdcdyzx","category_id":"cm7n0r3b00004tqvyascg8sbb","_id":"cm7n0r3c00019tqvyhf205p36"},{"post_id":"cm7n0r3az0003tqvy8t2y9mdg","category_id":"cm7n0r3b00004tqvyascg8sbb","_id":"cm7n0r3c2001dtqvyegmu774z"},{"post_id":"cm7n0r3az0003tqvy8t2y9mdg","category_id":"cm7n0r3bl000jtqvyfjdw7370","_id":"cm7n0r3c2001etqvycud5acj7"},{"post_id":"cm7n0r3az0003tqvy8t2y9mdg","category_id":"cm7n0r3c0001atqvyazr9ci07","_id":"cm7n0r3c3001gtqvydu6e9k52"},{"post_id":"cm7n0r3bo000otqvy0tar90y4","category_id":"cm7n0r3c1001btqvy286i3hn0","_id":"cm7n0r3c3001htqvy1uz21ch2"},{"post_id":"cm7n0r3b20005tqvyejko15cu","category_id":"cm7n0r3b00004tqvyascg8sbb","_id":"cm7n0r3c4001jtqvygq5r4vpg"},{"post_id":"cm7n0r3b20005tqvyejko15cu","category_id":"cm7n0r3bl000jtqvyfjdw7370","_id":"cm7n0r3c4001ktqvy7gv11rmi"},{"post_id":"cm7n0r3b20005tqvyejko15cu","category_id":"cm7n0r3c0001atqvyazr9ci07","_id":"cm7n0r3c4001mtqvy64uz8o1n"},{"post_id":"cm7n0r3am0000tqvy2vew9sw9","category_id":"cm7n0r3b00004tqvyascg8sbb","_id":"cm7n0r3c5001otqvycwythrdw"},{"post_id":"cm7n0r3am0000tqvy2vew9sw9","category_id":"cm7n0r3bl000jtqvyfjdw7370","_id":"cm7n0r3c5001ptqvy6omuh03c"},{"post_id":"cm7n0r3am0000tqvy2vew9sw9","category_id":"cm7n0r3c0001atqvyazr9ci07","_id":"cm7n0r3c6001rtqvy8m433p6i"},{"post_id":"cm7n0r3b40006tqvyeludcwbf","category_id":"cm7n0r3b00004tqvyascg8sbb","_id":"cm7n0r3c6001stqvyefav1e1c"},{"post_id":"cm7n0r3b40006tqvyeludcwbf","category_id":"cm7n0r3bl000jtqvyfjdw7370","_id":"cm7n0r3c6001utqvyftug2al5"},{"post_id":"cm7n0r3b40006tqvyeludcwbf","category_id":"cm7n0r3c0001atqvyazr9ci07","_id":"cm7n0r3c6001vtqvy1k7l1177"},{"post_id":"cm7n0r3ba000atqvy869mhd26","category_id":"cm7n0r3b00004tqvyascg8sbb","_id":"cm7n0r3c7001xtqvy3f71gy2y"},{"post_id":"cm7n0r3ba000atqvy869mhd26","category_id":"cm7n0r3bl000jtqvyfjdw7370","_id":"cm7n0r3c7001ytqvye5kf8xlz"},{"post_id":"cm7n0r3ba000atqvy869mhd26","category_id":"cm7n0r3c0001atqvyazr9ci07","_id":"cm7n0r3c80020tqvy5doy2hrb"},{"post_id":"cm7n0r3at0001tqvy4hpcaaz7","category_id":"cm7n0r3b00004tqvyascg8sbb","_id":"cm7n0r3c80021tqvy9a5mha7a"},{"post_id":"cm7n0r3at0001tqvy4hpcaaz7","category_id":"cm7n0r3bl000jtqvyfjdw7370","_id":"cm7n0r3c80023tqvyh1lv7o1e"},{"post_id":"cm7n0r3at0001tqvy4hpcaaz7","category_id":"cm7n0r3c0001atqvyazr9ci07","_id":"cm7n0r3c80024tqvycx6r1500"},{"post_id":"cm7n0r3bc000ctqvy501xfbuw","category_id":"cm7n0r3b00004tqvyascg8sbb","_id":"cm7n0r3c90026tqvy1gb0ejxo"},{"post_id":"cm7n0r3bc000ctqvy501xfbuw","category_id":"cm7n0r3bl000jtqvyfjdw7370","_id":"cm7n0r3c90027tqvy59bne0nk"},{"post_id":"cm7n0r3bc000ctqvy501xfbuw","category_id":"cm7n0r3c0001atqvyazr9ci07","_id":"cm7n0r3c90028tqvy3zj37j0n"},{"post_id":"cm7n0r3bm000mtqvy29x5babj","category_id":"cm7n0r3by0016tqvyh8tx5m0r","_id":"cm7n0r3c90029tqvy3099fwrv"},{"post_id":"cm7n0r3bm000mtqvy29x5babj","category_id":"cm7n0r3c6001wtqvy3emx1kfh","_id":"cm7n0r3c9002atqvy24s3ent0"},{"post_id":"cm7n0r3bq000rtqvyeywq12ow","category_id":"cm7n0r3c2001ftqvybd6dc68u","_id":"cm7n0r3c9002btqvy2nvj3bc3"},{"post_id":"cm7n0r3bq000rtqvyeywq12ow","category_id":"cm7n0r3c80022tqvycbthafng","_id":"cm7n0r3c9002ctqvy7pyq8ujk"},{"post_id":"cm7n0r3bj000itqvy7teugv0s","category_id":"cm7n0r3by0016tqvyh8tx5m0r","_id":"cm7n0r3ca002dtqvy6f1o9nur"},{"post_id":"cm7n0r3bj000itqvy7teugv0s","category_id":"cm7n0r3c6001wtqvy3emx1kfh","_id":"cm7n0r3ca002etqvy6drnbbx0"},{"post_id":"cm7n0r3bj000itqvy7teugv0s","category_id":"cm7n0r3c80025tqvy59i10amw","_id":"cm7n0r3ca002ftqvy6fm3611g"}],"PostTag":[{"post_id":"cm7n0r3b20005tqvyejko15cu","tag_id":"cm7n0r3aw0002tqvy2gaa8a5d","_id":"cm7n0r3ba0009tqvyaz4t5zbo"},{"post_id":"cm7n0r3am0000tqvy2vew9sw9","tag_id":"cm7n0r3aw0002tqvy2gaa8a5d","_id":"cm7n0r3bc000btqvya1ehewfe"},{"post_id":"cm7n0r3b40006tqvyeludcwbf","tag_id":"cm7n0r3aw0002tqvy2gaa8a5d","_id":"cm7n0r3bg000ftqvy3d0f815q"},{"post_id":"cm7n0r3ba000atqvy869mhd26","tag_id":"cm7n0r3aw0002tqvy2gaa8a5d","_id":"cm7n0r3bj000htqvy1mwj7ab9"},{"post_id":"cm7n0r3at0001tqvy4hpcaaz7","tag_id":"cm7n0r3aw0002tqvy2gaa8a5d","_id":"cm7n0r3bm000ltqvy5k3969sn"},{"post_id":"cm7n0r3bc000ctqvy501xfbuw","tag_id":"cm7n0r3aw0002tqvy2gaa8a5d","_id":"cm7n0r3bo000ntqvyf1jshv7g"},{"post_id":"cm7n0r3az0003tqvy8t2y9mdg","tag_id":"cm7n0r3aw0002tqvy2gaa8a5d","_id":"cm7n0r3bq000qtqvyb3u11j2e"},{"post_id":"cm7n0r3bg000gtqvy7qdcdyzx","tag_id":"cm7n0r3bm000ktqvy4pm2cltp","_id":"cm7n0r3bs000ttqvy6oww01xt"},{"post_id":"cm7n0r3bj000itqvy7teugv0s","tag_id":"cm7n0r3br000stqvy92a820u4","_id":"cm7n0r3bu000wtqvyewzg8qqc"},{"post_id":"cm7n0r3bm000mtqvy29x5babj","tag_id":"cm7n0r3bt000vtqvy29w0gedd","_id":"cm7n0r3bv000ztqvyc9772dhz"},{"post_id":"cm7n0r3bo000otqvy0tar90y4","tag_id":"cm7n0r3bv000ytqvy91oxdme5","_id":"cm7n0r3bw0012tqvy4v8d1s9d"},{"post_id":"cm7n0r3bq000rtqvyeywq12ow","tag_id":"cm7n0r3bw0011tqvy47xddgol","_id":"cm7n0r3by0014tqvyft97hwg3"}],"Tag":[{"name":"linux","_id":"cm7n0r3aw0002tqvy2gaa8a5d"},{"name":"服务器","_id":"cm7n0r3bm000ktqvy4pm2cltp"},{"name":"javascript","_id":"cm7n0r3br000stqvy92a820u4"},{"name":"微信小程序","_id":"cm7n0r3bt000vtqvy29w0gedd"},{"name":"网络技术","_id":"cm7n0r3bv000ytqvy91oxdme5"},{"name":"随记","_id":"cm7n0r3bw0011tqvy47xddgol"}]}}